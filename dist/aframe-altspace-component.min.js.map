{"version":3,"sources":["webpack:///aframe-altspace-component.min.js","webpack:///webpack/bootstrap 4c5d887d65f9da9ef80d","webpack:///./src/index.js","webpack:///./src/altspace-cursor-collider.js","webpack:///./src/altspace-tracked-controls.js","webpack:///./src/altspace.js","webpack:///./src/native-components.js","webpack:///./src/sync-color.js","webpack:///./src/sync-n-sound.js","webpack:///./src/sync-system.js","webpack:///./src/sync-transform.js","webpack:///./src/sync.js","webpack:///./src/wire.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","AFRAME","Error","setColliderFlag","obj","state","userData","altspace","collider","enabled","traverse","THREE","Mesh","registerComponent","schema","default","init","this","el","object3D","data","addEventListener","bind","update","gamepadIndex","trackedControlsSystem","document","querySelector","systems","systemGamepads","getGamepads","tick","controllers","length","window","components","hand","controller","setAttribute","version","usePixelScale","type","verticalAlign","enclosuresOnly","fullspace","Scene","inClient","initRenderer","initCursorEvents","initCollisionEvents","console","warn","t","dt","updateAllBehaviors","remove","pause","play","scene","getEnclosure","then","e","requestFullspace","scale","setScalar","pixelsPerMeter","position","y","innerHeight","innerDepth","renderer","render","effect","oldRenderer","getThreeJSRenderer","aframeComponentVersion","noop","setSize","setPixelRatio","setClearColor","clear","enableScissorTest","setScissor","setViewport","getPixelRatio","getMaxAnisotropy","setFaceCulling","context","canvas","shadowMap","cursorEl","emit","eventName","event","targetEl","target","ray","point","cursordownObj","uuid","addState","removeState","other","meshInit","mesh","addNativeComponent","name","nativeComponentInit","getOrCreateObject3D","PlaceholderMesh","nativeComponentRemove","getObject3D","removeNativeComponent","nativeComponentUpdate","oldData","updateNativeComponent","object3DMap","callComponent","functionName","functionArguments","callNativeComponent","placeholderGeometry","BoxGeometry","placeholderMaterial","MeshBasicMaterial","color","visible","prototype","Object","create","constructor","res","text","fontSize","width","height","horizontalAlign","isTrigger","center","radius","size","direction","_forEachMesh","func","childObj","_initObj","convex","component","detail","count","capacity","src","startsWith","location","origin","currPath","pathname","endsWith","split","slice","join","pauseSound","playSound","seek","time","playHandler","removeEventListener","on","loop","volume","autoplay","oneshot","spatialBlend","pitch","minDistance","maxDistance","rolloff","dependencies","start","colorRef","sync","dataRef","child","refChangedLocked","firstValue","newData","isMine","setTimeout","set","snapshot","val","isConnected","sendEvent","sender","syncSys","clientId","Date","now","soundEventRef","soundStateRef","sound","off","registerSystem","author","app","instance","refUrl","log","utilities","connect","authorId","appId","instanceId","baseRefUrl","connection","sceneRef","clientsRef","sceneEl","masterClientId","clientIds","masterClientKey","keys","childSnapshot","joinedClientId","leftClientId","push","onDisconnect","once","shouldInitialize","ref","defineProperty","get","onTransform","componentName","value","onComponentChanged","sendPosition","sendRotation","sendScale","throttle","wait","options","timeout","args","result","previous","later","leading","apply","throttled","remaining","arguments","clearTimeout","trailing","cancel","positionRef","rotationRef","scaleRef","updateRate","stoppedAnimations","children","i","tagName","toLowerCase","stop","animation","mode","ownOn","shouldTakeOwnership","ownerId","isMasterClient","takeOwnership","error","link","setupReceive","entityRef","key","ownerRef","transaction","owner","newOwnerId","gained","lost","ownershipEvents","max","multiple","gain","lose","targets","actOnTargets","actOnTargetsIfStateMatches","act","forEach"],"mappings":"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","file":"aframe-altspace-component.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tif (typeof AFRAME === 'undefined') {\r\n\t  throw new Error('Component attempted to register before AFRAME was available.');\r\n\t}\r\n\t\r\n\t__webpack_require__(3);\r\n\t__webpack_require__(1);\r\n\t__webpack_require__(2);\r\n\t__webpack_require__(4);\r\n\t__webpack_require__(5);\r\n\t__webpack_require__(10);\r\n\t__webpack_require__(8);\r\n\t__webpack_require__(9);\r\n\t__webpack_require__(6);\r\n\t__webpack_require__(7);\r\n\t__webpack_require__(11);\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t(function(){\r\n\t\r\n\t\tfunction setColliderFlag(obj, state) {\r\n\t\t\tobj.userData.altspace = {collider: {enabled: state}};\r\n\t\t\tobj.traverse(function (obj) {\r\n\t\t\t\tif (obj instanceof THREE.Mesh) {\r\n\t\t\t\t\tobj.userData.altspace = {collider: {enabled: state}};\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\r\n\t\t/**\r\n\t\t* Enable or disable cursor collision on the object.\r\n\t\t* @mixin altspace-cursor-collider\r\n\t\t* @memberof altspace\r\n\t\t* @prop {boolean} enabled=true - The state of the cursor collider.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('altspace-cursor-collider', {\r\n\t\t\tschema: { enabled: { default: true } },\r\n\t\t\tinit: function () {\r\n\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\r\n\t\t\t\tthis.el.addEventListener('model-loaded', (function(){\r\n\t\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\r\n\t\t\t\t}).bind(this));\r\n\t\t\t},\r\n\t\t\tupdate: function () {\r\n\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t})();\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t* Enables tracked control support for A-Frame applications that use the built-in\r\n\t* `tracked-controls`, `vive-controls` or `hand-controls` components.\r\n\t* @mixin altspace-tracked-controls\r\n\t* @memberof altspace\r\n\t*/\r\n\tAFRAME.registerComponent('altspace-tracked-controls', {\r\n\t  init: function () {\r\n\t\tthis.gamepadIndex = null;\r\n\t\tthis.trackedControlsSystem = document.querySelector('a-scene').systems['tracked-controls'];\r\n\t\tthis.systemGamepads = 0;\r\n\t\taltspace.getGamepads();\r\n\t  },\r\n\t  tick: function () {\r\n\t\t  if (\r\n\t\t\tthis.trackedControlsSystem &&\r\n\t\t\tthis.systemGamepads !== this.trackedControlsSystem.controllers.length &&\r\n\t\t\twindow.altspace && altspace.getGamepads && altspace.getGamepads().length\r\n\t\t  ) {\r\n\t\t\tvar components = this.el.components;\r\n\t\t\tif (components['paint-controls']) {\r\n\t\t\t  this.gamepadIndex = components['paint-controls'].data.hand === 'left' ? 2 : 1;\r\n\t\t\t}\r\n\t\t\tif (this.gamepadIndex === null && components['hand-controls']) {\r\n\t\t\t  this.gamepadIndex = components['hand-controls'].data === 'left' ? 2 : 1;\r\n\t\t\t}\r\n\t\t\tif (this.gamepadIndex === null && components['vive-controls']) {\r\n\t\t\t  this.gamepadIndex = components['vive-controls'].data.hand === 'left' ? 2 : 1;\r\n\t\t\t}\r\n\t\t\tif (this.gamepadIndex === null && components['tracked-controls']) {\r\n\t\t\t  this.gamepadIndex = components['tracked-controls'].data.controller;\r\n\t\t\t}\r\n\t\t\tthis.el.setAttribute('tracked-controls', 'id', altspace.getGamepads()[this.gamepadIndex].id);\r\n\t\t\tthis.el.setAttribute('tracked-controls', 'controller', 0);\r\n\t\t\tthis.systemGamepads = this.trackedControlsSystem.controllers.length;\r\n\t\t  }\r\n\t  }\r\n\t});\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t* @namespace altspace\r\n\t*/\r\n\t\r\n\t/**\r\n\t* The altspace component makes A-Frame apps compatible with AltspaceVR.\r\n\t*\r\n\t* **Note**: If you use the `embedded` A-Frame component on your scene, you must include it *before* the `altspace` component, or your app will silently fail.\r\n\t* @mixin altspace\r\n\t* @memberof altspace\r\n\t* @property {boolean} usePixelScale=`false` - Allows you to use A-Frame units as CSS pixels.\r\n\t* This is the default behavior for three.js apps, but not for A-Frame apps.\r\n\t* @property {string} verticalAlign=`middle` - Puts the origin at the `bottom`, `middle` (default),\r\n\t* or `top` of the Altspace enclosure.\r\n\t* @property {boolean} enclosuresOnly=`true` - Prevents the scene from being created if\r\n\t* enclosure is flat.\r\n\t* @property {boolean} fullspace=`false` - Puts the app into fullspace mode.\r\n\t*\r\n\t* @example\r\n\t* <head>\r\n\t*   <title>My A-Frame Scene</title>\r\n\t*   <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\r\n\t*   <script src=\"https://cdn.rawgit.com/AltspaceVR/aframe-altspace-component/v1.3.2/dist/aframe-altspace-component.min.js\"></script>\r\n\t* </head>\r\n\t* <body>\r\n\t*   <a-scene altspace>\r\n\t*     <a-entity geometry=\"primitive: box\" material=\"color: #C03546\"></a-entity>\r\n\t*   </a-scene>\r\n\t* </body>\r\n\t*/\r\n\tAFRAME.registerComponent('altspace', {\r\n\t  version: '1.3.2',\r\n\t  schema: {\r\n\t\tusePixelScale: { type: 'boolean', default: 'false'},\r\n\t\tverticalAlign: { type: 'string',  default: 'middle'},\r\n\t\tenclosuresOnly:{ type: 'boolean', default: 'true'},\r\n\t\tfullspace:     { type: 'boolean', default: 'false'}\r\n\t  },\r\n\t\r\n\t  /*\r\n\t   * Called once when component is attached. Generally for initial setup.\r\n\t   */\r\n\t  init: function () {\r\n\t\tif (!(this.el.object3D instanceof THREE.Scene)) {\r\n\t\t  console.warn('aframe-altspace-component can only be attached to a-scene');\r\n\t\t  return;\r\n\t\t}\r\n\t\r\n\t\tif (window.altspace && window.altspace.inClient) {\r\n\t\t  this.el.setAttribute('vr-mode-ui', {enabled: false});\r\n\t\t  this.initRenderer();\r\n\t\t  this.initCursorEvents();\r\n\t\t  this.initCollisionEvents();\r\n\t\t} else {\r\n\t\t  console.warn('aframe-altspace-component only works inside of AltspaceVR');\r\n\t\t}\r\n\t\r\n\t  },\r\n\t\r\n\t  /*\r\n\t   * Called on every single tick or render loop of the scene.\r\n\t   */\r\n\t  tick: function (t, dt) {\r\n\t      if(this.el.object3D.updateAllBehaviors)\r\n\t        this.el.object3D.updateAllBehaviors();\r\n\t  },\r\n\t\r\n\t  /*\r\n\t   * Called when a component is removed (e.g., via removeAttribute).\r\n\t   * Generally undoes all modifications to the entity.\r\n\t   */\r\n\t  remove: function () { },\r\n\t\r\n\t  /*\r\n\t   * Called on each scene tick.\r\n\t   */\r\n\t  // tick: function (t) { },\r\n\t\r\n\t  /*\r\n\t   * Called when entity pauses.\r\n\t   * Use to stop or remove any dynamic or background behavior such as events.\r\n\t   */\r\n\t  pause: function () { },\r\n\t\r\n\t  /*\r\n\t   * Called when entity resumes.\r\n\t   * Use to continue or add any dynamic or background behavior such as events.\r\n\t   */\r\n\t  play: function () { },\r\n\t\r\n\t\r\n\t  /********** Helper Methods **********/\r\n\t\r\n\t  /*\r\n\t   * Swap in Altspace renderer when running in AltspaceVR.\r\n\t   */\r\n\t  initRenderer: function () {\r\n\t\r\n\t\tvar scene = this.el.object3D;\r\n\t\taltspace.getEnclosure().then(function(e)\r\n\t\t{\r\n\t\t\tif(this.data.fullspace){\r\n\t\t\t\te.requestFullspace();\r\n\t\t\t\te.addEventListener('fullspacechange', function(){\r\n\t\t\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\r\n\t\t\tif (!this.data.usePixelScale || this.data.fullspace){\r\n\t\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\r\n\t\t\t}\r\n\t\r\n\t\t  switch (this.data.verticalAlign) {\r\n\t\t\tcase 'bottom':\r\n\t\t\t  scene.position.y -= e.innerHeight / 2;\r\n\t\t\t  break;\r\n\t\t\tcase 'top':\r\n\t\t\t  scene.position.y += e.innerHeight / 2;\r\n\t\t\t  break;\r\n\t\t\tcase 'middle':\r\n\t\t\t  break;\r\n\t\t\tdefault:\r\n\t\t\t  console.warn('Unexpected value for verticalAlign: ', this.data.verticalAlign);\r\n\t\t  }\r\n\t\r\n\t\t  if(this.data.enclosuresOnly && e.innerDepth === 1){\r\n\t\t\tthis.el.renderer.render(new THREE.Scene());\r\n\t\t\tthis.el.renderer = this.el.effect = oldRenderer;\r\n\t\r\n\t\t  }\r\n\t\t}.bind(this));\r\n\t\r\n\t\tvar oldRenderer = this.el.renderer;\r\n\t\tvar renderer = this.el.renderer = this.el.effect = altspace.getThreeJSRenderer({\r\n\t\t  aframeComponentVersion: this.version\r\n\t\t});\r\n\t\tvar noop = function() {};\r\n\t\trenderer.setSize = noop;\r\n\t\trenderer.setPixelRatio = noop;\r\n\t\trenderer.setClearColor = noop;\r\n\t\trenderer.clear = noop;\r\n\t\trenderer.enableScissorTest = noop;\r\n\t\trenderer.setScissor = noop;\r\n\t\trenderer.setViewport = noop;\r\n\t\trenderer.getPixelRatio = noop;\r\n\t\trenderer.getMaxAnisotropy = noop;\r\n\t\trenderer.setFaceCulling = noop;\r\n\t\trenderer.context = {canvas: {}};\r\n\t\trenderer.shadowMap = {};\r\n\t\r\n\t  },\r\n\t\r\n\t  /*\r\n\t   * Emulate A-Frame cursor events when running in altspaceVR.\r\n\t   */\r\n\t  initCursorEvents: function() {\r\n\t\r\n\t\tvar scene = this.el.object3D;\r\n\t\tvar cursorEl = document.querySelector('a-cursor') || document.querySelector('a-entity[cursor]');\r\n\t\tif (cursorEl) {\r\n\t\t  // Hide A-Frame cursor mesh.\r\n\t\t  cursorEl.setAttribute('material', 'transparent', true);\r\n\t\t  cursorEl.setAttribute('material', 'opacity', 0.0);\r\n\t\t}\r\n\t\r\n\t\tvar emit = function (eventName, event) {\r\n\t\t\t// Fire events on intersected object and A-Frame cursor.\r\n\t\t\tvar targetEl = event.target.el;\r\n\t\t\tif (cursorEl) cursorEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\r\n\t\t\tif (targetEl) targetEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\r\n\t\t} ;\r\n\t\r\n\t\tvar cursordownObj = null;\r\n\t\tscene.addEventListener('cursordown', function(event) {\r\n\t\t  cursordownObj = event.target;\r\n\t\t  emit('mousedown', event);\r\n\t\t});\r\n\t\r\n\t\tscene.addEventListener('cursorup', function(event) {\r\n\t\t  emit('mouseup', event);\r\n\t\t  if (event.target.uuid === cursordownObj.uuid) {\r\n\t\t\temit('click', event);\r\n\t\t  }\r\n\t\t  cursordownObj = null;\r\n\t\t});\r\n\t\r\n\t\tscene.addEventListener('cursorenter', function(event) {\r\n\t\t  if (!event.target.el) { return; }\r\n\t\t  event.target.el.addState('hovered');\r\n\t\t  if (cursorEl) cursorEl.addState('hovering');\r\n\t\t  emit('mouseenter', event);\r\n\t\t});\r\n\t\r\n\t\tscene.addEventListener('cursorleave', function(event) {\r\n\t\t  if (!event.target.el) { return; }\r\n\t\t  event.target.el.removeState('hovered');\r\n\t\t  if (cursorEl) cursorEl.removeState('hovering');\r\n\t\t  emit('mouseleave', event);\r\n\t\t});\r\n\t\r\n\t  },\r\n\t\r\n\t  initCollisionEvents: function () {\r\n\t\r\n\t\tvar scene = this.el.object3D;\r\n\t\r\n\t\tvar emit = function (eventName, event) {\r\n\t\t\tvar targetEl = event.target.el;\r\n\t\t\tif (!targetEl) return;\r\n\t\r\n\t\t\t//remap target and other from object3Ds to aframe element\r\n\t\t\tevent.target = targetEl;\r\n\t\t\tif (event.other && event.other.el) {\r\n\t\t\t\tevent.other = event.other.el;\r\n\t\t\t}\r\n\t\t\ttargetEl.emit(eventName, event);\r\n\t\t};\r\n\t\r\n\t\tscene.addEventListener('collisionenter', function (event) {\r\n\t\t\temit('collisionenter', event);\r\n\t\t});\r\n\t\r\n\t\tscene.addEventListener('collisionexit', function (event) {\r\n\t\t\temit('collisionexit', event);\r\n\t\t});\r\n\t\r\n\t\tscene.addEventListener('triggerenter', function (event) {\r\n\t\t\temit('triggerenter', event);\r\n\t\t});\r\n\t\r\n\t\tscene.addEventListener('triggerexit', function (event) {\r\n\t\t\temit('triggerexit', event);\r\n\t\t});\r\n\t\r\n\t  }\r\n\t\r\n\t});\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\r\n\t/**\r\n\t* This set of components map to various objects and effects that are provided\r\n\t* natively by AltspaceVR. Your management of these objects may be limited to\r\n\t* some degree, but they will tend to be more performant than SDK equivalents,\r\n\t* or may provide some functionality not otherwise available to the SDK.\r\n\t* @namespace native\r\n\t*/\r\n\t(function () {\r\n\t\tif (!window.altspace || !altspace.inClient) {\r\n\t\t\tvar noop = function () {};\r\n\t\t\twindow.altspace = {\r\n\t\t\t\taddNativeComponent: noop,\r\n\t\t\t\tupdateNativeComponent: noop,\r\n\t\t\t\tremoveNativeComponent: noop\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tvar placeholderGeometry = new THREE.BoxGeometry(0.001, 0.001, 0.001);\r\n\t\tvar placeholderMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n\t\tplaceholderMaterial.visible = false;\r\n\t\tvar PlaceholderMesh = function () {\r\n\t\t\tTHREE.Mesh.call( this, placeholderGeometry, placeholderMaterial );\r\n\t\t};\r\n\t\tPlaceholderMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\t\tPlaceholderMesh.prototype.constructor = THREE.PlaceholderMesh;\r\n\t\r\n\t\tfunction meshInit(mesh) {\r\n\t\t\t//If you attach native components to an entity, it will not use a default collider\r\n\t\t\tmesh.userData.altspace = mesh.userData.altspace || {};\r\n\t\t\tmesh.userData.altspace.collider = mesh.userData.altspace.collider || {};\r\n\t\t\tmesh.userData.altspace.collider.enabled = false;\r\n\t\r\n\t\t\taltspace.addNativeComponent(mesh, this.name);\r\n\t\t}\r\n\t\r\n\t\tfunction nativeComponentInit() {\r\n\t\t\tvar mesh = this.el.getOrCreateObject3D('mesh', PlaceholderMesh);\r\n\t\r\n\t\t\tmeshInit.call(this, mesh);\r\n\t\r\n\t\t\t//to pass defaults\r\n\t\t\tthis.update(this.data);\r\n\t\t}\r\n\t\tfunction nativeComponentRemove() {\r\n\t\t\tvar mesh = this.el.getObject3D('mesh');\r\n\t\t\taltspace.removeNativeComponent(mesh, this.name);\r\n\t\t}\r\n\t\tfunction nativeComponentUpdate(oldData) {\r\n\t\t\taltspace.updateNativeComponent(this.el.object3DMap.mesh, this.name, this.data);\r\n\t\t}\r\n\t\r\n\t\tfunction callComponent(functionName, functionArguments) {\r\n\t\t\taltspace.callNativeComponent(this.el.object3DMap.mesh, this.name, functionName, functionArguments)\r\n\t\t}\r\n\t\r\n\t\t/**\r\n\t\t* Attach a given native object to this entity.\r\n\t\t* @mixin n-object\r\n\t\t* @memberof native\r\n\t\t* @prop {string} res - The identifier for the resource you want. This component\r\n\t\t* can accept all resources except for `interactables`.\r\n\t\t* @example <a-entity n-object='res:architecture/wall-4w-4h'></a-entity>\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-object', {\r\n\t\t\tschema: {\r\n\t\t\t\tres: {type: 'string'}\r\n\t\t\t},\r\n\t\t\tinit: nativeComponentInit,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tremove: nativeComponentRemove\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* Create an object that spawns additional copies of itself when grabbed by a user (the copies are not spawners themselves).\r\n\t\t* These copies will be physically interactive and automatically synchronized\r\n\t\t* between users.\r\n\t\t* @mixin n-spawner\r\n\t\t* @memberof native\r\n\t\t* @prop {string} res - The identifier for the resource you want. This component\r\n\t\t* can only accept resources of type `interactables`.\r\n\t\t* @example <a-entity n-spawner='res: interactables/basketball'></a-entity>\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-spawner', {\r\n\t\t\tschema: {\r\n\t\t\t\tres: {type: 'string'}\r\n\t\t\t},\r\n\t\t\tinit: nativeComponentInit,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tremove: nativeComponentRemove\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* Creates dynamic 2D text on the entity. The text will wrap automatically based on the width and height provided.\r\n\t\t* This text will be clearer than texture-based text and more performant than geometry-based test.\r\n\t\t* @mixin n-text\r\n\t\t* @memberof native\r\n\t\t* @prop {string} text - The text to be drawn.\r\n\t\t* @prop {number} fontSize=10 - The height of the letters. 10pt ~= 1m\r\n\t\t* @prop {number} width=10 - The width of the text area in meters. If the\r\n\t\t* text is wider than this value, the overflow will be wrapped to the next line.\r\n\t\t* @prop {number} height=1 - The height of the text area in meters. If the\r\n\t\t* text is taller than this value, the overflow will be cut off.\r\n\t\t* @prop {string} horizontalAlign=middle - The horizontal anchor point for\r\n\t\t* the text. Can be `left`, `middle`, or `right`.\r\n\t\t* @prop {string} verticalAlign=middle - The vertical anchor point for the\r\n\t\t* text. Can be `top`, `middle`, or `bottom`.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-text', {\r\n\t\t\tinit: nativeComponentInit,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tremove: nativeComponentRemove,\r\n\t\t\tschema: {\r\n\t\t\t\ttext: { default: '', type: 'string' },\r\n\t\t\t\t/*color: { default: 'white',\r\n\t\t\t\t\tparse: function(value) {\r\n\t\t\t\t\t\treturn parseFloat(value, 10);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstringify: function(value) {\r\n\t\t\t\t\t\treturn value.toString();\r\n\t\t\t\t\t}},*/\r\n\t\t\t\tfontSize: { default: '10', type: 'int' },//roughly a meter tall\r\n\t\t\t\twidth: { default: '10', type: 'number' },//in meters\r\n\t\t\t\theight: { default: '1', type: 'number' },//in meters\r\n\t\t\t\thorizontalAlign: { default: 'middle'},\r\n\t\t\t\tverticalAlign: { default: 'middle'}\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\t//object: collides against: objects / enviroment / cursor\r\n\t\t//environment: can be teleported onto, and collides against: objects / environment / cursor\r\n\t\t//hologram: collides against: cursor / holograms\r\n\t\r\n\t\t/**\r\n\t\t* Abstract base class for {@link n.n-sphere-collider}, {@link n.n-box-collider},\r\n\t\t* {@link n.n-capsule-collider}, and {@link n.n-mesh-collider}. You cannot use\r\n\t\t* this class directly, but instead you should add one of those components\r\n\t\t* to your objects.\r\n\t\t* @name n-collider\r\n\t\t* @mixin n-collider\r\n\t\t* @memberof native\r\n\t\t* @prop {vec3} center=0,0,0 - The offset of the collider in local space.\r\n\t\t* @prop {string} type=hologram - The type of collider, one of: `object` | `environment` | `hologram`.\r\n\t\t* Object colliders collide with other objects, the environment, and the cursor.\r\n\t\t* Environment colliders collide with everything objects do, but you can also\r\n\t\t* teleport onto them. Hologram colliders only collide with other holograms and\r\n\t\t* the cursor.\r\n\t\t*/\r\n\t\r\n\t\t/**\r\n\t\t* Create a spherical collider on this entity.\r\n\t\t* @mixin n-sphere-collider\r\n\t\t* @memberof native\r\n\t\t* @extends native.n-collider\r\n\t\t* @prop {number} radius=1 - The size of the collider in meters.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-sphere-collider', {\r\n\t\t\tinit:nativeComponentInit,\r\n\t\t\tremove: nativeComponentRemove,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tschema: {\r\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\t\tcenter: { type: 'vec3' },\r\n\t\t\t\tradius: { default: '0', type: 'number' },\r\n\t\t\t\ttype: {default: 'object'}\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\r\n\t\t/**\r\n\t\t* Create a box-shaped collider on this entity.\r\n\t\t* @mixin n-box-collider\r\n\t\t* @memberof native\r\n\t\t* @extends native.n-collider\r\n\t\t* @prop {vec3} size=1,1,1 - The dimensions of the collider.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-box-collider', {\r\n\t\t\tinit:nativeComponentInit,\r\n\t\t\tremove: nativeComponentRemove,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tschema: {\r\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\t\tcenter: { type: 'vec3' },\r\n\t\t\t\tsize: { type: 'vec3' },\r\n\t\t\t\ttype: {default: 'object'}\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* Create a capsule-shaped collider on this entity. Capsules\r\n\t\t* are a union of a cylinder and two spheres on top and bottom.\r\n\t\t* @mixin n-capsule-collider\r\n\t\t* @memberof native\r\n\t\t* @extends native.n-collider\r\n\t\t* @prop {number} radius=1 - The radius of the capsule in meters.\r\n\t\t* @prop {number} height=1 - The height of the shaft of the capsule in meters.\r\n\t\t* @prop {string} direction=y - The axis with which the capsule is aligned.\r\n\t\t* One of `x`, `y`, or `z`.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-capsule-collider', {\r\n\t\t\tinit:nativeComponentInit,\r\n\t\t\tremove: nativeComponentRemove,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tschema: {\r\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\t\tcenter: { type: 'vec3' },\r\n\t\t\t\tradius: { default: '0', type: 'number' },\r\n\t\t\t\theight: { default: '0', type: 'number' },\r\n\t\t\t\tdirection: { default: 'y' },\r\n\t\t\t\ttype: {default: 'object'}\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* Enable collision for the entire attached mesh. This is expensive to evaluate, so should only be used on\r\n\t\t* low-poly meshes.\r\n\t\t* @mixin n-mesh-collider\r\n\t\t* @memberof native\r\n\t\t* @extends native.n-collider\r\n\t\t* @example <a-box n-mesh-collider></a-box>\r\n\t\t* @prop {bool} convex=true - Whether the collider should be convex or concave. Set this to false if you have holes\r\n\t\t* in your mesh. Convex colliders are limited to 255 triangles. Note: concave colliders can be significantly more\r\n\t\t* expensive comparet to conves colliders.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-mesh-collider', {\r\n\t\t\t_forEachMesh: function (func) {\r\n\t\t\t\tvar obj = this.el.object3DMap.mesh;\r\n\t\t\t\tif (!obj) { return; }\r\n\t\t\t\tif (obj instanceof THREE.Mesh) {\r\n\t\t\t\t\tfunc(obj);\r\n\t\t\t\t}\r\n\t\t\t\tobj.traverse(function (childObj) {\r\n\t\t\t\t\tif (childObj instanceof THREE.Mesh) {\r\n\t\t\t\t\t\tfunc(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\t_initObj: function () {\r\n\t\t\t\tthis._forEachMesh(function (mesh) {\r\n\t\t\t\t\tmeshInit.call(this, mesh);\r\n\t\r\n\t\t\t\t\t//to pass defaults\r\n\t\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\tinit: function () {\r\n\t\t\t\t// Allow a-frame to create a PlaceholderMesh if there isn't already one, so that the native collider is\r\n\t\t\t\t// registered.\r\n\t\t\t\tthis.el.getOrCreateObject3D('mesh', PlaceholderMesh);\r\n\t\r\n\t\t\t\t// Initialize the existing mesh\r\n\t\t\t\tthis._initObj();\r\n\t\r\n\t\t\t\tthis.el.addEventListener('model-loaded', function () {\r\n\t\t\t\t\t// Re-initialize the collider if a new model is loaded\r\n\t\t\t\t\tthis._initObj();\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\tremove: function () {\r\n\t\t\t\tthis._forEachMesh(function (mesh) {\r\n\t\t\t\t\taltspace.removeNativeComponent(mesh, this.name);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\tupdate: function (oldData) {\r\n\t\t\t\tthis._forEachMesh(function (mesh) {\r\n\t\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\tschema: {\r\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\t\tconvex: { default: true, type: 'boolean' },\r\n\t\t\t\ttype: {default: 'object'}\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* Make the object's +Z always face the viewer. Currently will only directly apply to main mesh or native component on the attached entity, not any children or submeshes.\r\n\t\t* @mixin n-billboard\r\n\t\t* @memberof native\r\n\t\t* @example <a-plane n-billboard></a-plane>\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-billboard', {\r\n\t\t\tinit:nativeComponentInit,\r\n\t\t\tremove: nativeComponentRemove,\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* A container keeps a running tally of how many objects are within\r\n\t\t* its bounds, and adds and removes the states `container-full` and\r\n\t\t* `container-empty` based on the current count of objects. Can fire three\r\n\t\t* special events: `container-full`, `container-empty`, and `container-count-changed`.\r\n\t\t* @mixin n-container\r\n\t\t* @memberof native\r\n\t\t* @prop {number} capacity=4 - The value at which the container will fire the\r\n\t\t* `container-full` event.\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-container', {\r\n\t\t\tinit: function(){\r\n\t\t\t\tnativeComponentInit.call(this);\r\n\t\r\n\t\t\t\tvar el = this.el;\r\n\t\t\t\tvar component = this;\r\n\t\r\n\t\t\t\tel.addEventListener('stateadded', function(event){\r\n\t\t\t\t\tif(event.detail.state === 'container-full'){\r\n\t\t\t\t\t\tel.emit('container-full');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(event.detail.state === 'container-empty'){\r\n\t\t\t\t\t\tel.emit('container-empty');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tel.addEventListener('container-count-changed', function(event){\r\n\t\t\t\t\tcomponent.count = event.detail.count;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tremove: nativeComponentRemove,\r\n\t\t\tupdate: nativeComponentUpdate,\r\n\t\t\tschema: {\r\n\t\t\t\tcapacity: { default: 4, type: 'number' },\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\t/**\r\n\t\t* Play the sound given by the `src` or `res` property from the location\r\n\t\t* of the entity.\r\n\t\t* @mixin n-sound\r\n\t\t* @memberof native\r\n\t\t* @prop {string} res - The resource identifier for a built-in sound clip.\r\n\t\t* @prop {string} src - A URL to an external sound clip. The sound can be in WAV, OGG or MP3 format. However. only\r\n\t\t* WAV is supported on all platforms. MP3 is supported on Gear VR and OGG is supported on desktop.\r\n\t\t* @prop {string} on - The name of the event that will play this sound clip.\r\n\t\t* @prop {boolean} loop=false - Tells the clip to loop back to the beginning of the clip\r\n\t\t* once it's finished.\r\n\t\t* @prop {boolean} autoplay=false - Tells the clip to start automatically when\r\n\t\t* the scene loads, instead of waiting for `playSound()`.\r\n\t\t* @prop {boolean} oneshot=false - Tells the clip to clean itself up when it\r\n\t\t* finishes playing. Allows for overlapping instances of the sound.\r\n\t\t* @prop {number} volume=1 - The volume of the clip, from [0,1].\r\n\t\t* @prop {number} spatialBlend=1 - How spatialized a sound is, from [0,1].\r\n\t\t* A value of 1 will be fully localized, and the sound will pan left and\r\n\t\t* right as you turn your head. A value of 0 makes it non-spatialized, and\r\n\t\t* it will always be heard in both ears.\r\n\t\t* @prop {number} pitch=1 - The speed multiplier for the sound. 0.5 is one\r\n\t\t* octave down, and 2 is one octave up.\r\n\t\t* @prop {number} minDistance=1 - Inside this distance in meters,\r\n\t\t* the sound volume is at full volume.\r\n\t\t* @prop {number} maxDistance=12 - If rolloff is 'logarithmic', the sound will stop attenuating at this distance.\r\n\t\t* If rolloff is 'linear' or 'cosine', the sound will be silent at this distance.\r\n\t\t* @prop {string} rolloff='logarithmic' - Set this to 'linear' or 'cosine' if you want to cut sounds off at a\r\n\t\t* maxDistance.\r\n\t\t*/\r\n\t\t/**\r\n\t\t* Fired when a sound has loaded and is ready to be played\r\n\t\t* @event native.n-sound#n-sound-loaded\r\n\t\t*/\r\n\t\tAFRAME.registerComponent('n-sound', {\r\n\t\t\tinit: function () {\r\n\t\t\t\tvar src = this.data.src;\r\n\t\t\t\tif (src && !src.startsWith('http')) {\r\n\t\t\t\t\tif (src.startsWith('/')) {\r\n\t\t\t\t\t\tthis.data.src = location.origin + src;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvar currPath = location.pathname;\r\n\t\t\t\t\t\tif (!currPath.endsWith('/')) {\r\n\t\t\t\t\t\t\tcurrPath = location.pathname.split('/').slice(0, -1).join('/') + '/';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.data.src = location.origin + currPath + src;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnativeComponentInit.call(this);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t* Stop the playing sound, and preserve position in clip.\r\n\t\t\t* @method native.n-sound#pauseSound\r\n\t\t\t*/\r\n\t\t\tpauseSound: function () {\r\n\t\t\t\tcallComponent.call(this, 'pause');\r\n\t\t\t\tthis.el.emit('sound-paused');\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t* Start the sound playing.\r\n\t\t\t* @method native.n-sound#playSound\r\n\t\t\t*/\r\n\t\t\tplaySound: function () {\r\n\t\t\t\tcallComponent.call(this, 'play');\r\n\t\t\t\tthis.el.emit('sound-played');\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t* Jump to a position in the clip.\r\n\t\t\t* @method native.n-sound#seek\r\n\t\t\t* @param {number} time - The time in milliseconds to jump to.\r\n\t\t\t*/\r\n\t\t\tseek: function (time) {\r\n\t\t\t\tcallComponent.call(this, 'seek', {time: time});\r\n\t\t\t},\r\n\t\t\tremove: function () {\r\n\t\t\t\tnativeComponentRemove.call(this);\r\n\t\t\t\tif (this.playHandler) {\r\n\t\t\t\t  this.el.removeEventListener(oldData.on, this.playHandler);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tupdate: function (oldData) {\r\n\t\t\t\tnativeComponentUpdate.call(this, oldData);\r\n\t\t\t\tif (this.playHandler) {\r\n\t\t\t\t  this.el.removeEventListener(oldData.on, this.playHandler);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.data.on) {\r\n\t\t\t\t  this.playHandler = this.playSound.bind(this);\r\n\t\t\t\t  this.el.addEventListener(this.data.on, this.playHandler);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tschema: {\r\n\t\t\t\ton: { type: 'string' },\r\n\t\t\t\tres: { type: 'string' },\r\n\t\t\t\tsrc: { type: 'string' },\r\n\t\t\t\tloop: { type: 'boolean' },\r\n\t\t\t\tvolume: { type: 'number', default: 1 },\r\n\t\t\t\tautoplay: { type: 'boolean' },\r\n\t\t\t\toneshot: { type: 'boolean' },\r\n\t\t\t\tspatialBlend: { type: 'float', default: 1 },\r\n\t\t\t\tpitch: { type: 'float', default: 1 },\r\n\t\t\t\tminDistance: { type: 'float', default: 1 },\r\n\t\t\t\tmaxDistance: { type: 'float', default: 12 },\r\n\t\t\t\trolloff: { type: 'string', default: 'logarithmic' },\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t})();\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t// this file is just for good measure. didn't want native-components getting too cluttered.\r\n\t\r\n\t/**\r\n\t* This namespace describes strings that are valid inputs to the various native\r\n\t* components. Some components can only take certain types of resources, i.e.\r\n\t* {@link n.n-spawner} can only accept `interactables`.\r\n\t* @namespace resources\r\n\t* @example <a-entity n-object='res: architecture/ceiling-2w-2l'></a-entity>\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Generic modular building pieces. All pieces are aligned to one corner, such that\r\n\t* the piece extends out toward -X and +Z.\r\n\t* @name architecture\r\n\t* @enum architecture\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop architecture/ceiling-2w-2l\r\n\t* @prop architecture/ceiling-4w-4l\r\n\t* @prop architecture/ceiling-4w-4l\r\n\t* @prop architecture/ceiling-skylight-4w-4l\r\n\t* @prop architecture/ceiling-skylight-corner-2w-2l\r\n\t* @prop architecture/ceiling-skylight-edge-2w\r\n\t* @prop architecture/ceiling-skylight-edge-4w\r\n\t* @prop architecture/ceiling-skylight-filler-4w-4l-2\r\n\t* @prop architecture/ceiling-skylight-filler-4w-4l\r\n\t* @prop architecture/ceiling-slice-concave-2r\r\n\t* @prop architecture/ceiling-slice-concave-4r\r\n\t* @prop architecture/ceiling-slice-convex-2r\r\n\t* @prop architecture/ceiling-slice-convex-4r\r\n\t* @prop architecture/door-4w-4h\r\n\t* @prop architecture/floor-2w-2l\r\n\t* @prop architecture/floor-2w-4l\r\n\t* @prop architecture/floor-4w-2l\r\n\t* @prop architecture/floor-4w-4l\r\n\t* @prop architecture/floor-slice-concave-2r\r\n\t* @prop architecture/floor-slice-concave-4r\r\n\t* @prop architecture/floor-slice-convex-2r\r\n\t* @prop architecture/floor-slice-convex-4r\r\n\t* @prop architecture/railing-2l\r\n\t* @prop architecture/railing-4l\r\n\t* @prop architecture/railing-curve-concave-2r\r\n\t* @prop architecture/wall-2w-4h\r\n\t* @prop architecture/wall-4w-4h\r\n\t* @prop architecture/wall-base-2w\r\n\t* @prop architecture/wall-base-4w\r\n\t* @prop architecture/wall-base-curve-concave-2r\r\n\t* @prop architecture/wall-base-curve-concave-4r\r\n\t* @prop architecture/wall-base-curve-convex-2r\r\n\t* @prop architecture/wall-base-curve-convex-4r\r\n\t* @prop architecture/wall-bulkhead-2w\r\n\t* @prop architecture/wall-bulkhead-4w\r\n\t* @prop architecture/wall-bulkhead-curve-concave-2r\r\n\t* @prop architecture/wall-bulkhead-curve-concave-4r\r\n\t* @prop architecture/wall-bulkhead-curve-convex-2r\r\n\t* @prop architecture/wall-bulkhead-curve-convex-4r\r\n\t* @prop architecture/wall-curve-concave-2r-4h\r\n\t* @prop architecture/wall-curve-concave-4r-4h\r\n\t* @prop architecture/wall-curve-convex-2r-4h\r\n\t* @prop architecture/wall-curve-convex-4r-4h\r\n\t* @prop architecture/wall-curve-window-concave-4r-4h\r\n\t* @prop architecture/wall-curve-window-concave-filler-4r-4h\r\n\t* @prop architecture/wall-curve-window-gap-concave-4r-4h\r\n\t* @prop architecture/wall-curve-window-gap-end-l-concave-4r-4h\r\n\t* @prop architecture/wall-curve-window-gap-end-r-concave-4r-4h\r\n\t* @prop architecture/wall-filler-corner-inner-4h\r\n\t* @prop architecture/wall-filler-corner-outer-4h\r\n\t* @prop architecture/wall-window-4w-4h\r\n\t* @prop architecture/wall-window-filler-2\r\n\t* @prop architecture/wall-window-gap-2w-4h\r\n\t* @prop architecture/wall-window-gap-4w-4h\r\n\t* @prop architecture/wall-window-gap-end-l-2w-4h\r\n\t* @prop architecture/wall-window-gap-end-l-4w-4h\r\n\t* @prop architecture/wall-window-gap-end-r-2w-4h\r\n\t* @prop architecture/wall-window-gap-end-r-4w-4h\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Particle systems and other native effects\r\n\t* @name effects\r\n\t* @enum effects\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop effects/explosion - A particle system with a central flash, then debris flying outward.\r\n\t* This is a non-looping effect.\r\n\t* @prop effects/fire - An animated fire particle, suitable for a torch.\r\n\t* @prop effects/fire-trail - Fire that trails the entity through space as it moves. Only is visible while an object is in motion\r\n\t* @prop effects/fireworks - A compound particle system that shoots up from the entity,\r\n\t* explodes into colored sparks, then transitions to gold streamers.\r\n\t* @prop effects/smoke - Billowing smoke particle system.\r\n\t* @prop effects/sparkler - Emits sparks in all directions\r\n\t* @prop effects/steam - Small white steam rising upwards\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Objects that can be picked up, thrown, and otherwise interacted with.\r\n\t* @name interactables\r\n\t* @enum interactables\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop interactables/basketball\r\n\t* @prop interactables/bowlingball\r\n\t* @prop interactables/bowling-pin\r\n\t* @prop interactables/box\r\n\t* @prop interactables/coin\r\n\t* @prop interactables/gem\r\n\t* @prop interactables/ring\r\n\t* @prop interactables/soccerball\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Static models that you can place in your scene.\r\n\t* @name objects\r\n\t* @enum objects\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop objects/basketball-hoop\r\n\t* @prop objects/coin\r\n\t* @prop objects/cup\r\n\t* @prop objects/gem\r\n\t* @prop objects/hoop\r\n\t* @prop objects/ring\r\n\t* @prop objects/target-archery\r\n\t*/\r\n\t\r\n\t/**\r\n\t* A selection of pipes/chutes/etc.\r\n\t* @name pipes\r\n\t* @enum pipes\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop pipes/pipe-full-cap-1d\r\n\t* @prop pipes/pipe-full-cross-1d\r\n\t* @prop pipes/pipe-full-elbow-1d\r\n\t* @prop pipes/pipe-full-fork-1d\r\n\t* @prop pipes/pipe-full-straight-1d-1l\r\n\t* @prop pipes/pipe-full-straight-1d-2l\r\n\t* @prop pipes/pipe-full-straight-1d-4l\r\n\t* @prop pipes/pipe-full-tee-1d\r\n\t* @prop pipes/pipe-half-cap-1d\r\n\t* @prop pipes/pipe-half-cross-1d\r\n\t* @prop pipes/pipe-half-elbow-1d\r\n\t* @prop pipes/pipe-half-fork-1d\r\n\t* @prop pipes/pipe-half-straight-1d-1l\r\n\t* @prop pipes/pipe-half-straight-1d-2l\r\n\t* @prop pipes/pipe-half-straight-1d-4l\r\n\t* @prop pipes/pipe-half-tee-1d\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Common UI sounds can be used for a consistent UI experience.\r\n\t* @name sounds-ui\r\n\t* @enum sounds-ui\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop ui/select\r\n\t* @prop ui/toggle\r\n\t* @prop ui/notify\r\n\t* @prop ui/error\r\n\t* @prop ui/complete\r\n\t* @prop ui/succeed\r\n\t* @prop ui/over\r\n\t* @prop ui/join\r\n\t* @prop ui/click\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Foley sounds are real sounds designed for tangible, touchable objects as they are heard in the real world.\r\n\t* @name sounds-foley\r\n\t* @enum sounds-foley\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop foley/metal-scrape\r\n\t* @prop foley/metal-clack\r\n\t* @prop foley/metal-rattle\r\n\t* @prop foley/coin-jingle\r\n\t* @prop foley/paper-shuffle\r\n\t* @prop foley/explode\r\n\t*/\r\n\t\r\n\t/**\r\n\t* Effect sounds for a variety of use cases.\r\n\t* @name sounds-effects\r\n\t* @enum sounds-effects\r\n\t* @memberof resources\r\n\t*\r\n\t* @prop effects/fanfare-succeed - The \"success!\" sound from Holograms Against Humanity.\r\n\t* @prop effects/fanfare-start - The \"Game has started!\" sound from HaH.\r\n\t* @prop effects/fanfare-fail\r\n\t* @prop effects/timer-10s - a 10 second timer that triggers a bell at exactly 10 seconds.\r\n\t* The bell lasts for 2 seconds. This allows for timer length changes.\r\n\t* @prop effects/gain-coin\r\n\t*/\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t* Sync the color property of the object between clients.\r\n\t* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\r\n\t* {@link sync.sync} component on the target entity.\r\n\t* @mixin sync-color\r\n\t* @memberof sync\r\n\t*/\r\n\tAFRAME.registerComponent('sync-color',\r\n\t{\r\n\t\tdependencies: ['sync'],\r\n\t\tschema: {\r\n\t\t},\r\n\t\tinit: function () {\r\n\t\t\tvar component = this;\r\n\t\t\tvar sync = component.el.components.sync;\r\n\t\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\r\n\t\r\n\t\t\tfunction start(){\r\n\t\t\t\tvar colorRef = sync.dataRef.child('material/color');\r\n\t\r\n\t\t\t\tvar refChangedLocked = false;\r\n\t\r\n\t\t\t\tvar firstValue = true;\r\n\t\r\n\t\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\r\n\t\t\t\t\tvar name = event.detail.name;\r\n\t\t\t\t\tvar oldData = event.detail.oldData;\r\n\t\t\t\t\tvar newData = event.detail.newData;\r\n\t\r\n\t\t\t\t\tif (name !== 'material') return;\r\n\t\t\t\t\tif (refChangedLocked) return;\r\n\t\r\n\t\t\t\t\tif (oldData.color !== newData.color) {\r\n\t\t\t\t\t\tif(sync.isMine){\r\n\t\t\t\t\t\t\tsetTimeout(function() {//For some reason A-Frame has a misconfigured material reference if we do this too early\r\n\t\t\t\t\t\t\t\tcolorRef.set(newData.color);\r\n\t\t\t\t\t\t\t}, 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tcolorRef.on('value', function (snapshot) {\r\n\t\t\t\t\tif (sync.isMine && !firstValue) return;\r\n\t\t\t\t\tvar color = snapshot.val();\r\n\t\r\n\t\t\t\t\trefChangedLocked = true;\r\n\t\t\t\t\tcomponent.el.setAttribute('material', 'color', color);\r\n\t\t\t\t\trefChangedLocked = false;\r\n\t\r\n\t\t\t\t\tfirstValue = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t* Synchronize the playback state of an {@link n.n-sound} component between clients.\r\n\t* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\r\n\t* {@link sync.sync} component on the target entity.\r\n\t* @mixin sync-n-sound\r\n\t* @memberof sync\r\n\t*/\r\n\tAFRAME.registerComponent('sync-n-sound',\r\n\t{\r\n\t\tdependencies: ['sync'],\r\n\t\tschema: { },\r\n\t\tinit: function () {\r\n\t\t\tvar component = this;\r\n\t\t\tvar sync = component.el.components.sync;\r\n\t\t\tvar scene = document.querySelector('a-scene');\r\n\t\t\tvar syncSys = scene.systems['sync-system'];\r\n\t\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\r\n\t\r\n\t\t\tfunction start(){\r\n\t\t\t\tcomponent.soundStateRef = sync.dataRef.child('sound/state');\r\n\t\t\t\tcomponent.soundEventRef = sync.dataRef.child('sound/event');\r\n\t\r\n\t\t\t\tfunction sendEvent(event) {\r\n\t\t\t\t\tif (!sync.isMine) return;\r\n\t\t\t\t\tvar event = {\r\n\t\t\t\t\t\ttype: event.type,\r\n\t\t\t\t\t\tsender: syncSys.clientId,\r\n\t\t\t\t\t\tel: component.el.id,\r\n\t\t\t\t\t\ttime: Date.now()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcomponent.soundEventRef.set(event);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcomponent.el.addEventListener('sound-played', sendEvent);\r\n\t\t\t\tcomponent.el.addEventListener('sound-paused', sendEvent);\r\n\t\r\n\t\t\t\tcomponent.soundEventRef.on('value', function (snapshot) {\r\n\t\t\t\t\tif (sync.isMine) return;\r\n\t\t\t\t\tvar event = snapshot.val();\r\n\t\t\t\t\tif (!event) return;\r\n\t\t\t\t\tif (event.el === component.el.id) {\r\n\t\t\t\t\t\tvar sound = component.el.components['n-sound'];\r\n\t\t\t\t\t\tif (event.type === 'sound-played') {\r\n\t\t\t\t\t\t\tsound.playSound();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tsound.pauseSound();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\r\n\t\t\t\t\tif (!sync.isMine) return;\r\n\t\t\t\t\tvar name = event.detail.name;\r\n\t\t\t\t\tif (name !== 'n-sound') return;\r\n\t\t\t\t\tcomponent.soundStateRef.set(event.detail.newData);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tcomponent.soundStateRef.on('value', function (snapshot) {\r\n\t\t\t\t\tif (sync.isMine) return;\r\n\t\t\t\t\tvar state = snapshot.val();\r\n\t\t\t\t\tif (!state) return;\r\n\t\t\t\t\tcomponent.el.setAttribute('n-sound', state);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\tremove: function () {\r\n\t\t\tthis.soundStateRef.off('value');\r\n\t\t\tthis.soundEventRef.off('value');\r\n\t\t}\r\n\t});\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t* Connect to a remote Firebase server, and facilitate synchronization. These\r\n\t* options correspond exactly with the configuration options for\r\n\t* [altspace.utilities.sync.connect]{@link http://altspacevr.github.io/AltspaceSDK/doc/module-altspace_utilities_sync.html#.connect}.\r\n\t* This component must be present on `a-scene` for any other sync components to work.\r\n\t* @memberof sync\r\n\t* @mixin sync-system\r\n\t* @prop {string} author - A unique identifier for you or your organization.\r\n\t* @prop {string} app - The name of the app.\r\n\t* @prop {string} refUrl - Override the base reference. Set this to use your own Firebase.\r\n\t* @prop {string} instance - Override the instance ID. Can also be overridden with\r\n\t* a URL parameter.\r\n\t*/\r\n\tAFRAME.registerSystem('sync-system',\r\n\t{\r\n\t\tschema: {\r\n\t\t\tauthor: { type: 'string', default: null },\r\n\t\t\tapp: { type: 'string', default: null },\r\n\t\t\tinstance: { type: 'string', default: null },\r\n\t\t\trefUrl: { type: 'string', default: null }\r\n\t\t},\r\n\t\tinit: function() {\r\n\t\t\tvar component = this;\r\n\t\r\n\t\t\tif(!this.data || !this.data.app){\r\n\t\t\t\tconsole.warn('The sync-system must be present on the scene and configured with required data.');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tcomponent.isConnected = false;\r\n\t\t\tconsole.log(this.data);\r\n\t\t\taltspace.utilities.sync.connect({\r\n\t\t\t\tauthorId: this.data.author,\r\n\t\t\t\tappId: this.data.app,\r\n\t\t\t\tinstanceId: this.data.instance,\r\n\t\t\t\tbaseRefUrl: this.data.refUrl\r\n\t\t\t}).then(function(connection) {\r\n\t\t\t\tthis.connection = connection;\r\n\t\r\n\t\t\t\tthis.sceneRef = this.connection.instance.child('scene');\r\n\t\t\t\tthis.clientsRef = this.connection.instance.child('clients');\r\n\t\r\n\t\t\t\t// temporary way of having unique identifiers for each client\r\n\t\t\t\tthis.clientId = this.sceneEl.object3D.uuid;\r\n\t\t\t\tvar masterClientId;\r\n\t\t\t\tthis.clientsRef.on(\"value\", function (snapshot) {\r\n\t\t\t\t\tvar clientIds = snapshot.val();\r\n\t\r\n\t\t\t\t\tvar masterClientKey = Object.keys(clientIds)[0];\r\n\t\t\t\t\tmasterClientId = clientIds[masterClientKey];\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tthis.clientsRef.on('child_added', function(childSnapshot) {\r\n\t\t\t\t\tvar joinedClientId = childSnapshot.val();\r\n\t\t\t\t\t//let the master client flag get set first\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\tcomponent.sceneEl.emit('clientjoined', {id: joinedClientId}, false);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tthis.clientsRef.on('child_removed', function(childSnapshot) {\r\n\t\t\t\t\tvar leftClientId = childSnapshot.val();\r\n\t\t\t\t\t//let the master client flag get set first\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\tcomponent.sceneEl.emit('clientleft', {id: leftClientId}, false);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\t// add our client ID to the list of connected clients,\r\n\t\t\t\t// but have it be automatically removed by firebase if we disconnect for any reason\r\n\t\t\t\tthis.clientsRef.push(this.clientId).onDisconnect().remove();\r\n\t\r\n\t\r\n\t\t\t\tthis.connection.instance.child('initialized').once('value', function (snapshot) {\r\n\t\t\t\t\tvar shouldInitialize = !snapshot.val();\r\n\t\t\t\t\tsnapshot.ref().set(true);\r\n\t\r\n\t\t\t\t\tcomponent.sceneEl.emit('connected', { shouldInitialize: shouldInitialize }, false);\r\n\t\t\t\t\tcomponent.isConnected = true;\r\n\t\t\t\t}.bind(this));\r\n\t\r\n\t\r\n\t\t\t\tObject.defineProperty(this, 'isMasterClient', {\r\n\t\t\t\t\tget: function () { return masterClientId === this.clientId; }.bind(this)\r\n\t\t\t\t});\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t});\r\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t//TODO: We need to figure out a way to recieve our first update without caring about ownership.\r\n\t// firstValue is probably not the right way to go, probably something about having sent yet. Need to change for both\r\n\t\r\n\t/**\r\n\t* Synchronize the position, rotation, and scale of this object with all clients.\r\n\t* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\r\n\t* {@link sync.sync} component on the target entity.\r\n\t* @mixin sync-transform\r\n\t* @memberof sync\r\n\t*/\r\n\tAFRAME.registerComponent('sync-transform',\r\n\t{\r\n\t\tdependencies: ['sync'],\r\n\t\tschema: {\r\n\t\t},\r\n\t\tinit: function () {\r\n\t\t\tvar component = this;\r\n\t\t\tvar sync = component.el.components.sync;\r\n\t\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\r\n\t\r\n\t\t\tfunction start(){\r\n\t\r\n\t\t\t\tvar positionRef = sync.dataRef.child('position');\r\n\t\t\t\tvar rotationRef = sync.dataRef.child('rotation');\r\n\t\t\t\tvar scaleRef = sync.dataRef.child('scale');\r\n\t\r\n\t\t\t\tcomponent.updateRate = 100;\r\n\t\r\n\t\t\t\tvar stoppedAnimations = [];\r\n\t\t\t\t//pause all animations on ownership loss\r\n\t\t\t\tcomponent.el.addEventListener('ownershiplost', function() {\r\n\t\t\t\t\tvar children = component.el.children;\r\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t\t\tvar tagName = children[i].tagName.toLowerCase();\r\n\t\t\t\t\t\tif (tagName === \"a-animation\") {\r\n\t\t\t\t\t\t\tstoppedAnimations.push(children[i]);\r\n\t\t\t\t\t\t\tchildren[i].stop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcomponent.el.addEventListener('ownershipgained', function () {\r\n\t\t\t\t\tfor (var i = 0; i < stoppedAnimations.length; i++) {\r\n\t\t\t\t\t\tvar animation = stoppedAnimations[i];\r\n\t\t\t\t\t\tanimation.start();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstoppedAnimations = [];\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tfunction onTransform(snapshot, componentName) {\r\n\t\t\t\t\tif (sync.isMine) return;\r\n\t\r\n\t\t\t\t\tvar value = snapshot.val();\r\n\t\t\t\t\tif (!value) return;\r\n\t\r\n\t\t\t\t\tcomponent.el.setAttribute(componentName, value);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpositionRef.on('value', function (snapshot) {\r\n\t\t\t\t\tonTransform(snapshot, 'position');\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\trotationRef.on('value', function (snapshot) {\r\n\t\t\t\t\tonTransform(snapshot, 'rotation');\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tscaleRef.on('value', function (snapshot) {\r\n\t\t\t\t\tonTransform(snapshot, 'scale');\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tvar sendPosition = throttle(function(value){\r\n\t\t\t\t\tpositionRef.set(value);\r\n\t\t\t\t}, component.updateRate);\r\n\t\r\n\t\t\t\tvar sendRotation = throttle(function(value){\r\n\t\t\t\t\trotationRef.set(value);\r\n\t\t\t\t}, component.updateRate);\r\n\t\r\n\t\t\t\tvar sendScale = throttle(function(value){\r\n\t\t\t\t\tscaleRef.set(value);\r\n\t\t\t\t}, component.updateRate);\r\n\t\r\n\t\t\t\tfunction onComponentChanged(event){\r\n\t\t\t\t\tif (!sync.isMine) return;\r\n\t\r\n\t\t\t\t\tvar name = event.detail.name;\r\n\t\t\t\t\tvar newData = event.detail.newData;\r\n\t\r\n\t\t\t\t\tif (name === 'position') {\r\n\t\t\t\t\t\tsendPosition(newData);\r\n\t\t\t\t\t} else if (name === 'rotation') {\r\n\t\t\t\t\t\tsendRotation(newData);\r\n\t\t\t\t\t} else if (name === 'scale') {\r\n\t\t\t\t\t\tsendScale(newData);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//from underscore.js\r\n\t\t\t\tfunction throttle(func, wait, options) {\r\n\t\t\t\t\tvar timeout, context, args, result;\r\n\t\t\t\t\tvar previous = 0;\r\n\t\t\t\t\tif (!options) options = {};\r\n\t\r\n\t\t\t\t\tvar later = function() {\r\n\t\t\t\t\t  previous = options.leading === false ? 0 : Date.now();\r\n\t\t\t\t\t  timeout = null;\r\n\t\t\t\t\t  result = func.apply(context, args);\r\n\t\t\t\t\t  if (!timeout) context = args = null;\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tvar throttled = function() {\r\n\t\t\t\t\t  var now = Date.now();\r\n\t\t\t\t\t  if (!previous && options.leading === false) previous = now;\r\n\t\t\t\t\t  var remaining = wait - (now - previous);\r\n\t\t\t\t\t  context = this;\r\n\t\t\t\t\t  args = arguments;\r\n\t\t\t\t\t  if (remaining <= 0 || remaining > wait) {\r\n\t\t\t\t\t\tif (timeout) {\r\n\t\t\t\t\t\t  clearTimeout(timeout);\r\n\t\t\t\t\t\t  timeout = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tprevious = now;\r\n\t\t\t\t\t\tresult = func.apply(context, args);\r\n\t\t\t\t\t\tif (!timeout) context = args = null;\r\n\t\t\t\t\t  } else if (!timeout && options.trailing !== false) {\r\n\t\t\t\t\t\ttimeout = setTimeout(later, remaining);\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  return result;\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tthrottled.cancel = function() {\r\n\t\t\t\t\t  clearTimeout(timeout);\r\n\t\t\t\t\t  previous = 0;\r\n\t\t\t\t\t  timeout = context = args = null;\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\treturn throttled;\r\n\t\t\t\t  };\r\n\t\r\n\t\r\n\t\t\t\tcomponent.el.addEventListener('componentchanged', onComponentChanged);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t* Enables the synchronization of properties of entities. All property sync components\r\n\t* require both a {@link sync.sync-system} on `a-scene`, and a {@link sync.sync}\r\n\t* on the entity to be synced.\r\n\t* @name sync\r\n\t* @namespace sync\r\n\t* @example\r\n\t* <a-scene sync-system='app: example sync; author: altspacevr'>\r\n\t*   <a-entity sync='ownOn: cursordown' sync-color></a-entity>\r\n\t* </a-scene>\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t* Enables the synchronization of properties of the entity. Must be used in\r\n\t* conjuction with the {@link sync.sync-system} component and a component for a\r\n\t* specific property (e.g. {@link sync.sync-transform}).\r\n\t* @memberof sync\r\n\t* @mixin sync\r\n\t* @prop {string} ownOn - The name of the event, or a list of events, that\r\n\t* will cause the local client to take ownership of this object. This field\r\n\t* cannot be updated after initialization.\r\n\t*/\r\n\tAFRAME.registerComponent('sync',\r\n\t{\r\n\t\tschema: {\r\n\t\t\tmode: { default: 'link' },\r\n\t\t\townOn: { type: 'string' } //cannot be changed after creation\r\n\t\t},\r\n\t\tinit: function () {\r\n\t\t\tvar scene = document.querySelector('a-scene');\r\n\t\t\tvar syncSys = scene.systems['sync-system'];\r\n\t\r\n\t\t\tvar ref;\r\n\t\t\tvar key;\r\n\t\t\tvar dataRef;\r\n\t\t\tvar ownerRef;\r\n\t\t\tvar ownerId;\r\n\t\t\tvar isMine = false;\r\n\t\r\n\t\t\tvar component = this;\r\n\t\r\n\t\t\tcomponent.isConnected = false;\r\n\t\r\n\t\t\tif(syncSys.isConnected) start(); else scene.addEventListener('connected', start);\r\n\t\r\n\t\r\n\t\t\tif(component.data.ownOn)\r\n\t\t\t{\r\n\t\t\t\tvar ownershipEvents = component.data.ownOn.split(/[ ,]+/);\r\n\t\t\t\tfor(var i = 0, max = ownershipEvents.length; i < max; i++){\r\n\t\t\t\t\tcomponent.el.addEventListener(ownershipEvents[i], function(){\r\n\t\t\t\t\t\tif(component.isConnected){\r\n\t\t\t\t\t\t\tcomponent.takeOwnership();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction start(){\r\n\t\t\t\t//Make sure someone always owns an object. If the owner leaves and we are the master client, we will take it.\r\n\t\t\t\t//This ensures, for example, that synced animations keep playing\r\n\t\t\t\tscene.addEventListener('clientleft', function(event){\r\n\t\t\t\t\tvar shouldTakeOwnership = (!ownerId || ownerId === event.detail.id) && syncSys.isMasterClient;\r\n\t\r\n\t\t\t\t\tif(shouldTakeOwnership) component.takeOwnership();\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tif (component.data.mode === 'link') {\r\n\t\t\t\t\tvar id = component.el.id;\r\n\t\t\t\t\tif (!id) {\r\n\t\t\t\t\t\tconsole.error('Entities cannot be synced using link mode without an id.');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tconsole.log('syncSys: ' + syncSys);\r\n\t\t\t\t\tconsole.log('syncSys.sceneRef: ' + syncSys.sceneRef);\r\n\t\r\n\t\t\t\t\tlink(syncSys.sceneRef.child(id));\r\n\t\t\t\t\tsetupReceive();\r\n\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error('Unsupported sync mode: ' + component.data.mode);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcomponent.isConnected = true;\r\n\t\t\t\tcomponent.el.emit('connected', null, false);\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction link(entityRef) {\r\n\t\t\t\tref = entityRef;\r\n\t\t\t\tkey = ref.key();\r\n\t\t\t\tdataRef = ref.child('data');\r\n\t\t\t\tcomponent.dataRef = dataRef;\r\n\t\t\t\townerRef = ref.child('owner');\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction setupReceive() {\r\n\t\r\n\t\t\t\t//if nobody has owned the object yet, we will.\r\n\t\t\t\townerRef.transaction(function (owner) {\r\n\t\t\t\t\tif (owner) return undefined;\r\n\t\r\n\t\t\t\t\townerRef.onDisconnect().set(null);\r\n\t\t\t\t\treturn syncSys.clientId;\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\townerRef.on('value',\r\n\t\t\t\t\tfunction(snapshot) {\r\n\t\t\t\t\t\tvar newOwnerId = snapshot.val();\r\n\t\r\n\t\t\t\t\t\tvar gained = newOwnerId === syncSys.clientId && !isMine;\r\n\t\t\t\t\t\tif (gained) component.el.emit('ownershipgained', null, false);\r\n\t\r\n\t\r\n\t\t\t\t\t\t//note this also fires when we start up without ownership\r\n\t\t\t\t\t\tvar lost = newOwnerId !== syncSys.clientId && isMine;\r\n\t\t\t\t\t\tif (lost){\r\n\t\t\t\t\t\t\tcomponent.el.emit('ownershiplost', null, false);\r\n\t\r\n\t\t\t\t\t\t\t//we no longer have to clear our ownership when we disconnect\r\n\t\t\t\t\t\t\townerRef.onDisconnect().cancel();\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\townerId = newOwnerId;\r\n\t\r\n\t\t\t\t\t\tisMine = newOwnerId === syncSys.clientId;\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\r\n\t\t\t/**\r\n\t\t\t* Tell sync to start pushing local property values instead of updating\r\n\t\t\t* local from remote values.\r\n\t\t\t* @method sync.sync#takeOwnership\r\n\t\t\t*/\r\n\t\t\tcomponent.takeOwnership = function() {\r\n\t\t\t\townerRef.set(syncSys.clientId);\r\n\t\r\n\t\t\t\t//clear our ownership if we disconnect\r\n\t\t\t\t//this is needed if we are the last user in the room, but we expect people to join later\r\n\t\t\t\townerRef.onDisconnect().set(null);\r\n\t\t\t}\r\n\t\r\n\t\t\t/**\r\n\t\t\t* Indicates whether the sync ownership is yours.\r\n\t\t\t* @member sync.sync#isMine\r\n\t\t\t* @readonly\r\n\t\t\t*/\r\n\t\t\tObject.defineProperty(component, 'isMine', {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\treturn isMine;//TODO: Should this be state instead?\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t * The wire component allows you to trigger an event on another entity when an event occurs on an entity\r\n\t * @mixin wire\r\n\t * @property {string} on Name of an event to listen to\r\n\t * @property {string} gained Name of a state to watch for\r\n\t * @property {string} lost Name of a state to watch for\r\n\t * @property {string} emit Name of an event to trigger on the targets\r\n\t * @property {string} gain Name of a state to add on the target\r\n\t * @property {string} lose Name of a state to remove on the target\r\n\t * @property {selector} targets A selector to pick which objects to wire to\r\n\t * @property {selector} target - A selector to pick a single object to wire to\r\n\t **/\r\n\tAFRAME.registerComponent('wire',\r\n\t{\r\n\t\tmultiple: true,\r\n\t\tschema: {\r\n\t\t\ton: {type: 'string'},\r\n\t\t\temit: {type: 'string'},\r\n\t\t\tgained: {type: 'string'},\r\n\t\t\tlost: {type: 'string'},\r\n\t\t\tgain: {type: 'string'},\r\n\t\t\tlose: {type: 'string'},\r\n\t\t\ttargets: {type: 'selectorAll'},\r\n\t\t\ttarget: {type: 'selector'}\r\n\t\t},\r\n\t\tupdate: function (oldData) {\r\n\t\t\tif (oldData.on) {\r\n\t\t\t\tthis.el.removeEventListener(oldData.on, this.actOnTargets);\r\n\t\t\t}\r\n\t\t\tif (oldData.gained) {\r\n\t\t\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\r\n\t\t\t}\r\n\t\t\tif (oldData.lost) {\r\n\t\t\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.actOnTargets = function () {\r\n\t\t\t\tfunction act(el) {\r\n\t\t\t\t\tif (this.data.emit) {\r\n\t\t\t\t\t\tel.emit(this.data.emit);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.data.gain) {\r\n\t\t\t\t\t\tel.addState(this.data.gain);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.data.lose) {\r\n\t\t\t\t\t\tel.removeState(this.data.lose);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(this.data.targets) this.data.targets.forEach(act.bind(this));\r\n\t\t\t\tif(this.data.target) act.call(this, this.data.target);\r\n\t\t\t}.bind(this);\r\n\t\r\n\t\t\tthis.actOnTargetsIfStateMatches = function (event) {\r\n\t\t\t\tvar state = event.detail.state;\r\n\t\t\t\tif (state === this.data.gained || state === this.data.lost) {\r\n\t\t\t\t\tthis.actOnTargets();\r\n\t\t\t\t}\r\n\t\t\t}.bind(this);\r\n\t\r\n\t\t\tif (this.data.on) {\r\n\t\t\t\tthis.el.addEventListener(this.data.on, this.actOnTargets);\r\n\t\t\t}\r\n\t\t\tif (this.data.gained) {\r\n\t\t\t\tthis.el.addEventListener('stateadded', this.actOnTargetsIfStateMatches);\r\n\t\t\t}\r\n\t\t\tif (this.data.lost) {\r\n\t\t\t\tthis.el.addEventListener('stateremoved', this.actOnTargetsIfStateMatches);\r\n\t\t\t}\r\n\t\t},\r\n\t\tremove: function () {\r\n\t\t\tthis.el.removeEventListener(this.data.on, this.actOnTargets);\r\n\t\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\r\n\t\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\r\n\t\t}\r\n\t});\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** aframe-altspace-component.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4c5d887d65f9da9ef80d\n **/","if (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\nrequire('./altspace');\r\nrequire('./altspace-cursor-collider');\r\nrequire('./altspace-tracked-controls');\r\nrequire('./native-components');\r\nrequire('./native-resources');\r\nrequire('./sync');\r\nrequire('./sync-system');\r\nrequire('./sync-transform');\r\nrequire('./sync-color');\r\nrequire('./sync-n-sound');\r\nrequire('./wire');\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","(function(){\r\n\r\n\tfunction setColliderFlag(obj, state) {\r\n\t\tobj.userData.altspace = {collider: {enabled: state}};\r\n\t\tobj.traverse(function (obj) {\r\n\t\t\tif (obj instanceof THREE.Mesh) {\r\n\t\t\t\tobj.userData.altspace = {collider: {enabled: state}};\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t* Enable or disable cursor collision on the object.\r\n\t* @mixin altspace-cursor-collider\r\n\t* @memberof altspace\r\n\t* @prop {boolean} enabled=true - The state of the cursor collider.\r\n\t*/\r\n\tAFRAME.registerComponent('altspace-cursor-collider', {\r\n\t\tschema: { enabled: { default: true } },\r\n\t\tinit: function () {\r\n\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\r\n\t\t\tthis.el.addEventListener('model-loaded', (function(){\r\n\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\r\n\t\t\t}).bind(this));\r\n\t\t},\r\n\t\tupdate: function () {\r\n\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\r\n\t\t}\r\n\t});\r\n\r\n})();\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/altspace-cursor-collider.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\r\n* Enables tracked control support for A-Frame applications that use the built-in\r\n* `tracked-controls`, `vive-controls` or `hand-controls` components.\r\n* @mixin altspace-tracked-controls\r\n* @memberof altspace\r\n*/\r\nAFRAME.registerComponent('altspace-tracked-controls', {\r\n  init: function () {\r\n\tthis.gamepadIndex = null;\r\n\tthis.trackedControlsSystem = document.querySelector('a-scene').systems['tracked-controls'];\r\n\tthis.systemGamepads = 0;\r\n\taltspace.getGamepads();\r\n  },\r\n  tick: function () {\r\n\t  if (\r\n\t\tthis.trackedControlsSystem &&\r\n\t\tthis.systemGamepads !== this.trackedControlsSystem.controllers.length &&\r\n\t\twindow.altspace && altspace.getGamepads && altspace.getGamepads().length\r\n\t  ) {\r\n\t\tvar components = this.el.components;\r\n\t\tif (components['paint-controls']) {\r\n\t\t  this.gamepadIndex = components['paint-controls'].data.hand === 'left' ? 2 : 1;\r\n\t\t}\r\n\t\tif (this.gamepadIndex === null && components['hand-controls']) {\r\n\t\t  this.gamepadIndex = components['hand-controls'].data === 'left' ? 2 : 1;\r\n\t\t}\r\n\t\tif (this.gamepadIndex === null && components['vive-controls']) {\r\n\t\t  this.gamepadIndex = components['vive-controls'].data.hand === 'left' ? 2 : 1;\r\n\t\t}\r\n\t\tif (this.gamepadIndex === null && components['tracked-controls']) {\r\n\t\t  this.gamepadIndex = components['tracked-controls'].data.controller;\r\n\t\t}\r\n\t\tthis.el.setAttribute('tracked-controls', 'id', altspace.getGamepads()[this.gamepadIndex].id);\r\n\t\tthis.el.setAttribute('tracked-controls', 'controller', 0);\r\n\t\tthis.systemGamepads = this.trackedControlsSystem.controllers.length;\r\n\t  }\r\n  }\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/altspace-tracked-controls.js\n ** module id = 2\n ** module chunks = 0\n **/","/**\r\n* @namespace altspace\r\n*/\r\n\r\n/**\r\n* The altspace component makes A-Frame apps compatible with AltspaceVR.\r\n*\r\n* **Note**: If you use the `embedded` A-Frame component on your scene, you must include it *before* the `altspace` component, or your app will silently fail.\r\n* @mixin altspace\r\n* @memberof altspace\r\n* @property {boolean} usePixelScale=`false` - Allows you to use A-Frame units as CSS pixels.\r\n* This is the default behavior for three.js apps, but not for A-Frame apps.\r\n* @property {string} verticalAlign=`middle` - Puts the origin at the `bottom`, `middle` (default),\r\n* or `top` of the Altspace enclosure.\r\n* @property {boolean} enclosuresOnly=`true` - Prevents the scene from being created if\r\n* enclosure is flat.\r\n* @property {boolean} fullspace=`false` - Puts the app into fullspace mode.\r\n*\r\n* @example\r\n* <head>\r\n*   <title>My A-Frame Scene</title>\r\n*   <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\r\n*   <script src=\"https://cdn.rawgit.com/AltspaceVR/aframe-altspace-component/v1.3.2/dist/aframe-altspace-component.min.js\"></script>\r\n* </head>\r\n* <body>\r\n*   <a-scene altspace>\r\n*     <a-entity geometry=\"primitive: box\" material=\"color: #C03546\"></a-entity>\r\n*   </a-scene>\r\n* </body>\r\n*/\r\nAFRAME.registerComponent('altspace', {\r\n  version: '1.3.2',\r\n  schema: {\r\n\tusePixelScale: { type: 'boolean', default: 'false'},\r\n\tverticalAlign: { type: 'string',  default: 'middle'},\r\n\tenclosuresOnly:{ type: 'boolean', default: 'true'},\r\n\tfullspace:     { type: 'boolean', default: 'false'}\r\n  },\r\n\r\n  /*\r\n   * Called once when component is attached. Generally for initial setup.\r\n   */\r\n  init: function () {\r\n\tif (!(this.el.object3D instanceof THREE.Scene)) {\r\n\t  console.warn('aframe-altspace-component can only be attached to a-scene');\r\n\t  return;\r\n\t}\r\n\r\n\tif (window.altspace && window.altspace.inClient) {\r\n\t  this.el.setAttribute('vr-mode-ui', {enabled: false});\r\n\t  this.initRenderer();\r\n\t  this.initCursorEvents();\r\n\t  this.initCollisionEvents();\r\n\t} else {\r\n\t  console.warn('aframe-altspace-component only works inside of AltspaceVR');\r\n\t}\r\n\r\n  },\r\n\r\n  /*\r\n   * Called on every single tick or render loop of the scene.\r\n   */\r\n  tick: function (t, dt) {\r\n      if(this.el.object3D.updateAllBehaviors)\r\n        this.el.object3D.updateAllBehaviors();\r\n  },\r\n\r\n  /*\r\n   * Called when a component is removed (e.g., via removeAttribute).\r\n   * Generally undoes all modifications to the entity.\r\n   */\r\n  remove: function () { },\r\n\r\n  /*\r\n   * Called on each scene tick.\r\n   */\r\n  // tick: function (t) { },\r\n\r\n  /*\r\n   * Called when entity pauses.\r\n   * Use to stop or remove any dynamic or background behavior such as events.\r\n   */\r\n  pause: function () { },\r\n\r\n  /*\r\n   * Called when entity resumes.\r\n   * Use to continue or add any dynamic or background behavior such as events.\r\n   */\r\n  play: function () { },\r\n\r\n\r\n  /********** Helper Methods **********/\r\n\r\n  /*\r\n   * Swap in Altspace renderer when running in AltspaceVR.\r\n   */\r\n  initRenderer: function () {\r\n\r\n\tvar scene = this.el.object3D;\r\n\taltspace.getEnclosure().then(function(e)\r\n\t{\r\n\t\tif(this.data.fullspace){\r\n\t\t\te.requestFullspace();\r\n\t\t\te.addEventListener('fullspacechange', function(){\r\n\t\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!this.data.usePixelScale || this.data.fullspace){\r\n\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\r\n\t\t}\r\n\r\n\t  switch (this.data.verticalAlign) {\r\n\t\tcase 'bottom':\r\n\t\t  scene.position.y -= e.innerHeight / 2;\r\n\t\t  break;\r\n\t\tcase 'top':\r\n\t\t  scene.position.y += e.innerHeight / 2;\r\n\t\t  break;\r\n\t\tcase 'middle':\r\n\t\t  break;\r\n\t\tdefault:\r\n\t\t  console.warn('Unexpected value for verticalAlign: ', this.data.verticalAlign);\r\n\t  }\r\n\r\n\t  if(this.data.enclosuresOnly && e.innerDepth === 1){\r\n\t\tthis.el.renderer.render(new THREE.Scene());\r\n\t\tthis.el.renderer = this.el.effect = oldRenderer;\r\n\r\n\t  }\r\n\t}.bind(this));\r\n\r\n\tvar oldRenderer = this.el.renderer;\r\n\tvar renderer = this.el.renderer = this.el.effect = altspace.getThreeJSRenderer({\r\n\t  aframeComponentVersion: this.version\r\n\t});\r\n\tvar noop = function() {};\r\n\trenderer.setSize = noop;\r\n\trenderer.setPixelRatio = noop;\r\n\trenderer.setClearColor = noop;\r\n\trenderer.clear = noop;\r\n\trenderer.enableScissorTest = noop;\r\n\trenderer.setScissor = noop;\r\n\trenderer.setViewport = noop;\r\n\trenderer.getPixelRatio = noop;\r\n\trenderer.getMaxAnisotropy = noop;\r\n\trenderer.setFaceCulling = noop;\r\n\trenderer.context = {canvas: {}};\r\n\trenderer.shadowMap = {};\r\n\r\n  },\r\n\r\n  /*\r\n   * Emulate A-Frame cursor events when running in altspaceVR.\r\n   */\r\n  initCursorEvents: function() {\r\n\r\n\tvar scene = this.el.object3D;\r\n\tvar cursorEl = document.querySelector('a-cursor') || document.querySelector('a-entity[cursor]');\r\n\tif (cursorEl) {\r\n\t  // Hide A-Frame cursor mesh.\r\n\t  cursorEl.setAttribute('material', 'transparent', true);\r\n\t  cursorEl.setAttribute('material', 'opacity', 0.0);\r\n\t}\r\n\r\n\tvar emit = function (eventName, event) {\r\n\t\t// Fire events on intersected object and A-Frame cursor.\r\n\t\tvar targetEl = event.target.el;\r\n\t\tif (cursorEl) cursorEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\r\n\t\tif (targetEl) targetEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\r\n\t} ;\r\n\r\n\tvar cursordownObj = null;\r\n\tscene.addEventListener('cursordown', function(event) {\r\n\t  cursordownObj = event.target;\r\n\t  emit('mousedown', event);\r\n\t});\r\n\r\n\tscene.addEventListener('cursorup', function(event) {\r\n\t  emit('mouseup', event);\r\n\t  if (event.target.uuid === cursordownObj.uuid) {\r\n\t\temit('click', event);\r\n\t  }\r\n\t  cursordownObj = null;\r\n\t});\r\n\r\n\tscene.addEventListener('cursorenter', function(event) {\r\n\t  if (!event.target.el) { return; }\r\n\t  event.target.el.addState('hovered');\r\n\t  if (cursorEl) cursorEl.addState('hovering');\r\n\t  emit('mouseenter', event);\r\n\t});\r\n\r\n\tscene.addEventListener('cursorleave', function(event) {\r\n\t  if (!event.target.el) { return; }\r\n\t  event.target.el.removeState('hovered');\r\n\t  if (cursorEl) cursorEl.removeState('hovering');\r\n\t  emit('mouseleave', event);\r\n\t});\r\n\r\n  },\r\n\r\n  initCollisionEvents: function () {\r\n\r\n\tvar scene = this.el.object3D;\r\n\r\n\tvar emit = function (eventName, event) {\r\n\t\tvar targetEl = event.target.el;\r\n\t\tif (!targetEl) return;\r\n\r\n\t\t//remap target and other from object3Ds to aframe element\r\n\t\tevent.target = targetEl;\r\n\t\tif (event.other && event.other.el) {\r\n\t\t\tevent.other = event.other.el;\r\n\t\t}\r\n\t\ttargetEl.emit(eventName, event);\r\n\t};\r\n\r\n\tscene.addEventListener('collisionenter', function (event) {\r\n\t\temit('collisionenter', event);\r\n\t});\r\n\r\n\tscene.addEventListener('collisionexit', function (event) {\r\n\t\temit('collisionexit', event);\r\n\t});\r\n\r\n\tscene.addEventListener('triggerenter', function (event) {\r\n\t\temit('triggerenter', event);\r\n\t});\r\n\r\n\tscene.addEventListener('triggerexit', function (event) {\r\n\t\temit('triggerexit', event);\r\n\t});\r\n\r\n  }\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/altspace.js\n ** module id = 3\n ** module chunks = 0\n **/","\r\n/**\r\n* This set of components map to various objects and effects that are provided\r\n* natively by AltspaceVR. Your management of these objects may be limited to\r\n* some degree, but they will tend to be more performant than SDK equivalents,\r\n* or may provide some functionality not otherwise available to the SDK.\r\n* @namespace native\r\n*/\r\n(function () {\r\n\tif (!window.altspace || !altspace.inClient) {\r\n\t\tvar noop = function () {};\r\n\t\twindow.altspace = {\r\n\t\t\taddNativeComponent: noop,\r\n\t\t\tupdateNativeComponent: noop,\r\n\t\t\tremoveNativeComponent: noop\r\n\t\t};\r\n\t}\r\n\r\n\tvar placeholderGeometry = new THREE.BoxGeometry(0.001, 0.001, 0.001);\r\n\tvar placeholderMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n\tplaceholderMaterial.visible = false;\r\n\tvar PlaceholderMesh = function () {\r\n\t\tTHREE.Mesh.call( this, placeholderGeometry, placeholderMaterial );\r\n\t};\r\n\tPlaceholderMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\tPlaceholderMesh.prototype.constructor = THREE.PlaceholderMesh;\r\n\r\n\tfunction meshInit(mesh) {\r\n\t\t//If you attach native components to an entity, it will not use a default collider\r\n\t\tmesh.userData.altspace = mesh.userData.altspace || {};\r\n\t\tmesh.userData.altspace.collider = mesh.userData.altspace.collider || {};\r\n\t\tmesh.userData.altspace.collider.enabled = false;\r\n\r\n\t\taltspace.addNativeComponent(mesh, this.name);\r\n\t}\r\n\r\n\tfunction nativeComponentInit() {\r\n\t\tvar mesh = this.el.getOrCreateObject3D('mesh', PlaceholderMesh);\r\n\r\n\t\tmeshInit.call(this, mesh);\r\n\r\n\t\t//to pass defaults\r\n\t\tthis.update(this.data);\r\n\t}\r\n\tfunction nativeComponentRemove() {\r\n\t\tvar mesh = this.el.getObject3D('mesh');\r\n\t\taltspace.removeNativeComponent(mesh, this.name);\r\n\t}\r\n\tfunction nativeComponentUpdate(oldData) {\r\n\t\taltspace.updateNativeComponent(this.el.object3DMap.mesh, this.name, this.data);\r\n\t}\r\n\r\n\tfunction callComponent(functionName, functionArguments) {\r\n\t\taltspace.callNativeComponent(this.el.object3DMap.mesh, this.name, functionName, functionArguments)\r\n\t}\r\n\r\n\t/**\r\n\t* Attach a given native object to this entity.\r\n\t* @mixin n-object\r\n\t* @memberof native\r\n\t* @prop {string} res - The identifier for the resource you want. This component\r\n\t* can accept all resources except for `interactables`.\r\n\t* @example <a-entity n-object='res:architecture/wall-4w-4h'></a-entity>\r\n\t*/\r\n\tAFRAME.registerComponent('n-object', {\r\n\t\tschema: {\r\n\t\t\tres: {type: 'string'}\r\n\t\t},\r\n\t\tinit: nativeComponentInit,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tremove: nativeComponentRemove\r\n\t});\r\n\r\n\t/**\r\n\t* Create an object that spawns additional copies of itself when grabbed by a user (the copies are not spawners themselves).\r\n\t* These copies will be physically interactive and automatically synchronized\r\n\t* between users.\r\n\t* @mixin n-spawner\r\n\t* @memberof native\r\n\t* @prop {string} res - The identifier for the resource you want. This component\r\n\t* can only accept resources of type `interactables`.\r\n\t* @example <a-entity n-spawner='res: interactables/basketball'></a-entity>\r\n\t*/\r\n\tAFRAME.registerComponent('n-spawner', {\r\n\t\tschema: {\r\n\t\t\tres: {type: 'string'}\r\n\t\t},\r\n\t\tinit: nativeComponentInit,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tremove: nativeComponentRemove\r\n\t});\r\n\r\n\t/**\r\n\t* Creates dynamic 2D text on the entity. The text will wrap automatically based on the width and height provided.\r\n\t* This text will be clearer than texture-based text and more performant than geometry-based test.\r\n\t* @mixin n-text\r\n\t* @memberof native\r\n\t* @prop {string} text - The text to be drawn.\r\n\t* @prop {number} fontSize=10 - The height of the letters. 10pt ~= 1m\r\n\t* @prop {number} width=10 - The width of the text area in meters. If the\r\n\t* text is wider than this value, the overflow will be wrapped to the next line.\r\n\t* @prop {number} height=1 - The height of the text area in meters. If the\r\n\t* text is taller than this value, the overflow will be cut off.\r\n\t* @prop {string} horizontalAlign=middle - The horizontal anchor point for\r\n\t* the text. Can be `left`, `middle`, or `right`.\r\n\t* @prop {string} verticalAlign=middle - The vertical anchor point for the\r\n\t* text. Can be `top`, `middle`, or `bottom`.\r\n\t*/\r\n\tAFRAME.registerComponent('n-text', {\r\n\t\tinit: nativeComponentInit,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tremove: nativeComponentRemove,\r\n\t\tschema: {\r\n\t\t\ttext: { default: '', type: 'string' },\r\n\t\t\t/*color: { default: 'white',\r\n\t\t\t\tparse: function(value) {\r\n\t\t\t\t\treturn parseFloat(value, 10);\r\n\t\t\t\t},\r\n\t\t\t\tstringify: function(value) {\r\n\t\t\t\t\treturn value.toString();\r\n\t\t\t\t}},*/\r\n\t\t\tfontSize: { default: '10', type: 'int' },//roughly a meter tall\r\n\t\t\twidth: { default: '10', type: 'number' },//in meters\r\n\t\t\theight: { default: '1', type: 'number' },//in meters\r\n\t\t\thorizontalAlign: { default: 'middle'},\r\n\t\t\tverticalAlign: { default: 'middle'}\r\n\t\t}\r\n\t});\r\n\r\n\t//object: collides against: objects / enviroment / cursor\r\n\t//environment: can be teleported onto, and collides against: objects / environment / cursor\r\n\t//hologram: collides against: cursor / holograms\r\n\r\n\t/**\r\n\t* Abstract base class for {@link n.n-sphere-collider}, {@link n.n-box-collider},\r\n\t* {@link n.n-capsule-collider}, and {@link n.n-mesh-collider}. You cannot use\r\n\t* this class directly, but instead you should add one of those components\r\n\t* to your objects.\r\n\t* @name n-collider\r\n\t* @mixin n-collider\r\n\t* @memberof native\r\n\t* @prop {vec3} center=0,0,0 - The offset of the collider in local space.\r\n\t* @prop {string} type=hologram - The type of collider, one of: `object` | `environment` | `hologram`.\r\n\t* Object colliders collide with other objects, the environment, and the cursor.\r\n\t* Environment colliders collide with everything objects do, but you can also\r\n\t* teleport onto them. Hologram colliders only collide with other holograms and\r\n\t* the cursor.\r\n\t*/\r\n\r\n\t/**\r\n\t* Create a spherical collider on this entity.\r\n\t* @mixin n-sphere-collider\r\n\t* @memberof native\r\n\t* @extends native.n-collider\r\n\t* @prop {number} radius=1 - The size of the collider in meters.\r\n\t*/\r\n\tAFRAME.registerComponent('n-sphere-collider', {\r\n\t\tinit:nativeComponentInit,\r\n\t\tremove: nativeComponentRemove,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tschema: {\r\n\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\tcenter: { type: 'vec3' },\r\n\t\t\tradius: { default: '0', type: 'number' },\r\n\t\t\ttype: {default: 'object'}\r\n\t\t}\r\n\t});\r\n\r\n\r\n\t/**\r\n\t* Create a box-shaped collider on this entity.\r\n\t* @mixin n-box-collider\r\n\t* @memberof native\r\n\t* @extends native.n-collider\r\n\t* @prop {vec3} size=1,1,1 - The dimensions of the collider.\r\n\t*/\r\n\tAFRAME.registerComponent('n-box-collider', {\r\n\t\tinit:nativeComponentInit,\r\n\t\tremove: nativeComponentRemove,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tschema: {\r\n\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\tcenter: { type: 'vec3' },\r\n\t\t\tsize: { type: 'vec3' },\r\n\t\t\ttype: {default: 'object'}\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t* Create a capsule-shaped collider on this entity. Capsules\r\n\t* are a union of a cylinder and two spheres on top and bottom.\r\n\t* @mixin n-capsule-collider\r\n\t* @memberof native\r\n\t* @extends native.n-collider\r\n\t* @prop {number} radius=1 - The radius of the capsule in meters.\r\n\t* @prop {number} height=1 - The height of the shaft of the capsule in meters.\r\n\t* @prop {string} direction=y - The axis with which the capsule is aligned.\r\n\t* One of `x`, `y`, or `z`.\r\n\t*/\r\n\tAFRAME.registerComponent('n-capsule-collider', {\r\n\t\tinit:nativeComponentInit,\r\n\t\tremove: nativeComponentRemove,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tschema: {\r\n\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\tcenter: { type: 'vec3' },\r\n\t\t\tradius: { default: '0', type: 'number' },\r\n\t\t\theight: { default: '0', type: 'number' },\r\n\t\t\tdirection: { default: 'y' },\r\n\t\t\ttype: {default: 'object'}\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t* Enable collision for the entire attached mesh. This is expensive to evaluate, so should only be used on\r\n\t* low-poly meshes.\r\n\t* @mixin n-mesh-collider\r\n\t* @memberof native\r\n\t* @extends native.n-collider\r\n\t* @example <a-box n-mesh-collider></a-box>\r\n\t* @prop {bool} convex=true - Whether the collider should be convex or concave. Set this to false if you have holes\r\n\t* in your mesh. Convex colliders are limited to 255 triangles. Note: concave colliders can be significantly more\r\n\t* expensive comparet to conves colliders.\r\n\t*/\r\n\tAFRAME.registerComponent('n-mesh-collider', {\r\n\t\t_forEachMesh: function (func) {\r\n\t\t\tvar obj = this.el.object3DMap.mesh;\r\n\t\t\tif (!obj) { return; }\r\n\t\t\tif (obj instanceof THREE.Mesh) {\r\n\t\t\t\tfunc(obj);\r\n\t\t\t}\r\n\t\t\tobj.traverse(function (childObj) {\r\n\t\t\t\tif (childObj instanceof THREE.Mesh) {\r\n\t\t\t\t\tfunc(childObj);\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\t_initObj: function () {\r\n\t\t\tthis._forEachMesh(function (mesh) {\r\n\t\t\t\tmeshInit.call(this, mesh);\r\n\r\n\t\t\t\t//to pass defaults\r\n\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\tinit: function () {\r\n\t\t\t// Allow a-frame to create a PlaceholderMesh if there isn't already one, so that the native collider is\r\n\t\t\t// registered.\r\n\t\t\tthis.el.getOrCreateObject3D('mesh', PlaceholderMesh);\r\n\r\n\t\t\t// Initialize the existing mesh\r\n\t\t\tthis._initObj();\r\n\r\n\t\t\tthis.el.addEventListener('model-loaded', function () {\r\n\t\t\t\t// Re-initialize the collider if a new model is loaded\r\n\t\t\t\tthis._initObj();\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\tremove: function () {\r\n\t\t\tthis._forEachMesh(function (mesh) {\r\n\t\t\t\taltspace.removeNativeComponent(mesh, this.name);\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\tupdate: function (oldData) {\r\n\t\t\tthis._forEachMesh(function (mesh) {\r\n\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\t\tschema: {\r\n\t\t\tisTrigger: { default: false, type: 'boolean' },\r\n\t\t\tconvex: { default: true, type: 'boolean' },\r\n\t\t\ttype: {default: 'object'}\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t* Make the object's +Z always face the viewer. Currently will only directly apply to main mesh or native component on the attached entity, not any children or submeshes.\r\n\t* @mixin n-billboard\r\n\t* @memberof native\r\n\t* @example <a-plane n-billboard></a-plane>\r\n\t*/\r\n\tAFRAME.registerComponent('n-billboard', {\r\n\t\tinit:nativeComponentInit,\r\n\t\tremove: nativeComponentRemove,\r\n\t});\r\n\r\n\t/**\r\n\t* A container keeps a running tally of how many objects are within\r\n\t* its bounds, and adds and removes the states `container-full` and\r\n\t* `container-empty` based on the current count of objects. Can fire three\r\n\t* special events: `container-full`, `container-empty`, and `container-count-changed`.\r\n\t* @mixin n-container\r\n\t* @memberof native\r\n\t* @prop {number} capacity=4 - The value at which the container will fire the\r\n\t* `container-full` event.\r\n\t*/\r\n\tAFRAME.registerComponent('n-container', {\r\n\t\tinit: function(){\r\n\t\t\tnativeComponentInit.call(this);\r\n\r\n\t\t\tvar el = this.el;\r\n\t\t\tvar component = this;\r\n\r\n\t\t\tel.addEventListener('stateadded', function(event){\r\n\t\t\t\tif(event.detail.state === 'container-full'){\r\n\t\t\t\t\tel.emit('container-full');\r\n\t\t\t\t}\r\n\t\t\t\tif(event.detail.state === 'container-empty'){\r\n\t\t\t\t\tel.emit('container-empty');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tel.addEventListener('container-count-changed', function(event){\r\n\t\t\t\tcomponent.count = event.detail.count;\r\n\t\t\t});\r\n\t\t},\r\n\t\tremove: nativeComponentRemove,\r\n\t\tupdate: nativeComponentUpdate,\r\n\t\tschema: {\r\n\t\t\tcapacity: { default: 4, type: 'number' },\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t* Play the sound given by the `src` or `res` property from the location\r\n\t* of the entity.\r\n\t* @mixin n-sound\r\n\t* @memberof native\r\n\t* @prop {string} res - The resource identifier for a built-in sound clip.\r\n\t* @prop {string} src - A URL to an external sound clip. The sound can be in WAV, OGG or MP3 format. However. only\r\n\t* WAV is supported on all platforms. MP3 is supported on Gear VR and OGG is supported on desktop.\r\n\t* @prop {string} on - The name of the event that will play this sound clip.\r\n\t* @prop {boolean} loop=false - Tells the clip to loop back to the beginning of the clip\r\n\t* once it's finished.\r\n\t* @prop {boolean} autoplay=false - Tells the clip to start automatically when\r\n\t* the scene loads, instead of waiting for `playSound()`.\r\n\t* @prop {boolean} oneshot=false - Tells the clip to clean itself up when it\r\n\t* finishes playing. Allows for overlapping instances of the sound.\r\n\t* @prop {number} volume=1 - The volume of the clip, from [0,1].\r\n\t* @prop {number} spatialBlend=1 - How spatialized a sound is, from [0,1].\r\n\t* A value of 1 will be fully localized, and the sound will pan left and\r\n\t* right as you turn your head. A value of 0 makes it non-spatialized, and\r\n\t* it will always be heard in both ears.\r\n\t* @prop {number} pitch=1 - The speed multiplier for the sound. 0.5 is one\r\n\t* octave down, and 2 is one octave up.\r\n\t* @prop {number} minDistance=1 - Inside this distance in meters,\r\n\t* the sound volume is at full volume.\r\n\t* @prop {number} maxDistance=12 - If rolloff is 'logarithmic', the sound will stop attenuating at this distance.\r\n\t* If rolloff is 'linear' or 'cosine', the sound will be silent at this distance.\r\n\t* @prop {string} rolloff='logarithmic' - Set this to 'linear' or 'cosine' if you want to cut sounds off at a\r\n\t* maxDistance.\r\n\t*/\r\n\t/**\r\n\t* Fired when a sound has loaded and is ready to be played\r\n\t* @event native.n-sound#n-sound-loaded\r\n\t*/\r\n\tAFRAME.registerComponent('n-sound', {\r\n\t\tinit: function () {\r\n\t\t\tvar src = this.data.src;\r\n\t\t\tif (src && !src.startsWith('http')) {\r\n\t\t\t\tif (src.startsWith('/')) {\r\n\t\t\t\t\tthis.data.src = location.origin + src;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar currPath = location.pathname;\r\n\t\t\t\t\tif (!currPath.endsWith('/')) {\r\n\t\t\t\t\t\tcurrPath = location.pathname.split('/').slice(0, -1).join('/') + '/';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.data.src = location.origin + currPath + src;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnativeComponentInit.call(this);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t* Stop the playing sound, and preserve position in clip.\r\n\t\t* @method native.n-sound#pauseSound\r\n\t\t*/\r\n\t\tpauseSound: function () {\r\n\t\t\tcallComponent.call(this, 'pause');\r\n\t\t\tthis.el.emit('sound-paused');\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t* Start the sound playing.\r\n\t\t* @method native.n-sound#playSound\r\n\t\t*/\r\n\t\tplaySound: function () {\r\n\t\t\tcallComponent.call(this, 'play');\r\n\t\t\tthis.el.emit('sound-played');\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t* Jump to a position in the clip.\r\n\t\t* @method native.n-sound#seek\r\n\t\t* @param {number} time - The time in milliseconds to jump to.\r\n\t\t*/\r\n\t\tseek: function (time) {\r\n\t\t\tcallComponent.call(this, 'seek', {time: time});\r\n\t\t},\r\n\t\tremove: function () {\r\n\t\t\tnativeComponentRemove.call(this);\r\n\t\t\tif (this.playHandler) {\r\n\t\t\t  this.el.removeEventListener(oldData.on, this.playHandler);\r\n\t\t\t}\r\n\t\t},\r\n\t\tupdate: function (oldData) {\r\n\t\t\tnativeComponentUpdate.call(this, oldData);\r\n\t\t\tif (this.playHandler) {\r\n\t\t\t  this.el.removeEventListener(oldData.on, this.playHandler);\r\n\t\t\t}\r\n\t\t\tif (this.data.on) {\r\n\t\t\t  this.playHandler = this.playSound.bind(this);\r\n\t\t\t  this.el.addEventListener(this.data.on, this.playHandler);\r\n\t\t\t}\r\n\t\t},\r\n\t\tschema: {\r\n\t\t\ton: { type: 'string' },\r\n\t\t\tres: { type: 'string' },\r\n\t\t\tsrc: { type: 'string' },\r\n\t\t\tloop: { type: 'boolean' },\r\n\t\t\tvolume: { type: 'number', default: 1 },\r\n\t\t\tautoplay: { type: 'boolean' },\r\n\t\t\toneshot: { type: 'boolean' },\r\n\t\t\tspatialBlend: { type: 'float', default: 1 },\r\n\t\t\tpitch: { type: 'float', default: 1 },\r\n\t\t\tminDistance: { type: 'float', default: 1 },\r\n\t\t\tmaxDistance: { type: 'float', default: 12 },\r\n\t\t\trolloff: { type: 'string', default: 'logarithmic' },\r\n\t\t}\r\n\t});\r\n\r\n})();\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/native-components.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\r\n* Sync the color property of the object between clients.\r\n* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\r\n* {@link sync.sync} component on the target entity.\r\n* @mixin sync-color\r\n* @memberof sync\r\n*/\r\nAFRAME.registerComponent('sync-color',\r\n{\r\n\tdependencies: ['sync'],\r\n\tschema: {\r\n\t},\r\n\tinit: function () {\r\n\t\tvar component = this;\r\n\t\tvar sync = component.el.components.sync;\r\n\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\r\n\r\n\t\tfunction start(){\r\n\t\t\tvar colorRef = sync.dataRef.child('material/color');\r\n\r\n\t\t\tvar refChangedLocked = false;\r\n\r\n\t\t\tvar firstValue = true;\r\n\r\n\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\r\n\t\t\t\tvar name = event.detail.name;\r\n\t\t\t\tvar oldData = event.detail.oldData;\r\n\t\t\t\tvar newData = event.detail.newData;\r\n\r\n\t\t\t\tif (name !== 'material') return;\r\n\t\t\t\tif (refChangedLocked) return;\r\n\r\n\t\t\t\tif (oldData.color !== newData.color) {\r\n\t\t\t\t\tif(sync.isMine){\r\n\t\t\t\t\t\tsetTimeout(function() {//For some reason A-Frame has a misconfigured material reference if we do this too early\r\n\t\t\t\t\t\t\tcolorRef.set(newData.color);\r\n\t\t\t\t\t\t}, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tcolorRef.on('value', function (snapshot) {\r\n\t\t\t\tif (sync.isMine && !firstValue) return;\r\n\t\t\t\tvar color = snapshot.val();\r\n\r\n\t\t\t\trefChangedLocked = true;\r\n\t\t\t\tcomponent.el.setAttribute('material', 'color', color);\r\n\t\t\t\trefChangedLocked = false;\r\n\r\n\t\t\t\tfirstValue = false;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-color.js\n ** module id = 6\n ** module chunks = 0\n **/","/**\r\n* Synchronize the playback state of an {@link n.n-sound} component between clients.\r\n* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\r\n* {@link sync.sync} component on the target entity.\r\n* @mixin sync-n-sound\r\n* @memberof sync\r\n*/\r\nAFRAME.registerComponent('sync-n-sound',\r\n{\r\n\tdependencies: ['sync'],\r\n\tschema: { },\r\n\tinit: function () {\r\n\t\tvar component = this;\r\n\t\tvar sync = component.el.components.sync;\r\n\t\tvar scene = document.querySelector('a-scene');\r\n\t\tvar syncSys = scene.systems['sync-system'];\r\n\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\r\n\r\n\t\tfunction start(){\r\n\t\t\tcomponent.soundStateRef = sync.dataRef.child('sound/state');\r\n\t\t\tcomponent.soundEventRef = sync.dataRef.child('sound/event');\r\n\r\n\t\t\tfunction sendEvent(event) {\r\n\t\t\t\tif (!sync.isMine) return;\r\n\t\t\t\tvar event = {\r\n\t\t\t\t\ttype: event.type,\r\n\t\t\t\t\tsender: syncSys.clientId,\r\n\t\t\t\t\tel: component.el.id,\r\n\t\t\t\t\ttime: Date.now()\r\n\t\t\t\t};\r\n\t\t\t\tcomponent.soundEventRef.set(event);\r\n\t\t\t}\r\n\r\n\t\t\tcomponent.el.addEventListener('sound-played', sendEvent);\r\n\t\t\tcomponent.el.addEventListener('sound-paused', sendEvent);\r\n\r\n\t\t\tcomponent.soundEventRef.on('value', function (snapshot) {\r\n\t\t\t\tif (sync.isMine) return;\r\n\t\t\t\tvar event = snapshot.val();\r\n\t\t\t\tif (!event) return;\r\n\t\t\t\tif (event.el === component.el.id) {\r\n\t\t\t\t\tvar sound = component.el.components['n-sound'];\r\n\t\t\t\t\tif (event.type === 'sound-played') {\r\n\t\t\t\t\t\tsound.playSound();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tsound.pauseSound();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\r\n\t\t\t\tif (!sync.isMine) return;\r\n\t\t\t\tvar name = event.detail.name;\r\n\t\t\t\tif (name !== 'n-sound') return;\r\n\t\t\t\tcomponent.soundStateRef.set(event.detail.newData);\r\n\t\t\t});\r\n\r\n\t\t\tcomponent.soundStateRef.on('value', function (snapshot) {\r\n\t\t\t\tif (sync.isMine) return;\r\n\t\t\t\tvar state = snapshot.val();\r\n\t\t\t\tif (!state) return;\r\n\t\t\t\tcomponent.el.setAttribute('n-sound', state);\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tremove: function () {\r\n\t\tthis.soundStateRef.off('value');\r\n\t\tthis.soundEventRef.off('value');\r\n\t}\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-n-sound.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\r\n* Connect to a remote Firebase server, and facilitate synchronization. These\r\n* options correspond exactly with the configuration options for\r\n* [altspace.utilities.sync.connect]{@link http://altspacevr.github.io/AltspaceSDK/doc/module-altspace_utilities_sync.html#.connect}.\r\n* This component must be present on `a-scene` for any other sync components to work.\r\n* @memberof sync\r\n* @mixin sync-system\r\n* @prop {string} author - A unique identifier for you or your organization.\r\n* @prop {string} app - The name of the app.\r\n* @prop {string} refUrl - Override the base reference. Set this to use your own Firebase.\r\n* @prop {string} instance - Override the instance ID. Can also be overridden with\r\n* a URL parameter.\r\n*/\r\nAFRAME.registerSystem('sync-system',\r\n{\r\n\tschema: {\r\n\t\tauthor: { type: 'string', default: null },\r\n\t\tapp: { type: 'string', default: null },\r\n\t\tinstance: { type: 'string', default: null },\r\n\t\trefUrl: { type: 'string', default: null }\r\n\t},\r\n\tinit: function() {\r\n\t\tvar component = this;\r\n\r\n\t\tif(!this.data || !this.data.app){\r\n\t\t\tconsole.warn('The sync-system must be present on the scene and configured with required data.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcomponent.isConnected = false;\r\n\t\tconsole.log(this.data);\r\n\t\taltspace.utilities.sync.connect({\r\n\t\t\tauthorId: this.data.author,\r\n\t\t\tappId: this.data.app,\r\n\t\t\tinstanceId: this.data.instance,\r\n\t\t\tbaseRefUrl: this.data.refUrl\r\n\t\t}).then(function(connection) {\r\n\t\t\tthis.connection = connection;\r\n\r\n\t\t\tthis.sceneRef = this.connection.instance.child('scene');\r\n\t\t\tthis.clientsRef = this.connection.instance.child('clients');\r\n\r\n\t\t\t// temporary way of having unique identifiers for each client\r\n\t\t\tthis.clientId = this.sceneEl.object3D.uuid;\r\n\t\t\tvar masterClientId;\r\n\t\t\tthis.clientsRef.on(\"value\", function (snapshot) {\r\n\t\t\t\tvar clientIds = snapshot.val();\r\n\r\n\t\t\t\tvar masterClientKey = Object.keys(clientIds)[0];\r\n\t\t\t\tmasterClientId = clientIds[masterClientKey];\r\n\t\t\t});\r\n\r\n\t\t\tthis.clientsRef.on('child_added', function(childSnapshot) {\r\n\t\t\t\tvar joinedClientId = childSnapshot.val();\r\n\t\t\t\t//let the master client flag get set first\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\tcomponent.sceneEl.emit('clientjoined', {id: joinedClientId}, false);\r\n\t\t\t\t}, 0);\r\n\t\t\t});\r\n\r\n\t\t\tthis.clientsRef.on('child_removed', function(childSnapshot) {\r\n\t\t\t\tvar leftClientId = childSnapshot.val();\r\n\t\t\t\t//let the master client flag get set first\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\tcomponent.sceneEl.emit('clientleft', {id: leftClientId}, false);\r\n\t\t\t\t}, 0);\r\n\t\t\t});\r\n\r\n\t\t\t// add our client ID to the list of connected clients,\r\n\t\t\t// but have it be automatically removed by firebase if we disconnect for any reason\r\n\t\t\tthis.clientsRef.push(this.clientId).onDisconnect().remove();\r\n\r\n\r\n\t\t\tthis.connection.instance.child('initialized').once('value', function (snapshot) {\r\n\t\t\t\tvar shouldInitialize = !snapshot.val();\r\n\t\t\t\tsnapshot.ref().set(true);\r\n\r\n\t\t\t\tcomponent.sceneEl.emit('connected', { shouldInitialize: shouldInitialize }, false);\r\n\t\t\t\tcomponent.isConnected = true;\r\n\t\t\t}.bind(this));\r\n\r\n\r\n\t\t\tObject.defineProperty(this, 'isMasterClient', {\r\n\t\t\t\tget: function () { return masterClientId === this.clientId; }.bind(this)\r\n\t\t\t});\r\n\t\t}.bind(this));\r\n\t}\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-system.js\n ** module id = 8\n ** module chunks = 0\n **/","//TODO: We need to figure out a way to recieve our first update without caring about ownership.\r\n// firstValue is probably not the right way to go, probably something about having sent yet. Need to change for both\r\n\r\n/**\r\n* Synchronize the position, rotation, and scale of this object with all clients.\r\n* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\r\n* {@link sync.sync} component on the target entity.\r\n* @mixin sync-transform\r\n* @memberof sync\r\n*/\r\nAFRAME.registerComponent('sync-transform',\r\n{\r\n\tdependencies: ['sync'],\r\n\tschema: {\r\n\t},\r\n\tinit: function () {\r\n\t\tvar component = this;\r\n\t\tvar sync = component.el.components.sync;\r\n\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\r\n\r\n\t\tfunction start(){\r\n\r\n\t\t\tvar positionRef = sync.dataRef.child('position');\r\n\t\t\tvar rotationRef = sync.dataRef.child('rotation');\r\n\t\t\tvar scaleRef = sync.dataRef.child('scale');\r\n\r\n\t\t\tcomponent.updateRate = 100;\r\n\r\n\t\t\tvar stoppedAnimations = [];\r\n\t\t\t//pause all animations on ownership loss\r\n\t\t\tcomponent.el.addEventListener('ownershiplost', function() {\r\n\t\t\t\tvar children = component.el.children;\r\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\r\n\t\t\t\t\tvar tagName = children[i].tagName.toLowerCase();\r\n\t\t\t\t\tif (tagName === \"a-animation\") {\r\n\t\t\t\t\t\tstoppedAnimations.push(children[i]);\r\n\t\t\t\t\t\tchildren[i].stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tcomponent.el.addEventListener('ownershipgained', function () {\r\n\t\t\t\tfor (var i = 0; i < stoppedAnimations.length; i++) {\r\n\t\t\t\t\tvar animation = stoppedAnimations[i];\r\n\t\t\t\t\tanimation.start();\r\n\t\t\t\t}\r\n\t\t\t\tstoppedAnimations = [];\r\n\t\t\t});\r\n\r\n\t\t\tfunction onTransform(snapshot, componentName) {\r\n\t\t\t\tif (sync.isMine) return;\r\n\r\n\t\t\t\tvar value = snapshot.val();\r\n\t\t\t\tif (!value) return;\r\n\r\n\t\t\t\tcomponent.el.setAttribute(componentName, value);\r\n\t\t\t}\r\n\r\n\t\t\tpositionRef.on('value', function (snapshot) {\r\n\t\t\t\tonTransform(snapshot, 'position');\r\n\t\t\t});\r\n\r\n\t\t\trotationRef.on('value', function (snapshot) {\r\n\t\t\t\tonTransform(snapshot, 'rotation');\r\n\t\t\t});\r\n\r\n\t\t\tscaleRef.on('value', function (snapshot) {\r\n\t\t\t\tonTransform(snapshot, 'scale');\r\n\t\t\t});\r\n\r\n\t\t\tvar sendPosition = throttle(function(value){\r\n\t\t\t\tpositionRef.set(value);\r\n\t\t\t}, component.updateRate);\r\n\r\n\t\t\tvar sendRotation = throttle(function(value){\r\n\t\t\t\trotationRef.set(value);\r\n\t\t\t}, component.updateRate);\r\n\r\n\t\t\tvar sendScale = throttle(function(value){\r\n\t\t\t\tscaleRef.set(value);\r\n\t\t\t}, component.updateRate);\r\n\r\n\t\t\tfunction onComponentChanged(event){\r\n\t\t\t\tif (!sync.isMine) return;\r\n\r\n\t\t\t\tvar name = event.detail.name;\r\n\t\t\t\tvar newData = event.detail.newData;\r\n\r\n\t\t\t\tif (name === 'position') {\r\n\t\t\t\t\tsendPosition(newData);\r\n\t\t\t\t} else if (name === 'rotation') {\r\n\t\t\t\t\tsendRotation(newData);\r\n\t\t\t\t} else if (name === 'scale') {\r\n\t\t\t\t\tsendScale(newData);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//from underscore.js\r\n\t\t\tfunction throttle(func, wait, options) {\r\n\t\t\t\tvar timeout, context, args, result;\r\n\t\t\t\tvar previous = 0;\r\n\t\t\t\tif (!options) options = {};\r\n\r\n\t\t\t\tvar later = function() {\r\n\t\t\t\t  previous = options.leading === false ? 0 : Date.now();\r\n\t\t\t\t  timeout = null;\r\n\t\t\t\t  result = func.apply(context, args);\r\n\t\t\t\t  if (!timeout) context = args = null;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar throttled = function() {\r\n\t\t\t\t  var now = Date.now();\r\n\t\t\t\t  if (!previous && options.leading === false) previous = now;\r\n\t\t\t\t  var remaining = wait - (now - previous);\r\n\t\t\t\t  context = this;\r\n\t\t\t\t  args = arguments;\r\n\t\t\t\t  if (remaining <= 0 || remaining > wait) {\r\n\t\t\t\t\tif (timeout) {\r\n\t\t\t\t\t  clearTimeout(timeout);\r\n\t\t\t\t\t  timeout = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tprevious = now;\r\n\t\t\t\t\tresult = func.apply(context, args);\r\n\t\t\t\t\tif (!timeout) context = args = null;\r\n\t\t\t\t  } else if (!timeout && options.trailing !== false) {\r\n\t\t\t\t\ttimeout = setTimeout(later, remaining);\r\n\t\t\t\t  }\r\n\t\t\t\t  return result;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthrottled.cancel = function() {\r\n\t\t\t\t  clearTimeout(timeout);\r\n\t\t\t\t  previous = 0;\r\n\t\t\t\t  timeout = context = args = null;\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn throttled;\r\n\t\t\t  };\r\n\r\n\r\n\t\t\tcomponent.el.addEventListener('componentchanged', onComponentChanged);\r\n\t\t}\r\n\t}\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-transform.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\r\n* Enables the synchronization of properties of entities. All property sync components\r\n* require both a {@link sync.sync-system} on `a-scene`, and a {@link sync.sync}\r\n* on the entity to be synced.\r\n* @name sync\r\n* @namespace sync\r\n* @example\r\n* <a-scene sync-system='app: example sync; author: altspacevr'>\r\n*   <a-entity sync='ownOn: cursordown' sync-color></a-entity>\r\n* </a-scene>\r\n*/\r\n\r\n\r\n\r\n/**\r\n* Enables the synchronization of properties of the entity. Must be used in\r\n* conjuction with the {@link sync.sync-system} component and a component for a\r\n* specific property (e.g. {@link sync.sync-transform}).\r\n* @memberof sync\r\n* @mixin sync\r\n* @prop {string} ownOn - The name of the event, or a list of events, that\r\n* will cause the local client to take ownership of this object. This field\r\n* cannot be updated after initialization.\r\n*/\r\nAFRAME.registerComponent('sync',\r\n{\r\n\tschema: {\r\n\t\tmode: { default: 'link' },\r\n\t\townOn: { type: 'string' } //cannot be changed after creation\r\n\t},\r\n\tinit: function () {\r\n\t\tvar scene = document.querySelector('a-scene');\r\n\t\tvar syncSys = scene.systems['sync-system'];\r\n\r\n\t\tvar ref;\r\n\t\tvar key;\r\n\t\tvar dataRef;\r\n\t\tvar ownerRef;\r\n\t\tvar ownerId;\r\n\t\tvar isMine = false;\r\n\r\n\t\tvar component = this;\r\n\r\n\t\tcomponent.isConnected = false;\r\n\r\n\t\tif(syncSys.isConnected) start(); else scene.addEventListener('connected', start);\r\n\r\n\r\n\t\tif(component.data.ownOn)\r\n\t\t{\r\n\t\t\tvar ownershipEvents = component.data.ownOn.split(/[ ,]+/);\r\n\t\t\tfor(var i = 0, max = ownershipEvents.length; i < max; i++){\r\n\t\t\t\tcomponent.el.addEventListener(ownershipEvents[i], function(){\r\n\t\t\t\t\tif(component.isConnected){\r\n\t\t\t\t\t\tcomponent.takeOwnership();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction start(){\r\n\t\t\t//Make sure someone always owns an object. If the owner leaves and we are the master client, we will take it.\r\n\t\t\t//This ensures, for example, that synced animations keep playing\r\n\t\t\tscene.addEventListener('clientleft', function(event){\r\n\t\t\t\tvar shouldTakeOwnership = (!ownerId || ownerId === event.detail.id) && syncSys.isMasterClient;\r\n\r\n\t\t\t\tif(shouldTakeOwnership) component.takeOwnership();\r\n\t\t\t});\r\n\r\n\t\t\tif (component.data.mode === 'link') {\r\n\t\t\t\tvar id = component.el.id;\r\n\t\t\t\tif (!id) {\r\n\t\t\t\t\tconsole.error('Entities cannot be synced using link mode without an id.');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log('syncSys: ' + syncSys);\r\n\t\t\t\tconsole.log('syncSys.sceneRef: ' + syncSys.sceneRef);\r\n\r\n\t\t\t\tlink(syncSys.sceneRef.child(id));\r\n\t\t\t\tsetupReceive();\r\n\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error('Unsupported sync mode: ' + component.data.mode);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tcomponent.isConnected = true;\r\n\t\t\tcomponent.el.emit('connected', null, false);\r\n\t\t}\r\n\r\n\t\tfunction link(entityRef) {\r\n\t\t\tref = entityRef;\r\n\t\t\tkey = ref.key();\r\n\t\t\tdataRef = ref.child('data');\r\n\t\t\tcomponent.dataRef = dataRef;\r\n\t\t\townerRef = ref.child('owner');\r\n\t\t}\r\n\r\n\t\tfunction setupReceive() {\r\n\r\n\t\t\t//if nobody has owned the object yet, we will.\r\n\t\t\townerRef.transaction(function (owner) {\r\n\t\t\t\tif (owner) return undefined;\r\n\r\n\t\t\t\townerRef.onDisconnect().set(null);\r\n\t\t\t\treturn syncSys.clientId;\r\n\t\t\t});\r\n\r\n\t\t\townerRef.on('value',\r\n\t\t\t\tfunction(snapshot) {\r\n\t\t\t\t\tvar newOwnerId = snapshot.val();\r\n\r\n\t\t\t\t\tvar gained = newOwnerId === syncSys.clientId && !isMine;\r\n\t\t\t\t\tif (gained) component.el.emit('ownershipgained', null, false);\r\n\r\n\r\n\t\t\t\t\t//note this also fires when we start up without ownership\r\n\t\t\t\t\tvar lost = newOwnerId !== syncSys.clientId && isMine;\r\n\t\t\t\t\tif (lost){\r\n\t\t\t\t\t\tcomponent.el.emit('ownershiplost', null, false);\r\n\r\n\t\t\t\t\t\t//we no longer have to clear our ownership when we disconnect\r\n\t\t\t\t\t\townerRef.onDisconnect().cancel();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\townerId = newOwnerId;\r\n\r\n\t\t\t\t\tisMine = newOwnerId === syncSys.clientId;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Tell sync to start pushing local property values instead of updating\r\n\t\t* local from remote values.\r\n\t\t* @method sync.sync#takeOwnership\r\n\t\t*/\r\n\t\tcomponent.takeOwnership = function() {\r\n\t\t\townerRef.set(syncSys.clientId);\r\n\r\n\t\t\t//clear our ownership if we disconnect\r\n\t\t\t//this is needed if we are the last user in the room, but we expect people to join later\r\n\t\t\townerRef.onDisconnect().set(null);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* Indicates whether the sync ownership is yours.\r\n\t\t* @member sync.sync#isMine\r\n\t\t* @readonly\r\n\t\t*/\r\n\t\tObject.defineProperty(component, 'isMine', {\r\n\t\t\tget: function () {\r\n\t\t\t\treturn isMine;//TODO: Should this be state instead?\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\r\n * The wire component allows you to trigger an event on another entity when an event occurs on an entity\r\n * @mixin wire\r\n * @property {string} on Name of an event to listen to\r\n * @property {string} gained Name of a state to watch for\r\n * @property {string} lost Name of a state to watch for\r\n * @property {string} emit Name of an event to trigger on the targets\r\n * @property {string} gain Name of a state to add on the target\r\n * @property {string} lose Name of a state to remove on the target\r\n * @property {selector} targets A selector to pick which objects to wire to\r\n * @property {selector} target - A selector to pick a single object to wire to\r\n **/\r\nAFRAME.registerComponent('wire',\r\n{\r\n\tmultiple: true,\r\n\tschema: {\r\n\t\ton: {type: 'string'},\r\n\t\temit: {type: 'string'},\r\n\t\tgained: {type: 'string'},\r\n\t\tlost: {type: 'string'},\r\n\t\tgain: {type: 'string'},\r\n\t\tlose: {type: 'string'},\r\n\t\ttargets: {type: 'selectorAll'},\r\n\t\ttarget: {type: 'selector'}\r\n\t},\r\n\tupdate: function (oldData) {\r\n\t\tif (oldData.on) {\r\n\t\t\tthis.el.removeEventListener(oldData.on, this.actOnTargets);\r\n\t\t}\r\n\t\tif (oldData.gained) {\r\n\t\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\r\n\t\t}\r\n\t\tif (oldData.lost) {\r\n\t\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\r\n\t\t}\r\n\r\n\t\tthis.actOnTargets = function () {\r\n\t\t\tfunction act(el) {\r\n\t\t\t\tif (this.data.emit) {\r\n\t\t\t\t\tel.emit(this.data.emit);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.data.gain) {\r\n\t\t\t\t\tel.addState(this.data.gain);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.data.lose) {\r\n\t\t\t\t\tel.removeState(this.data.lose);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.data.targets) this.data.targets.forEach(act.bind(this));\r\n\t\t\tif(this.data.target) act.call(this, this.data.target);\r\n\t\t}.bind(this);\r\n\r\n\t\tthis.actOnTargetsIfStateMatches = function (event) {\r\n\t\t\tvar state = event.detail.state;\r\n\t\t\tif (state === this.data.gained || state === this.data.lost) {\r\n\t\t\t\tthis.actOnTargets();\r\n\t\t\t}\r\n\t\t}.bind(this);\r\n\r\n\t\tif (this.data.on) {\r\n\t\t\tthis.el.addEventListener(this.data.on, this.actOnTargets);\r\n\t\t}\r\n\t\tif (this.data.gained) {\r\n\t\t\tthis.el.addEventListener('stateadded', this.actOnTargetsIfStateMatches);\r\n\t\t}\r\n\t\tif (this.data.lost) {\r\n\t\t\tthis.el.addEventListener('stateremoved', this.actOnTargetsIfStateMatches);\r\n\t\t}\r\n\t},\r\n\tremove: function () {\r\n\t\tthis.el.removeEventListener(this.data.on, this.actOnTargets);\r\n\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\r\n\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\r\n\t}\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/wire.js\n ** module id = 11\n ** module chunks = 0\n **/"],"sourceRoot":""}