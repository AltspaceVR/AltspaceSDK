{"version":3,"sources":["webpack:///aframe-altspace-component.min.js","webpack:///webpack/bootstrap deb2d37f29db832cfa1b","webpack:///./src/index.js","webpack:///./src/altspace-cursor-collider.js","webpack:///./src/altspace-tracked-controls.js","webpack:///./src/altspace.js","webpack:///./src/instantiator.js","webpack:///./src/native-components.js","webpack:///./src/one-per-user.js","webpack:///./src/sync-color.js","webpack:///./src/sync-n-skeleton-parent.js","webpack:///./src/sync-n-sound.js","webpack:///./src/sync-system.js","webpack:///./src/sync-transform.js","webpack:///./src/sync.js","webpack:///./src/wire.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","AFRAME","Error","setColliderFlag","obj","state","userData","altspace","collider","enabled","traverse","THREE","Mesh","registerComponent","schema","default","init","this","el","object3D","data","addEventListener","bind","update","gamepadIndex","trackedControlsSystem","document","querySelector","systems","systemGamepads","getGamepads","tick","controllers","length","window","components","hand","controller","setAttribute","version","usePixelScale","type","verticalAlign","enclosuresOnly","fullspace","Scene","inClient","initRenderer","initCursorEvents","initCollisionEvents","console","warn","t","dt","updateAllBehaviors","remove","pause","play","scene","getEnclosure","then","e","requestFullspace","scale","setScalar","pixelsPerMeter","position","y","innerHeight","innerDepth","renderer","render","effect","oldRenderer","getThreeJSRenderer","aframeComponentVersion","noop","setSize","setPixelRatio","setClearColor","clear","enableScissorTest","setScissor","setViewport","getPixelRatio","getMaxAnisotropy","setFaceCulling","context","canvas","shadowMap","cursorEl","emit","eventName","event","targetEl","target","ray","point","cursordownObj","uuid","addState","removeState","other","on","mixin","parent","group","removeLast","onHandler","instantiateOrToggle","syncSys","sceneEl","userGroup","userInfo","userId","lastInstantiatorId","instantiate","removeEventListener","meshInit","mesh","addNativeComponent","name","nativeComponentInit","getOrCreateObject3D","PlaceholderMesh","currentMesh","detail","removeNativeComponent","object3DMap","nativeComponentRemove","nativeComponentUpdate","updateNativeComponent","callComponent","functionName","functionArguments","callNativeComponent","placeholderGeometry","BoxGeometry","placeholderMaterial","MeshBasicMaterial","color","visible","prototype","Object","create","constructor","res","text","fontSize","width","height","horizontalAlign","isTrigger","center","radius","size","direction","_forEachMesh","func","childObj","_initObj","convex","component","count","capacity","src","startsWith","location","origin","currPath","pathname","endsWith","split","slice","join","pauseSound","playSound","seek","time","playHandler","oldData","loop","volume","autoplay","oneshot","spatialBlend","pitch","minDistance","maxDistance","rolloff","part","side","index","parentNode","dependencies","start","colorRef","sync","dataRef","child","refChangedLocked","firstValue","newData","isMine","setTimeout","set","snapshot","val","isConnected","_start","getDataRef","propertyName","attributeRef","dataset","creatorUserId","assign","sendEvent","sender","clientId","Date","now","soundEventRef","soundStateRef","sound","off","registerSystem","author","app","instance","refUrl","system","queuedInstantiations","Promise","all","utilities","connect","authorId","appId","instanceId","baseRefUrl","getUser","results","connection","shift","sceneRef","clientsRef","instantiatedElementsRef","listenToInstantiationGroup","stopListeningToInstantiationGroup","masterClientId","clientIds","masterClientKey","keys","childSnapshot","joinedClientId","leftClientId","push","onDisconnect","once","shouldInitialize","ref","processQueuedInstantiations","defineProperty","get","createElement","removeElement","forEach","instantiationProps","groupName","instantiatorId","error","parentWithId","parentIsScene","nodeName","parentSelector","resolve","orderByKey","limitToLast","hasChildren","key","entityEl","appendChild","removeChild","onTransform","componentName","value","onComponentChanged","sendPosition","sendRotation","sendScale","throttle","wait","options","timeout","args","result","previous","later","leading","apply","throttled","remaining","arguments","clearTimeout","trailing","cancel","positionRef","rotationRef","scaleRef","updateRate","stoppedAnimations","children","i","tagName","toLowerCase","stop","animation","mode","ownOn","shouldTakeOwnership","ownerId","isMasterClient","takeOwnership","link","setupReceive","entityRef","ownerRef","transaction","owner","committed","newOwnerId","gained","lost","ownershipEvents","max","multiple","gain","lose","targets","actOnTargets","actOnTargetsIfStateMatches","act"],"mappings":"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","file":"aframe-altspace-component.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tif (typeof AFRAME === 'undefined') {\n\t  throw new Error('Component attempted to register before AFRAME was available.');\n\t}\n\t\n\t__webpack_require__(3);\n\t__webpack_require__(1);\n\t__webpack_require__(2);\n\t__webpack_require__(5);\n\t__webpack_require__(6);\n\t__webpack_require__(13);\n\t__webpack_require__(11);\n\t__webpack_require__(12);\n\t__webpack_require__(8);\n\t__webpack_require__(10);\n\t__webpack_require__(9);\n\t__webpack_require__(7);\n\t__webpack_require__(4);\n\t__webpack_require__(14);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t(function(){\n\t\n\t\tfunction setColliderFlag(obj, state) {\n\t\t\tobj.userData.altspace = {collider: {enabled: state}};\n\t\t\tobj.traverse(function (obj) {\n\t\t\t\tif (obj instanceof THREE.Mesh) {\n\t\t\t\t\tobj.userData.altspace = {collider: {enabled: state}};\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\n\t\t/**\n\t\t* Enable or disable cursor collision on the object.\n\t\t* @mixin altspace-cursor-collider\n\t\t* @memberof altspace\n\t\t* @prop {boolean} enabled=true - The state of the cursor collider.\n\t\t*/\n\t\tAFRAME.registerComponent('altspace-cursor-collider', {\n\t\t\tschema: { enabled: { default: true } },\n\t\t\tinit: function () {\n\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\n\t\t\t\tthis.el.addEventListener('model-loaded', (function(){\n\t\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\n\t\t\t\t}).bind(this));\n\t\t\t},\n\t\t\tupdate: function () {\n\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\n\t\t\t}\n\t\t});\n\t\n\t})();\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/**\n\t* Enables tracked control support for A-Frame applications that use the built-in\n\t* `tracked-controls`, `vive-controls` or `hand-controls` components.\n\t* @mixin altspace-tracked-controls\n\t* @memberof altspace\n\t*/\n\tAFRAME.registerComponent('altspace-tracked-controls', {\n\t  init: function () {\n\t\tthis.gamepadIndex = null;\n\t\tthis.trackedControlsSystem = document.querySelector('a-scene').systems['tracked-controls'];\n\t\tthis.systemGamepads = 0;\n\t\taltspace.getGamepads();\n\t  },\n\t  tick: function () {\n\t\t  if (\n\t\t\tthis.trackedControlsSystem &&\n\t\t\tthis.systemGamepads !== this.trackedControlsSystem.controllers.length &&\n\t\t\twindow.altspace && altspace.getGamepads && altspace.getGamepads().length\n\t\t  ) {\n\t\t\tvar components = this.el.components;\n\t\t\tif (components['paint-controls']) {\n\t\t\t  this.gamepadIndex = components['paint-controls'].data.hand === 'left' ? 2 : 1;\n\t\t\t}\n\t\t\tif (this.gamepadIndex === null && components['hand-controls']) {\n\t\t\t  this.gamepadIndex = components['hand-controls'].data === 'left' ? 2 : 1;\n\t\t\t}\n\t\t\tif (this.gamepadIndex === null && components['vive-controls']) {\n\t\t\t  this.gamepadIndex = components['vive-controls'].data.hand === 'left' ? 2 : 1;\n\t\t\t}\n\t\t\tif (this.gamepadIndex === null && components['tracked-controls']) {\n\t\t\t  this.gamepadIndex = components['tracked-controls'].data.controller;\n\t\t\t}\n\t\t\tthis.el.setAttribute('tracked-controls', 'id', altspace.getGamepads()[this.gamepadIndex].id);\n\t\t\tthis.el.setAttribute('tracked-controls', 'controller', 0);\n\t\t\tthis.systemGamepads = this.trackedControlsSystem.controllers.length;\n\t\t  }\n\t  }\n\t});\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/**\n\t* @namespace altspace\n\t*/\n\t\n\t/**\n\t* The altspace component makes A-Frame apps compatible with AltspaceVR.\n\t*\n\t* **Note**: If you use the `embedded` A-Frame component on your scene, you must include it *before* the `altspace` component, or your app will silently fail.\n\t* @mixin altspace\n\t* @memberof altspace\n\t* @property {boolean} usePixelScale=`false` - Allows you to use A-Frame units as CSS pixels.\n\t* This is the default behavior for three.js apps, but not for A-Frame apps.\n\t* @property {string} verticalAlign=`middle` - Puts the origin at the `bottom`, `middle` (default),\n\t* or `top` of the Altspace enclosure.\n\t* @property {boolean} enclosuresOnly=`true` - Prevents the scene from being created if\n\t* enclosure is flat.\n\t* @property {boolean} fullspace=`false` - Puts the app into fullspace mode.\n\t*\n\t* @example\n\t* <head>\n\t*   <title>My A-Frame Scene</title>\n\t*   <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\n\t*   <script src=\"https://cdn.rawgit.com/AltspaceVR/aframe-altspace-component/v1.3.2/dist/aframe-altspace-component.min.js\"></script>\n\t* </head>\n\t* <body>\n\t*   <a-scene altspace>\n\t*     <a-entity geometry=\"primitive: box\" material=\"color: #C03546\"></a-entity>\n\t*   </a-scene>\n\t* </body>\n\t*/\n\tAFRAME.registerComponent('altspace', {\n\t  version: '1.3.2',\n\t  schema: {\n\t\tusePixelScale: { type: 'boolean', default: 'false'},\n\t\tverticalAlign: { type: 'string',  default: 'middle'},\n\t\tenclosuresOnly:{ type: 'boolean', default: 'true'},\n\t\tfullspace:     { type: 'boolean', default: 'false'}\n\t  },\n\t\n\t  /*\n\t   * Called once when component is attached. Generally for initial setup.\n\t   */\n\t  init: function () {\n\t\tif (!(this.el.object3D instanceof THREE.Scene)) {\n\t\t  console.warn('aframe-altspace-component can only be attached to a-scene');\n\t\t  return;\n\t\t}\n\t\n\t\tif (window.altspace && window.altspace.inClient) {\n\t\t  this.el.setAttribute('vr-mode-ui', {enabled: false});\n\t\t  this.initRenderer();\n\t\t  this.initCursorEvents();\n\t\t  this.initCollisionEvents();\n\t\t} else {\n\t\t  console.warn('aframe-altspace-component only works inside of AltspaceVR');\n\t\t}\n\t\n\t  },\n\t\n\t  /*\n\t   * Called on every single tick or render loop of the scene.\n\t   */\n\t  tick: function (t, dt) {\n\t      if(this.el.object3D.updateAllBehaviors)\n\t        this.el.object3D.updateAllBehaviors();\n\t  },\n\t\n\t  /*\n\t   * Called when a component is removed (e.g., via removeAttribute).\n\t   * Generally undoes all modifications to the entity.\n\t   */\n\t  remove: function () { },\n\t\n\t  /*\n\t   * Called on each scene tick.\n\t   */\n\t  // tick: function (t) { },\n\t\n\t  /*\n\t   * Called when entity pauses.\n\t   * Use to stop or remove any dynamic or background behavior such as events.\n\t   */\n\t  pause: function () { },\n\t\n\t  /*\n\t   * Called when entity resumes.\n\t   * Use to continue or add any dynamic or background behavior such as events.\n\t   */\n\t  play: function () { },\n\t\n\t\n\t  /********** Helper Methods **********/\n\t\n\t  /*\n\t   * Swap in Altspace renderer when running in AltspaceVR.\n\t   */\n\t  initRenderer: function () {\n\t\n\t\tvar scene = this.el.object3D;\n\t\taltspace.getEnclosure().then(function(e)\n\t\t{\n\t\t\tif(this.data.fullspace){\n\t\t\t\te.requestFullspace();\n\t\t\t\te.addEventListener('fullspacechange', function(){\n\t\t\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tif (!this.data.usePixelScale || this.data.fullspace){\n\t\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\n\t\t\t}\n\t\n\t\t  switch (this.data.verticalAlign) {\n\t\t\tcase 'bottom':\n\t\t\t  scene.position.y -= e.innerHeight / 2;\n\t\t\t  break;\n\t\t\tcase 'top':\n\t\t\t  scene.position.y += e.innerHeight / 2;\n\t\t\t  break;\n\t\t\tcase 'middle':\n\t\t\t  break;\n\t\t\tdefault:\n\t\t\t  console.warn('Unexpected value for verticalAlign: ', this.data.verticalAlign);\n\t\t  }\n\t\n\t\t  if(this.data.enclosuresOnly && e.innerDepth === 1){\n\t\t\tthis.el.renderer.render(new THREE.Scene());\n\t\t\tthis.el.renderer = this.el.effect = oldRenderer;\n\t\n\t\t  }\n\t\t}.bind(this));\n\t\n\t\tvar oldRenderer = this.el.renderer;\n\t\tvar renderer = this.el.renderer = this.el.effect = altspace.getThreeJSRenderer({\n\t\t  aframeComponentVersion: this.version\n\t\t});\n\t\tvar noop = function() {};\n\t\trenderer.setSize = noop;\n\t\trenderer.setPixelRatio = noop;\n\t\trenderer.setClearColor = noop;\n\t\trenderer.clear = noop;\n\t\trenderer.enableScissorTest = noop;\n\t\trenderer.setScissor = noop;\n\t\trenderer.setViewport = noop;\n\t\trenderer.getPixelRatio = noop;\n\t\trenderer.getMaxAnisotropy = noop;\n\t\trenderer.setFaceCulling = noop;\n\t\trenderer.context = {canvas: {}};\n\t\trenderer.shadowMap = {};\n\t\n\t  },\n\t\n\t  /*\n\t   * Emulate A-Frame cursor events when running in altspaceVR.\n\t   */\n\t  initCursorEvents: function() {\n\t\n\t\tvar scene = this.el.object3D;\n\t\tvar cursorEl = document.querySelector('a-cursor') || document.querySelector('a-entity[cursor]');\n\t\tif (cursorEl) {\n\t\t  // Hide A-Frame cursor mesh.\n\t\t  cursorEl.setAttribute('material', 'transparent', true);\n\t\t  cursorEl.setAttribute('material', 'opacity', 0.0);\n\t\t}\n\t\n\t\tvar emit = function (eventName, event) {\n\t\t\t// Fire events on intersected object and A-Frame cursor.\n\t\t\tvar targetEl = event.target.el;\n\t\t\tif (cursorEl) cursorEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\n\t\t\tif (targetEl) targetEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\n\t\t} ;\n\t\n\t\tvar cursordownObj = null;\n\t\tscene.addEventListener('cursordown', function(event) {\n\t\t  cursordownObj = event.target;\n\t\t  emit('mousedown', event);\n\t\t});\n\t\n\t\tscene.addEventListener('cursorup', function(event) {\n\t\t  emit('mouseup', event);\n\t\t  if (event.target.uuid === cursordownObj.uuid) {\n\t\t\temit('click', event);\n\t\t  }\n\t\t  cursordownObj = null;\n\t\t});\n\t\n\t\tscene.addEventListener('cursorenter', function(event) {\n\t\t  if (!event.target.el) { return; }\n\t\t  event.target.el.addState('hovered');\n\t\t  if (cursorEl) cursorEl.addState('hovering');\n\t\t  emit('mouseenter', event);\n\t\t});\n\t\n\t\tscene.addEventListener('cursorleave', function(event) {\n\t\t  if (!event.target.el) { return; }\n\t\t  event.target.el.removeState('hovered');\n\t\t  if (cursorEl) cursorEl.removeState('hovering');\n\t\t  emit('mouseleave', event);\n\t\t});\n\t\n\t  },\n\t\n\t  initCollisionEvents: function () {\n\t\n\t\tvar scene = this.el.object3D;\n\t\n\t\tvar emit = function (eventName, event) {\n\t\t\tvar targetEl = event.target.el;\n\t\t\tif (!targetEl) return;\n\t\n\t\t\t//remap target and other from object3Ds to aframe element\n\t\t\tevent.target = targetEl;\n\t\t\tif (event.other && event.other.el) {\n\t\t\t\tevent.other = event.other.el;\n\t\t\t}\n\t\t\ttargetEl.emit(eventName, event);\n\t\t};\n\t\n\t\tscene.addEventListener('collisionenter', function (event) {\n\t\t\temit('collisionenter', event);\n\t\t});\n\t\n\t\tscene.addEventListener('collisionexit', function (event) {\n\t\t\temit('collisionexit', event);\n\t\t});\n\t\n\t\tscene.addEventListener('triggerenter', function (event) {\n\t\t\temit('triggerenter', event);\n\t\t});\n\t\n\t\tscene.addEventListener('triggerexit', function (event) {\n\t\t\temit('triggerexit', event);\n\t\t});\n\t\n\t  }\n\t\n\t});\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t/**\n\t* Instantiates objects on an event trigger, adds them to the scene and syncs their creation across clients.\n\t* The instantiated objects are built using the specified mixins.\n\t* @mixin instantiator\n\t* @memberof sync\n\t* @prop {string} on - An event that triggers the instantiation\n\t* @prop {string} mixin - A space-separated list of mixins that should be used to instantiate the object.\n\t* @prop {string} parent='a-scene' - A selector that determines which object the instantiated object will be added to.\n\t* @prop {string} group='main' - An identifier which can be used to group instantiated objects.\n\t* @prop {boolean} removeLast=true - Whether the last object instantiated in a group should be removed before\n\t*\tinstantiating a new object.\n\t*/\n\tAFRAME.registerComponent('instantiator', {\n\t\tschema: {\n\t\t\ton: {type: 'string'},\n\t\t\tmixin: {type: 'string'},\n\t\t\tparent: {type: 'selector', default: 'a-scene'},\n\t\t\tgroup: {type: 'string', default: 'main'},\n\t\t\tremoveLast: {type: 'boolean', default: 'true'},\n\t\t},\n\t\tinit: function () {\n\t\t\tthis.onHandler = this.instantiateOrToggle.bind(this);\n\t\t\tthis.el.addEventListener(this.data.on, this.onHandler);\n\t\t\tthis.syncSys = this.el.sceneEl.systems['sync-system'];\n\t\t},\n\t\tinstantiateOrToggle: function () {\n\t\t\tvar userGroup = this.data.group + '-' + this.syncSys.userInfo.userId;\n\t\t\tif (this.data.removeLast) {\n\t\t\t\tthis.syncSys.removeLast(userGroup).then(function (lastInstantiatorId) {\n\t\t\t\t\tif (lastInstantiatorId !== this.el.id) {\n\t\t\t\t\t\tthis.syncSys.instantiate(this.data.mixin, this.data.parent, this.el, userGroup, this.el.id)\n\t\t\t\t\t}\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.syncSys.instantiate(this.el.id, userGroup, this.data.mixin, this.data.parent)\n\t\t\t}\n\t\t},\n\t\tremove: function () {\n\t\t\tthis.el.removeEventListener(this.data.on, this.onHandler);\n\t\t}\n\t});\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\n\t/**\n\t* This set of components map to various objects and effects that are provided\n\t* natively by AltspaceVR. Your management of these objects may be limited to\n\t* some degree, but they will tend to be more performant than SDK equivalents,\n\t* or may provide some functionality not otherwise available to the SDK.\n\t* @namespace native\n\t*/\n\t(function () {\n\t\tif (!window.altspace || !altspace.inClient) {\n\t\t\tvar noop = function () {};\n\t\t\twindow.altspace = {\n\t\t\t\taddNativeComponent: noop,\n\t\t\t\tupdateNativeComponent: noop,\n\t\t\t\tremoveNativeComponent: noop\n\t\t\t};\n\t\t}\n\t\n\t\tvar placeholderGeometry = new THREE.BoxGeometry(0.001, 0.001, 0.001);\n\t\tvar placeholderMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n\t\tplaceholderMaterial.visible = false;\n\t\tvar PlaceholderMesh = function () {\n\t\t\tTHREE.Mesh.call( this, placeholderGeometry, placeholderMaterial );\n\t\t};\n\t\tPlaceholderMesh.prototype = Object.create( THREE.Mesh.prototype );\n\t\tPlaceholderMesh.prototype.constructor = THREE.PlaceholderMesh;\n\t\n\t\tfunction meshInit(mesh) {\n\t\t\t//If you attach native components to an entity, it will not use a default collider\n\t\t\tmesh.userData.altspace = mesh.userData.altspace || {};\n\t\t\tmesh.userData.altspace.collider = mesh.userData.altspace.collider || {};\n\t\t\tmesh.userData.altspace.collider.enabled = false;\n\t\n\t\t\taltspace.addNativeComponent(mesh, this.name);\n\t\t}\n\t\n\t\tfunction nativeComponentInit() {\n\t\t\tvar mesh = this.el.getOrCreateObject3D('mesh', PlaceholderMesh);\n\t\t\tthis.currentMesh = mesh;\n\t\t\tmeshInit.call(this, mesh);\n\t\t\t//to pass defaults\n\t\t\tthis.update(this.data);\n\t\n\t\t\tthis.el.addEventListener('object3dset', function (event) {\n\t\t\t\tif (event.detail.type !== 'mesh') { return; }\n\t\t\t\taltspace.removeNativeComponent(this.currentMesh, this.name);\n\t\n\t\t\t\tthis.currentMesh = this.el.object3DMap.mesh;\n\t\t\t\tmeshInit.call(this, this.currentMesh);\n\t\t\t\t//to pass defaults\n\t\t\t\tthis.update(this.data);\n\t\t\t}.bind(this));\n\t\t}\n\t\tfunction nativeComponentRemove() {\n\t\t\taltspace.removeNativeComponent(this.el.object3DMap.mesh, this.name);\n\t\t}\n\t\tfunction nativeComponentUpdate() {\n\t\t\taltspace.updateNativeComponent(this.el.object3DMap.mesh, this.name, this.data);\n\t\t}\n\t\n\t\tfunction callComponent(functionName, functionArguments) {\n\t\t\taltspace.callNativeComponent(this.el.object3DMap.mesh, this.name, functionName, functionArguments)\n\t\t}\n\t\n\t\t/**\n\t\t* Attach a given native object to this entity.\n\t\t* @mixin n-object\n\t\t* @memberof native\n\t\t* @prop {string} res - The identifier for the resource you want. This component\n\t\t* can accept all resources except for `interactables`.\n\t\t* @example <a-entity n-object='res:architecture/wall-4w-4h'></a-entity>\n\t\t*/\n\t\tAFRAME.registerComponent('n-object', {\n\t\t\tschema: {\n\t\t\t\tres: {type: 'string'}\n\t\t\t},\n\t\t\tinit: nativeComponentInit,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tremove: nativeComponentRemove\n\t\t});\n\t\n\t\t/**\n\t\t* Create an object that spawns additional copies of itself when grabbed by a user (the copies are not spawners themselves).\n\t\t* These copies will be physically interactive and automatically synchronized\n\t\t* between users.\n\t\t* @mixin n-spawner\n\t\t* @memberof native\n\t\t* @prop {string} res - The identifier for the resource you want. This component\n\t\t* can only accept resources of type `interactables`.\n\t\t* @example <a-entity n-spawner='res: interactables/basketball'></a-entity>\n\t\t*/\n\t\tAFRAME.registerComponent('n-spawner', {\n\t\t\tschema: {\n\t\t\t\tres: {type: 'string'}\n\t\t\t},\n\t\t\tinit: nativeComponentInit,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tremove: nativeComponentRemove\n\t\t});\n\t\n\t\t/**\n\t\t* Creates dynamic 2D text on the entity. The text will wrap automatically based on the width and height provided.\n\t\t* This text will be clearer than texture-based text and more performant than geometry-based test.\n\t\t* @mixin n-text\n\t\t* @memberof native\n\t\t* @prop {string} text - The text to be drawn.\n\t\t* @prop {number} fontSize=10 - The height of the letters. 10pt ~= 1m\n\t\t* @prop {number} width=10 - The width of the text area in meters. If the\n\t\t* text is wider than this value, the overflow will be wrapped to the next line.\n\t\t* @prop {number} height=1 - The height of the text area in meters. If the\n\t\t* text is taller than this value, the overflow will be cut off.\n\t\t* @prop {string} horizontalAlign=middle - The horizontal anchor point for\n\t\t* the text. Can be `left`, `middle`, or `right`.\n\t\t* @prop {string} verticalAlign=middle - The vertical anchor point for the\n\t\t* text. Can be `top`, `middle`, or `bottom`.\n\t\t*/\n\t\tAFRAME.registerComponent('n-text', {\n\t\t\tinit: nativeComponentInit,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tremove: nativeComponentRemove,\n\t\t\tschema: {\n\t\t\t\ttext: { default: '', type: 'string' },\n\t\t\t\t/*color: { default: 'white',\n\t\t\t\t\tparse: function(value) {\n\t\t\t\t\t\treturn parseFloat(value, 10);\n\t\t\t\t\t},\n\t\t\t\t\tstringify: function(value) {\n\t\t\t\t\t\treturn value.toString();\n\t\t\t\t\t}},*/\n\t\t\t\tfontSize: { default: '10', type: 'int' },//roughly a meter tall\n\t\t\t\twidth: { default: '10', type: 'number' },//in meters\n\t\t\t\theight: { default: '1', type: 'number' },//in meters\n\t\t\t\thorizontalAlign: { default: 'middle'},\n\t\t\t\tverticalAlign: { default: 'middle'}\n\t\t\t}\n\t\t});\n\t\n\t\t//object: collides against: objects / enviroment / cursor\n\t\t//environment: can be teleported onto, and collides against: objects / environment / cursor\n\t\t//hologram: collides against: cursor / holograms\n\t\n\t\t/**\n\t\t* Abstract base class for {@link n.n-sphere-collider}, {@link n.n-box-collider},\n\t\t* {@link n.n-capsule-collider}, and {@link n.n-mesh-collider}. You cannot use\n\t\t* this class directly, but instead you should add one of those components\n\t\t* to your objects.\n\t\t* @name n-collider\n\t\t* @mixin n-collider\n\t\t* @memberof native\n\t\t* @prop {vec3} center=0,0,0 - The offset of the collider in local space.\n\t\t* @prop {string} type=hologram - The type of collider, one of: `object` | `environment` | `hologram`.\n\t\t* Object colliders collide with other objects, the environment, and the cursor.\n\t\t* Environment colliders collide with everything objects do, but you can also\n\t\t* teleport onto them. Hologram colliders only collide with other holograms and\n\t\t* the cursor.\n\t\t*/\n\t\n\t\t/**\n\t\t* Create a spherical collider on this entity.\n\t\t* @mixin n-sphere-collider\n\t\t* @memberof native\n\t\t* @extends native.n-collider\n\t\t* @prop {number} radius=1 - The size of the collider in meters.\n\t\t*/\n\t\tAFRAME.registerComponent('n-sphere-collider', {\n\t\t\tinit:nativeComponentInit,\n\t\t\tremove: nativeComponentRemove,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tschema: {\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\t\tcenter: { type: 'vec3' },\n\t\t\t\tradius: { default: '0', type: 'number' },\n\t\t\t\ttype: {default: 'object'}\n\t\t\t}\n\t\t});\n\t\n\t\n\t\t/**\n\t\t* Create a box-shaped collider on this entity.\n\t\t* @mixin n-box-collider\n\t\t* @memberof native\n\t\t* @extends native.n-collider\n\t\t* @prop {vec3} size=1,1,1 - The dimensions of the collider.\n\t\t*/\n\t\tAFRAME.registerComponent('n-box-collider', {\n\t\t\tinit:nativeComponentInit,\n\t\t\tremove: nativeComponentRemove,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tschema: {\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\t\tcenter: { type: 'vec3' },\n\t\t\t\tsize: { type: 'vec3' },\n\t\t\t\ttype: {default: 'object'}\n\t\t\t}\n\t\t});\n\t\n\t\t/**\n\t\t* Create a capsule-shaped collider on this entity. Capsules\n\t\t* are a union of a cylinder and two spheres on top and bottom.\n\t\t* @mixin n-capsule-collider\n\t\t* @memberof native\n\t\t* @extends native.n-collider\n\t\t* @prop {number} radius=1 - The radius of the capsule in meters.\n\t\t* @prop {number} height=1 - The height of the shaft of the capsule in meters.\n\t\t* @prop {string} direction=y - The axis with which the capsule is aligned.\n\t\t* One of `x`, `y`, or `z`.\n\t\t*/\n\t\tAFRAME.registerComponent('n-capsule-collider', {\n\t\t\tinit:nativeComponentInit,\n\t\t\tremove: nativeComponentRemove,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tschema: {\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\t\tcenter: { type: 'vec3' },\n\t\t\t\tradius: { default: '0', type: 'number' },\n\t\t\t\theight: { default: '0', type: 'number' },\n\t\t\t\tdirection: { default: 'y' },\n\t\t\t\ttype: {default: 'object'}\n\t\t\t}\n\t\t});\n\t\n\t\t/**\n\t\t* Enable collision for the entire attached mesh. This is expensive to evaluate, so should only be used on\n\t\t* low-poly meshes.\n\t\t* @mixin n-mesh-collider\n\t\t* @memberof native\n\t\t* @extends native.n-collider\n\t\t* @example <a-box n-mesh-collider></a-box>\n\t\t* @prop {bool} convex=true - Whether the collider should be convex or concave. Set this to false if you have holes\n\t\t* in your mesh. Convex colliders are limited to 255 triangles. Note: concave colliders can be significantly more\n\t\t* expensive comparet to conves colliders.\n\t\t*/\n\t\tAFRAME.registerComponent('n-mesh-collider', {\n\t\t\t_forEachMesh: function (func) {\n\t\t\t\tvar obj = this.el.object3DMap.mesh;\n\t\t\t\tif (!obj) { return; }\n\t\t\t\tif (obj instanceof THREE.Mesh) {\n\t\t\t\t\tfunc(obj);\n\t\t\t\t}\n\t\t\t\tobj.traverse(function (childObj) {\n\t\t\t\t\tif (childObj instanceof THREE.Mesh) {\n\t\t\t\t\t\tfunc(childObj);\n\t\t\t\t\t}\n\t\t\t\t}.bind(this));\n\t\t\t},\n\t\t\t_initObj: function () {\n\t\t\t\tthis._forEachMesh(function (mesh) {\n\t\t\t\t\tmeshInit.call(this, mesh);\n\t\n\t\t\t\t\t//to pass defaults\n\t\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\n\t\t\t\t}.bind(this));\n\t\t\t},\n\t\t\tinit: function () {\n\t\t\t\t// Allow a-frame to create a PlaceholderMesh if there isn't already one, so that the native collider is\n\t\t\t\t// registered.\n\t\t\t\tthis.el.getOrCreateObject3D('mesh', PlaceholderMesh);\n\t\n\t\t\t\t// Initialize the existing mesh\n\t\t\t\tthis._initObj();\n\t\n\t\t\t\tthis.el.addEventListener('model-loaded', function () {\n\t\t\t\t\t// Re-initialize the collider if a new model is loaded\n\t\t\t\t\tthis._initObj();\n\t\t\t\t}.bind(this));\n\t\t\t},\n\t\t\tremove: function () {\n\t\t\t\tthis._forEachMesh(function (mesh) {\n\t\t\t\t\taltspace.removeNativeComponent(mesh, this.name);\n\t\t\t\t}.bind(this));\n\t\t\t},\n\t\t\tupdate: function () {\n\t\t\t\tthis._forEachMesh(function (mesh) {\n\t\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\n\t\t\t\t}.bind(this));\n\t\t\t},\n\t\t\tschema: {\n\t\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\t\tconvex: { default: true, type: 'boolean' },\n\t\t\t\ttype: {default: 'object'}\n\t\t\t}\n\t\t});\n\t\n\t\t/**\n\t\t* Make the object's +Z always face the viewer. Currently will only directly apply to main mesh or native component on the attached entity, not any children or submeshes.\n\t\t* @mixin n-billboard\n\t\t* @memberof native\n\t\t* @example <a-plane n-billboard></a-plane>\n\t\t*/\n\t\tAFRAME.registerComponent('n-billboard', {\n\t\t\tinit:nativeComponentInit,\n\t\t\tremove: nativeComponentRemove,\n\t\t});\n\t\n\t\t/**\n\t\t* A container keeps a running tally of how many objects are within\n\t\t* its bounds, and adds and removes the states `container-full` and\n\t\t* `container-empty` based on the current count of objects. Can fire three\n\t\t* special events: `container-full`, `container-empty`, and `container-count-changed`.\n\t\t* @mixin n-container\n\t\t* @memberof native\n\t\t* @prop {number} capacity=4 - The value at which the container will fire the\n\t\t* `container-full` event.\n\t\t*/\n\t\tAFRAME.registerComponent('n-container', {\n\t\t\tinit: function(){\n\t\t\t\tnativeComponentInit.call(this);\n\t\n\t\t\t\tvar el = this.el;\n\t\t\t\tvar component = this;\n\t\n\t\t\t\tel.addEventListener('stateadded', function(event){\n\t\t\t\t\tif(event.detail.state === 'container-full'){\n\t\t\t\t\t\tel.emit('container-full');\n\t\t\t\t\t}\n\t\t\t\t\tif(event.detail.state === 'container-empty'){\n\t\t\t\t\t\tel.emit('container-empty');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tel.addEventListener('container-count-changed', function(event){\n\t\t\t\t\tcomponent.count = event.detail.count;\n\t\t\t\t});\n\t\t\t},\n\t\t\tremove: nativeComponentRemove,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tschema: {\n\t\t\t\tcapacity: { default: 4, type: 'number' },\n\t\t\t}\n\t\t});\n\t\n\t\t/**\n\t\t* Play the sound given by the `src` or `res` property from the location\n\t\t* of the entity.\n\t\t* @mixin n-sound\n\t\t* @memberof native\n\t\t* @prop {string} res - The resource identifier for a built-in sound clip.\n\t\t* @prop {string} src - A URL to an external sound clip. The sound can be in WAV, OGG or MP3 format. However. only\n\t\t* WAV is supported on all platforms. MP3 is supported on Gear VR and OGG is supported on desktop.\n\t\t* @prop {string} on - The name of the event that will play this sound clip.\n\t\t* @prop {boolean} loop=false - Tells the clip to loop back to the beginning of the clip\n\t\t* once it's finished.\n\t\t* @prop {boolean} autoplay=false - Tells the clip to start automatically when\n\t\t* the scene loads, instead of waiting for `playSound()`.\n\t\t* @prop {boolean} oneshot=false - Tells the clip to clean itself up when it\n\t\t* finishes playing. Allows for overlapping instances of the sound.\n\t\t* @prop {number} volume=1 - The volume of the clip, from [0,1].\n\t\t* @prop {number} spatialBlend=1 - How spatialized a sound is, from [0,1].\n\t\t* A value of 1 will be fully localized, and the sound will pan left and\n\t\t* right as you turn your head. A value of 0 makes it non-spatialized, and\n\t\t* it will always be heard in both ears.\n\t\t* @prop {number} pitch=1 - The speed multiplier for the sound. 0.5 is one\n\t\t* octave down, and 2 is one octave up.\n\t\t* @prop {number} minDistance=1 - Inside this distance in meters,\n\t\t* the sound volume is at full volume.\n\t\t* @prop {number} maxDistance=12 - If rolloff is 'logarithmic', the sound will stop attenuating at this distance.\n\t\t* If rolloff is 'linear' or 'cosine', the sound will be silent at this distance.\n\t\t* @prop {string} rolloff='logarithmic' - Set this to 'linear' or 'cosine' if you want to cut sounds off at a\n\t\t* maxDistance.\n\t\t*/\n\t\t/**\n\t\t* Fired when a sound has loaded and is ready to be played\n\t\t* @event native.n-sound#n-sound-loaded\n\t\t*/\n\t\tAFRAME.registerComponent('n-sound', {\n\t\t\tinit: function () {\n\t\t\t\tvar src = this.data.src;\n\t\t\t\tif (src && !src.startsWith('http')) {\n\t\t\t\t\tif (src.startsWith('/')) {\n\t\t\t\t\t\tthis.data.src = location.origin + src;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar currPath = location.pathname;\n\t\t\t\t\t\tif (!currPath.endsWith('/')) {\n\t\t\t\t\t\t\tcurrPath = location.pathname.split('/').slice(0, -1).join('/') + '/';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.data.src = location.origin + currPath + src;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnativeComponentInit.call(this);\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t* Stop the playing sound, and preserve position in clip.\n\t\t\t* @method native.n-sound#pauseSound\n\t\t\t*/\n\t\t\tpauseSound: function () {\n\t\t\t\tcallComponent.call(this, 'pause');\n\t\t\t\tthis.el.emit('sound-paused');\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t* Start the sound playing.\n\t\t\t* @method native.n-sound#playSound\n\t\t\t*/\n\t\t\tplaySound: function () {\n\t\t\t\tcallComponent.call(this, 'play');\n\t\t\t\tthis.el.emit('sound-played');\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t* Jump to a position in the clip.\n\t\t\t* @method native.n-sound#seek\n\t\t\t* @param {number} time - The time in milliseconds to jump to.\n\t\t\t*/\n\t\t\tseek: function (time) {\n\t\t\t\tcallComponent.call(this, 'seek', {time: time});\n\t\t\t},\n\t\t\tremove: function () {\n\t\t\t\tnativeComponentRemove.call(this);\n\t\t\t\tif (this.playHandler) {\n\t\t\t\t\tthis.el.removeEventListener(this.data.on, this.playHandler);\n\t\t\t\t}\n\t\t\t},\n\t\t\tupdate: function (oldData) {\n\t\t\t\tnativeComponentUpdate.call(this, oldData);\n\t\t\t\tif (this.playHandler) {\n\t\t\t\t\tthis.el.removeEventListener(oldData.on, this.playHandler);\n\t\t\t\t}\n\t\t\t\tif (this.data.on) {\n\t\t\t\t\tthis.playHandler = this.playSound.bind(this);\n\t\t\t\t\tthis.el.addEventListener(this.data.on, this.playHandler);\n\t\t\t\t}\n\t\t\t},\n\t\t\tschema: {\n\t\t\t\ton: { type: 'string' },\n\t\t\t\tres: { type: 'string' },\n\t\t\t\tsrc: { type: 'string' },\n\t\t\t\tloop: { type: 'boolean' },\n\t\t\t\tvolume: { type: 'number', default: 1 },\n\t\t\t\tautoplay: { type: 'boolean' },\n\t\t\t\toneshot: { type: 'boolean' },\n\t\t\t\tspatialBlend: { type: 'float', default: 1 },\n\t\t\t\tpitch: { type: 'float', default: 1 },\n\t\t\t\tminDistance: { type: 'float', default: 1 },\n\t\t\t\tmaxDistance: { type: 'float', default: 12 },\n\t\t\t\trolloff: { type: 'string', default: 'logarithmic' },\n\t\t\t}\n\t\t});\n\t\n\t\t/**\n\t\t* Parents an entity to a joint on the avatar skeleton.\n\t\t* @mixin n-skeleton-parent\n\t\t* @memberof native\n\t\t* @prop {string} part - One of 'eye, 'head', 'neck', 'spine', 'hips', 'upper-leg', 'lower-leg', 'foot', 'toes', \n\t\t*\t'shoulder', 'upper-arm', 'lower-arm', 'hand', 'thumb', 'index', 'middle', 'ring' or 'pinky'.\n\t\t* @prop {string} [side='center'] - Side of the body. Either 'left', 'center' or 'right'\n\t\t* @prop {int} [index=0] - Bone index. e.g. Which knuckle joint to attach to.\n\t\t* @prop {string} [userId] - Id of the user to which the entity should be attached. Defaults to the local user.\n\t\t*/\n\t\tAFRAME.registerComponent('n-skeleton-parent', {\n\t\t\tschema: {\n\t\t\t\tpart: {type: 'string'},\n\t\t\t\tside: {type: 'string', default: 'center'},\n\t\t\t\tindex: {type: 'int', default: 0},\n\t\t\t\tuserId: {type: 'string'}\n\t\t\t},\n\t\t\tinit: nativeComponentInit,\n\t\t\tupdate: nativeComponentUpdate,\n\t\t\tremove: nativeComponentRemove\n\t\t});\n\t\n\t\t/**\n\t\t* Parents an entity to the cockpit.\n\t\t* @mixin n-cockpit-parent\n\t\t* @memberof native\n\t\t*/\n\t\tAFRAME.registerComponent('n-cockpit-parent', {\n\t\t\tinit: nativeComponentInit,\n\t\t\tremove: nativeComponentRemove\n\t\t});\n\t\n\t\n\t})();\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// this file is just for good measure. didn't want native-components getting too cluttered.\n\t\n\t/**\n\t* This namespace describes strings that are valid inputs to the various native\n\t* components. Some components can only take certain types of resources, i.e.\n\t* {@link n.n-spawner} can only accept `interactables`.\n\t* @namespace resources\n\t* @example <a-entity n-object='res: architecture/ceiling-2w-2l'></a-entity>\n\t*/\n\t\n\t/**\n\t* Generic modular building pieces. All pieces are aligned to one corner, such that\n\t* the piece extends out toward -X and +Z.\n\t* @name architecture\n\t* @enum architecture\n\t* @memberof resources\n\t*\n\t* @prop architecture/ceiling-2w-2l\n\t* @prop architecture/ceiling-4w-4l\n\t* @prop architecture/ceiling-4w-4l\n\t* @prop architecture/ceiling-skylight-4w-4l\n\t* @prop architecture/ceiling-skylight-corner-2w-2l\n\t* @prop architecture/ceiling-skylight-edge-2w\n\t* @prop architecture/ceiling-skylight-edge-4w\n\t* @prop architecture/ceiling-skylight-filler-4w-4l-2\n\t* @prop architecture/ceiling-skylight-filler-4w-4l\n\t* @prop architecture/ceiling-slice-concave-2r\n\t* @prop architecture/ceiling-slice-concave-4r\n\t* @prop architecture/ceiling-slice-convex-2r\n\t* @prop architecture/ceiling-slice-convex-4r\n\t* @prop architecture/door-4w-4h\n\t* @prop architecture/floor-2w-2l\n\t* @prop architecture/floor-2w-4l\n\t* @prop architecture/floor-4w-2l\n\t* @prop architecture/floor-4w-4l\n\t* @prop architecture/floor-slice-concave-2r\n\t* @prop architecture/floor-slice-concave-4r\n\t* @prop architecture/floor-slice-convex-2r\n\t* @prop architecture/floor-slice-convex-4r\n\t* @prop architecture/railing-2l\n\t* @prop architecture/railing-4l\n\t* @prop architecture/railing-curve-concave-2r\n\t* @prop architecture/wall-2w-4h\n\t* @prop architecture/wall-4w-4h\n\t* @prop architecture/wall-base-2w\n\t* @prop architecture/wall-base-4w\n\t* @prop architecture/wall-base-curve-concave-2r\n\t* @prop architecture/wall-base-curve-concave-4r\n\t* @prop architecture/wall-base-curve-convex-2r\n\t* @prop architecture/wall-base-curve-convex-4r\n\t* @prop architecture/wall-bulkhead-2w\n\t* @prop architecture/wall-bulkhead-4w\n\t* @prop architecture/wall-bulkhead-curve-concave-2r\n\t* @prop architecture/wall-bulkhead-curve-concave-4r\n\t* @prop architecture/wall-bulkhead-curve-convex-2r\n\t* @prop architecture/wall-bulkhead-curve-convex-4r\n\t* @prop architecture/wall-curve-concave-2r-4h\n\t* @prop architecture/wall-curve-concave-4r-4h\n\t* @prop architecture/wall-curve-convex-2r-4h\n\t* @prop architecture/wall-curve-convex-4r-4h\n\t* @prop architecture/wall-curve-window-concave-4r-4h\n\t* @prop architecture/wall-curve-window-concave-filler-4r-4h\n\t* @prop architecture/wall-curve-window-gap-concave-4r-4h\n\t* @prop architecture/wall-curve-window-gap-end-l-concave-4r-4h\n\t* @prop architecture/wall-curve-window-gap-end-r-concave-4r-4h\n\t* @prop architecture/wall-filler-corner-inner-4h\n\t* @prop architecture/wall-filler-corner-outer-4h\n\t* @prop architecture/wall-window-4w-4h\n\t* @prop architecture/wall-window-filler-2\n\t* @prop architecture/wall-window-gap-2w-4h\n\t* @prop architecture/wall-window-gap-4w-4h\n\t* @prop architecture/wall-window-gap-end-l-2w-4h\n\t* @prop architecture/wall-window-gap-end-l-4w-4h\n\t* @prop architecture/wall-window-gap-end-r-2w-4h\n\t* @prop architecture/wall-window-gap-end-r-4w-4h\n\t*/\n\t\n\t/**\n\t* Particle systems and other native effects\n\t* @name effects\n\t* @enum effects\n\t* @memberof resources\n\t*\n\t* @prop effects/explosion - A particle system with a central flash, then debris flying outward.\n\t* This is a non-looping effect.\n\t* @prop effects/fire - An animated fire particle, suitable for a torch.\n\t* @prop effects/fire-trail - Fire that trails the entity through space as it moves. Only is visible while an object is in motion\n\t* @prop effects/fireworks - A compound particle system that shoots up from the entity,\n\t* explodes into colored sparks, then transitions to gold streamers.\n\t* @prop effects/smoke - Billowing smoke particle system.\n\t* @prop effects/sparkler - Emits sparks in all directions\n\t* @prop effects/steam - Small white steam rising upwards\n\t*/\n\t\n\t/**\n\t* Objects that can be picked up, thrown, and otherwise interacted with.\n\t* @name interactables\n\t* @enum interactables\n\t* @memberof resources\n\t*\n\t* @prop interactables/basketball\n\t* @prop interactables/bowlingball\n\t* @prop interactables/bowling-pin\n\t* @prop interactables/box\n\t* @prop interactables/coin\n\t* @prop interactables/gem\n\t* @prop interactables/ring\n\t* @prop interactables/soccerball\n\t*/\n\t\n\t/**\n\t* Static models that you can place in your scene.\n\t* @name objects\n\t* @enum objects\n\t* @memberof resources\n\t*\n\t* @prop objects/basketball-hoop\n\t* @prop objects/coin\n\t* @prop objects/cup\n\t* @prop objects/gem\n\t* @prop objects/hoop\n\t* @prop objects/ring\n\t* @prop objects/target-archery\n\t*/\n\t\n\t/**\n\t* A selection of pipes/chutes/etc.\n\t* @name pipes\n\t* @enum pipes\n\t* @memberof resources\n\t*\n\t* @prop pipes/pipe-full-cap-1d\n\t* @prop pipes/pipe-full-cross-1d\n\t* @prop pipes/pipe-full-elbow-1d\n\t* @prop pipes/pipe-full-fork-1d\n\t* @prop pipes/pipe-full-straight-1d-1l\n\t* @prop pipes/pipe-full-straight-1d-2l\n\t* @prop pipes/pipe-full-straight-1d-4l\n\t* @prop pipes/pipe-full-tee-1d\n\t* @prop pipes/pipe-half-cap-1d\n\t* @prop pipes/pipe-half-cross-1d\n\t* @prop pipes/pipe-half-elbow-1d\n\t* @prop pipes/pipe-half-fork-1d\n\t* @prop pipes/pipe-half-straight-1d-1l\n\t* @prop pipes/pipe-half-straight-1d-2l\n\t* @prop pipes/pipe-half-straight-1d-4l\n\t* @prop pipes/pipe-half-tee-1d\n\t*/\n\t\n\t/**\n\t* Common UI sounds can be used for a consistent UI experience.\n\t* @name sounds-ui\n\t* @enum sounds-ui\n\t* @memberof resources\n\t*\n\t* @prop ui/select\n\t* @prop ui/toggle\n\t* @prop ui/notify\n\t* @prop ui/error\n\t* @prop ui/complete\n\t* @prop ui/succeed\n\t* @prop ui/over\n\t* @prop ui/join\n\t* @prop ui/click\n\t*/\n\t\n\t/**\n\t* Foley sounds are real sounds designed for tangible, touchable objects as they are heard in the real world.\n\t* @name sounds-foley\n\t* @enum sounds-foley\n\t* @memberof resources\n\t*\n\t* @prop foley/metal-scrape\n\t* @prop foley/metal-clack\n\t* @prop foley/metal-rattle\n\t* @prop foley/coin-jingle\n\t* @prop foley/paper-shuffle\n\t* @prop foley/explode\n\t*/\n\t\n\t/**\n\t* Effect sounds for a variety of use cases.\n\t* @name sounds-effects\n\t* @enum sounds-effects\n\t* @memberof resources\n\t*\n\t* @prop effects/fanfare-succeed - The \"success!\" sound from Holograms Against Humanity.\n\t* @prop effects/fanfare-start - The \"Game has started!\" sound from HaH.\n\t* @prop effects/fanfare-fail\n\t* @prop effects/timer-10s - a 10 second timer that triggers a bell at exactly 10 seconds.\n\t* The bell lasts for 2 seconds. This allows for timer length changes.\n\t* @prop effects/gain-coin\n\t*/\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Instantiates an entity for each user using [sync-system]{@link sync.sync-system}.\n\t * @mixin one-per-user\n\t * @memberof sync\n\t * @prop {string} mixin - A comma-separated list of mixin ids that are used to instantiate the object.\n\t * @prop {string} [parent] - A selector specifying which element should be the parent of the instantiated entity.\n\t *\tDefaults to the parent node.\n\t */\n\tAFRAME.registerComponent('one-per-user', {\n\t\tschema: {\n\t\t\tmixin: {type: 'string'},\n\t\t\tparent: {type: 'selector'}\n\t\t},\n\t\tinit: function () {\n\t\t\tvar scene = document.querySelector('a-scene');\n\t\t\tthis.syncSys = scene.systems['sync-system'];\n\t\t\tthis.syncSys.instantiate(this.data.mixin, this.data.parent || this.el.parentNode, this.el)\n\t\t}\n\t});\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t* Sync the color property of the object between clients.\n\t* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\n\t* {@link sync.sync} component on the target entity.\n\t* @mixin sync-color\n\t* @memberof sync\n\t*/\n\tAFRAME.registerComponent('sync-color',\n\t{\n\t\tdependencies: ['sync'],\n\t\tschema: {\n\t\t},\n\t\tinit: function () {\n\t\t\tvar component = this;\n\t\t\tvar sync = component.el.components.sync;\n\t\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\n\t\n\t\t\tfunction start(){\n\t\t\t\tvar colorRef = sync.dataRef.child('material/color');\n\t\n\t\t\t\tvar refChangedLocked = false;\n\t\n\t\t\t\tvar firstValue = true;\n\t\n\t\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\n\t\t\t\t\tvar name = event.detail.name;\n\t\t\t\t\tvar oldData = event.detail.oldData;\n\t\t\t\t\tvar newData = event.detail.newData;\n\t\n\t\t\t\t\tif (name !== 'material') return;\n\t\t\t\t\tif (refChangedLocked) return;\n\t\n\t\t\t\t\tif (oldData.color !== newData.color) {\n\t\t\t\t\t\tif(sync.isMine){\n\t\t\t\t\t\t\tsetTimeout(function() {//For some reason A-Frame has a misconfigured material reference if we do this too early\n\t\t\t\t\t\t\t\tcolorRef.set(newData.color);\n\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tcolorRef.on('value', function (snapshot) {\n\t\t\t\t\tif (sync.isMine && !firstValue) return;\n\t\t\t\t\tvar color = snapshot.val();\n\t\n\t\t\t\t\trefChangedLocked = true;\n\t\t\t\t\tcomponent.el.setAttribute('material', 'color', color);\n\t\t\t\t\trefChangedLocked = false;\n\t\n\t\t\t\t\tfirstValue = false;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Syncs the attributes of an n-skeleton-parent component across clients\n\t * @mixin sync-n-skeleton-parent\n\t * @memberof sync\n\t */\n\tAFRAME.registerComponent('sync-n-skeleton-parent', {\n\t\tdependencies: ['sync'],\n\t\tinit: function () {\n\t\t\tvar scene = document.querySelector('a-scene');\n\t\t\tthis.syncSys = scene.systems['sync-system'];\n\t\t\tthis.sync = this.el.components.sync;\n\t\t\tif(this.syncSys.isConnected) { this._start(); }\n\t\t\telse { scene.addEventListener('connected', this._start.bind(this)); }\n\t\t},\n\t\tgetDataRef: function (propertyName) {\n\t\t\treturn this.sync.dataRef.child('n-skeleton-parent/' + propertyName);\n\t\t},\n\t\t_start: function () {\n\t\t\tthis.attributeRef = this.sync.dataRef.child('n-skeleton-parent');\n\t\t\tthis.attributeRef.on('value', function (snapshot) {\n\t\t\t\tvar val = snapshot.val();\n\t\t\t\tif (!val) { return; }\n\t\t\t\tthis.el.setAttribute('n-skeleton-parent', val);\n\t\t\t}.bind(this));\n\t\n\t\t\t// dataset.creatorUserId is defined when the entity is instantiated via the sync system.\n\t\t\tif (this.el.dataset.creatorUserId) {\n\t\t\t\tthis.attributeRef.set(Object.assign(\n\t\t\t\t\t{}, this.el.components['n-skeleton-parent'].data, {userId: this.el.dataset.creatorUserId}));\n\t\t\t}\n\t\n\t\t\tthis.el.addEventListener('componentchanged', function (event) {\n\t\t\t\tif (!this.sync.isMine) return;\n\t\t\t\tvar name = event.detail.name;\n\t\t\t\tif (name === 'n-skeleton-parent') {\n\t\t\t\t\tthis.attributeRef.set(event.detail.newData);\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t}\n\t});\n\t\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t/**\n\t* Synchronize the playback state of an {@link n.n-sound} component between clients.\n\t* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\n\t* {@link sync.sync} component on the target entity.\n\t* @mixin sync-n-sound\n\t* @memberof sync\n\t*/\n\tAFRAME.registerComponent('sync-n-sound',\n\t{\n\t\tdependencies: ['sync'],\n\t\tschema: { },\n\t\tinit: function () {\n\t\t\tvar component = this;\n\t\t\tvar sync = component.el.components.sync;\n\t\t\tvar scene = document.querySelector('a-scene');\n\t\t\tvar syncSys = scene.systems['sync-system'];\n\t\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\n\t\n\t\t\tfunction start(){\n\t\t\t\tcomponent.soundStateRef = sync.dataRef.child('sound/state');\n\t\t\t\tcomponent.soundEventRef = sync.dataRef.child('sound/event');\n\t\n\t\t\t\tfunction sendEvent(event) {\n\t\t\t\t\tif (!sync.isMine) return;\n\t\t\t\t\tvar event = {\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tsender: syncSys.clientId,\n\t\t\t\t\t\tel: component.el.id,\n\t\t\t\t\t\ttime: Date.now()\n\t\t\t\t\t};\n\t\t\t\t\tcomponent.soundEventRef.set(event);\n\t\t\t\t}\n\t\n\t\t\t\tcomponent.el.addEventListener('sound-played', sendEvent);\n\t\t\t\tcomponent.el.addEventListener('sound-paused', sendEvent);\n\t\n\t\t\t\tcomponent.soundEventRef.on('value', function (snapshot) {\n\t\t\t\t\tif (sync.isMine) return;\n\t\t\t\t\tvar event = snapshot.val();\n\t\t\t\t\tif (!event) return;\n\t\t\t\t\tif (event.el === component.el.id) {\n\t\t\t\t\t\tvar sound = component.el.components['n-sound'];\n\t\t\t\t\t\tif (event.type === 'sound-played') {\n\t\t\t\t\t\t\tsound.playSound();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsound.pauseSound();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\n\t\t\t\t\tif (!sync.isMine) return;\n\t\t\t\t\tvar name = event.detail.name;\n\t\t\t\t\tif (name !== 'n-sound') return;\n\t\t\t\t\tcomponent.soundStateRef.set(event.detail.newData);\n\t\t\t\t});\n\t\n\t\t\t\tcomponent.soundStateRef.on('value', function (snapshot) {\n\t\t\t\t\tif (sync.isMine) return;\n\t\t\t\t\tvar state = snapshot.val();\n\t\t\t\t\tif (!state) return;\n\t\t\t\t\tcomponent.el.setAttribute('n-sound', state);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tremove: function () {\n\t\t\tthis.soundStateRef.off('value');\n\t\t\tthis.soundEventRef.off('value');\n\t\t}\n\t});\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t* Connect to a remote Firebase server, and facilitate synchronization. These\n\t* options correspond exactly with the configuration options for\n\t* [altspace.utilities.sync.connect]{@link http://altspacevr.github.io/AltspaceSDK/doc/module-altspace_utilities_sync.html#.connect}.\n\t* This component must be present on `a-scene` for any other sync components to work.\n\t* @memberof sync\n\t* @mixin sync-system\n\t* @prop {string} author - A unique identifier for you or your organization.\n\t* @prop {string} app - The name of the app.\n\t* @prop {string} refUrl - Override the base reference. Set this to use your own Firebase.\n\t* @prop {string} instance - Override the instance ID. Can also be overridden with\n\t* a URL parameter.\n\t*/\n\t\n\t/**\n\t* True if the sync system is connected and ready for syncing.\n\t* @member sync.sync-system#isConnected\n\t* @readonly\n\t*/\n\t\n\t/**\n\t* True if this client is currently the master client.\n\t* @member sync.sync-system#isMasterClient\n\t* @readonly\n\t*/\n\t\n\t/**\n\t* Fired when a connection is established and the sync system is fully initialized.\n\t* @event sync.sync-system#connected\n\t* @property {boolean} shouldInitialize - True if this is the first client to establish a connection.\n\t*/\n\t\n\t/**\n\t* Fired when a client joins.\n\t* @event sync.sync-system#clientjoined\n\t* @property {string} id - Guid identifying the client.\n\t*/\n\t\n\t/**\n\t* Fired when a client leaves.\n\t* @event sync.sync-system#clientleft\n\t* @property {string} id - Guid identifying the client.\n\t*/\n\tAFRAME.registerSystem('sync-system', {\n\t\tschema: {\n\t\t\tauthor: { type: 'string', default: null },\n\t\t\tapp: { type: 'string', default: null },\n\t\t\tinstance: { type: 'string', default: null },\n\t\t\trefUrl: { type: 'string', default: null }\n\t\t},\n\t\tinit: function() {\n\t\t\tvar system = this;\n\t\n\t\t\tif(!this.data || !this.data.app){\n\t\t\t\tconsole.warn('The sync-system must be present on the scene and configured with required data.');\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tsystem.isConnected = false;\n\t\t\tsystem.queuedInstantiations = [];\n\t\t\tPromise.all([\n\t\t\t\taltspace.utilities.sync.connect({\n\t\t\t\t\tauthorId: this.data.author,\n\t\t\t\t\tappId: this.data.app,\n\t\t\t\t\tinstanceId: this.data.instance,\n\t\t\t\t\tbaseRefUrl: this.data.refUrl\n\t\t\t\t}),\n\t\t\t\taltspace.getUser()\n\t\t\t]).then(function(results) {\n\t\t\t\tthis.connection = results.shift();\n\t\t\t\tthis.userInfo = results.shift();\n\t\n\t\t\t\tthis.sceneRef = this.connection.instance.child('scene');\n\t\t\t\tthis.clientsRef = this.connection.instance.child('clients');\n\t\t\t\tthis.instantiatedElementsRef = this.connection.instance.child('instantiatedElements')\n\t\n\t\t\t\tthis.instantiatedElementsRef.on('child_added', this.listenToInstantiationGroup.bind(this));\n\t\t\t\tthis.instantiatedElementsRef.on('child_removed', this.stopListeningToInstantiationGroup.bind(this));\n\t\n\t\t\t\t// temporary way of having unique identifiers for each client\n\t\t\t\tthis.clientId = this.sceneEl.object3D.uuid;\n\t\t\t\tvar masterClientId;\n\t\t\t\tthis.clientsRef.on(\"value\", function (snapshot) {\n\t\t\t\t\tvar clientIds = snapshot.val();\n\t\n\t\t\t\t\tvar masterClientKey = Object.keys(clientIds)[0];\n\t\t\t\t\tmasterClientId = clientIds[masterClientKey];\n\t\t\t\t});\n\t\n\t\t\t\tthis.clientsRef.on('child_added', function(childSnapshot) {\n\t\t\t\t\tvar joinedClientId = childSnapshot.val();\n\t\t\t\t\t//let the master client flag get set first\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tsystem.sceneEl.emit('clientjoined', {id: joinedClientId}, false);\n\t\t\t\t\t}, 0);\n\t\t\t\t});\n\t\n\t\t\t\tthis.clientsRef.on('child_removed', function(childSnapshot) {\n\t\t\t\t\tvar leftClientId = childSnapshot.val();\n\t\t\t\t\t//let the master client flag get set first\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tsystem.sceneEl.emit('clientleft', {id: leftClientId}, false);\n\t\t\t\t\t}, 0);\n\t\t\t\t});\n\t\n\t\t\t\t// add our client ID to the list of connected clients,\n\t\t\t\t// but have it be automatically removed by firebase if we disconnect for any reason\n\t\t\t\tthis.clientsRef.push(this.clientId).onDisconnect().remove();\n\t\n\t\t\t\tthis.connection.instance.child('initialized').once('value', function (snapshot) {\n\t\t\t\t\tvar shouldInitialize = !snapshot.val();\n\t\t\t\t\tsnapshot.ref().set(true);\n\t\n\t\t\t\t\tthis.processQueuedInstantiations();\n\t\n\t\t\t\t\tsystem.sceneEl.emit('connected', { shouldInitialize: shouldInitialize }, false);\n\t\t\t\t\tsystem.isConnected = true;\n\t\t\t\t}.bind(this));\n\t\n\t\n\t\t\t\tObject.defineProperty(this, 'isMasterClient', {\n\t\t\t\t\tget: function () { return masterClientId === this.clientId; }.bind(this)\n\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\t\tlistenToInstantiationGroup: function (snapshot) {\n\t\t\tsnapshot.ref().on('child_added', this.createElement.bind(this));\n\t\t\tsnapshot.ref().on('child_removed', this.removeElement.bind(this));\n\t\t},\n\t\tstopListeningToInstantiationGroup: function (snapshot) {\n\t\t\tsnapshot.ref().off('child_added');\n\t\t\tsnapshot.ref().off('child_removed');\n\t\t},\n\t\tprocessQueuedInstantiations: function () {\n\t\t\tthis.queuedInstantiations.forEach(function (instantiationProps) {\n\t\t\t\tinstantiationProps.creatorUserId = this.userInfo.userId;\n\t\t\t\tinstantiationProps.clientId = this.clientId;\n\t\t\t\tthis.instantiatedElementsRef.child(instantiationProps.groupName).\n\t\t\t\t\tpush(instantiationProps).\n\t\t\t\t\tonDisconnect().remove();\n\t\t\t}.bind(this));\n\t\t\t// Clear queue.\n\t\t\tthis.queuedInstantiations.length = 0;\n\t\t},\n\t\t/**\n\t\t* Instantiate an entity with the given mixins.\n\t\t* @method sync.sync-system#instantiate\n\t\t* @param {string} mixin - A comma-separated list of mixin ids which should be used to instantiate the entity.\n\t\t* @param {Element} [parent] - An element to which the entity should be added. Defaults to the scene.\n\t\t* @param {Element} [el] - The element responsible for instantiating this entity.\n\t\t* @param {string} [groupName] - A group that the entity should belong to. Used in conjunction with \n\t\t*\t[removeLast]{@link sync.sync-system#removeLast}.\n\t\t* @param {string} [instantiatorId] - Used by [removeLast]{@link sync.sync-system#removeLast} to indicate who was \n\t\t*\tresponsible for the removed entity.\n\t\t*/\n\t\tinstantiate: function (mixin, parent, el, groupName, instantiatorId) {\n\t\t\t// TODO Validation should throw an error instead of a console.error, but A-Frame 0.3.0 doesn't propagate those \n\t\t\t// correctly.\n\t\t\tif (!mixin) {\n\t\t\t\tconsole.error('AltspaceVR: Instantiation requires a mixin value.', el);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar parentWithId = parent && parent.id;\n\t\t\tvar parentIsScene = parent.nodeName === 'A-SCENE';\n\t\t\tif (!parentWithId && !parentIsScene) {\n\t\t\t\tconsole.error('AltspaceVR: Instantiation requires a parent with an id.', el);\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar parentSelector = parentWithId ? '#' + parent.id : 'a-scene';\n\t\t\tvar instantiationProps = {\n\t\t\t\tinstantiatorId: instantiatorId || '',\n\t\t\t\tgroupName: groupName || 'main',\n\t\t\t\tmixin: mixin,\n\t\t\t\tparent: parentSelector\n\t\t\t};\n\t\t\tthis.queuedInstantiations.push(instantiationProps);\n\t\t\tif (this.isConnected) {\n\t\t\t\tthis.processQueuedInstantiations();\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* Remove the last entity instantiated in the given group.\n\t\t* Returns a Promise which resolves with the instantiatorId associated with the removed entity.\n\t\t* @method sync.sync-system#removeLast\n\t\t* @param {string} groupName - Name of the group from which to remove the entity.\n\t\t* @returns {Promise} \n\t\t*/\n\t\tremoveLast: function (groupName) {\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tthis.instantiatedElementsRef.child(groupName).orderByKey().limitToLast(1).once(\n\t\t\t\t\t'value',\n\t\t\t\t\tfunction (snapshot) {\n\t\t\t\t\t\tif (!snapshot.hasChildren()) { resolve(); return; }\n\t\t\t\t\t\tvar val = snapshot.val();\n\t\t\t\t\t\tvar key = Object.keys(val)[0];\n\t\t\t\t\t\tresolve(val[key].instantiatorId);\n\t\t\t\t\t\tsnapshot.ref().child(key).remove();\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\t\tcreateElement: function (snapshot) {\n\t\t\tvar val = snapshot.val();\n\t\t\tvar key = snapshot.key();\n\t\t\tvar entityEl = document.createElement('a-entity');\n\t\t\tentityEl.id = val.groupName + '-instance-' + key;\n\t\t\tdocument.querySelector(val.parent).appendChild(entityEl);\n\t\t\tentityEl.setAttribute('mixin', val.mixin);\n\t\t\tentityEl.dataset.creatorUserId = val.creatorUserId;\n\t\t},\n\t\tremoveElement: function (snapshot) {\n\t\t\tvar val = snapshot.val();\n\t\t\tvar key = snapshot.key();\n\t\t\tvar id = val.groupName + '-instance-' + key;\n\t\t\tvar el = document.querySelector('#' + id);\n\t\t\tel.parentNode.removeChild(el);\n\t\t}\n\t});\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t//TODO: We need to figure out a way to recieve our first update without caring about ownership.\n\t// firstValue is probably not the right way to go, probably something about having sent yet. Need to change for both\n\t\n\t/**\n\t* Synchronize the position, rotation, and scale of this object with all clients.\n\t* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\n\t* {@link sync.sync} component on the target entity.\n\t* @mixin sync-transform\n\t* @memberof sync\n\t*/\n\tAFRAME.registerComponent('sync-transform',\n\t{\n\t\tdependencies: ['sync'],\n\t\tschema: {\n\t\t},\n\t\tinit: function () {\n\t\t\tvar component = this;\n\t\t\tvar sync = component.el.components.sync;\n\t\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\n\t\n\t\t\tfunction start(){\n\t\n\t\t\t\tvar positionRef = sync.dataRef.child('position');\n\t\t\t\tvar rotationRef = sync.dataRef.child('rotation');\n\t\t\t\tvar scaleRef = sync.dataRef.child('scale');\n\t\n\t\t\t\tcomponent.updateRate = 100;\n\t\n\t\t\t\tvar stoppedAnimations = [];\n\t\t\t\t//pause all animations on ownership loss\n\t\t\t\tcomponent.el.addEventListener('ownershiplost', function() {\n\t\t\t\t\tvar children = component.el.children;\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar tagName = children[i].tagName.toLowerCase();\n\t\t\t\t\t\tif (tagName === \"a-animation\") {\n\t\t\t\t\t\t\tstoppedAnimations.push(children[i]);\n\t\t\t\t\t\t\tchildren[i].stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcomponent.el.addEventListener('ownershipgained', function () {\n\t\t\t\t\tfor (var i = 0; i < stoppedAnimations.length; i++) {\n\t\t\t\t\t\tvar animation = stoppedAnimations[i];\n\t\t\t\t\t\tanimation.start();\n\t\t\t\t\t}\n\t\t\t\t\tstoppedAnimations = [];\n\t\t\t\t});\n\t\n\t\t\t\tfunction onTransform(snapshot, componentName) {\n\t\t\t\t\tif (sync.isMine) return;\n\t\n\t\t\t\t\tvar value = snapshot.val();\n\t\t\t\t\tif (!value) return;\n\t\n\t\t\t\t\tcomponent.el.setAttribute(componentName, value);\n\t\t\t\t}\n\t\n\t\t\t\tpositionRef.on('value', function (snapshot) {\n\t\t\t\t\tonTransform(snapshot, 'position');\n\t\t\t\t});\n\t\n\t\t\t\trotationRef.on('value', function (snapshot) {\n\t\t\t\t\tonTransform(snapshot, 'rotation');\n\t\t\t\t});\n\t\n\t\t\t\tscaleRef.on('value', function (snapshot) {\n\t\t\t\t\tonTransform(snapshot, 'scale');\n\t\t\t\t});\n\t\n\t\t\t\tvar sendPosition = throttle(function(value){\n\t\t\t\t\tpositionRef.set(value);\n\t\t\t\t}, component.updateRate);\n\t\n\t\t\t\tvar sendRotation = throttle(function(value){\n\t\t\t\t\trotationRef.set(value);\n\t\t\t\t}, component.updateRate);\n\t\n\t\t\t\tvar sendScale = throttle(function(value){\n\t\t\t\t\tscaleRef.set(value);\n\t\t\t\t}, component.updateRate);\n\t\n\t\t\t\tfunction onComponentChanged(event){\n\t\t\t\t\tif (!sync.isMine) return;\n\t\n\t\t\t\t\tvar name = event.detail.name;\n\t\t\t\t\tvar newData = event.detail.newData;\n\t\n\t\t\t\t\tif (name === 'position') {\n\t\t\t\t\t\tsendPosition(newData);\n\t\t\t\t\t} else if (name === 'rotation') {\n\t\t\t\t\t\tsendRotation(newData);\n\t\t\t\t\t} else if (name === 'scale') {\n\t\t\t\t\t\tsendScale(newData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//from underscore.js\n\t\t\t\tfunction throttle(func, wait, options) {\n\t\t\t\t\tvar timeout, context, args, result;\n\t\t\t\t\tvar previous = 0;\n\t\t\t\t\tif (!options) options = {};\n\t\n\t\t\t\t\tvar later = function() {\n\t\t\t\t\t  previous = options.leading === false ? 0 : Date.now();\n\t\t\t\t\t  timeout = null;\n\t\t\t\t\t  result = func.apply(context, args);\n\t\t\t\t\t  if (!timeout) context = args = null;\n\t\t\t\t\t};\n\t\n\t\t\t\t\tvar throttled = function() {\n\t\t\t\t\t  var now = Date.now();\n\t\t\t\t\t  if (!previous && options.leading === false) previous = now;\n\t\t\t\t\t  var remaining = wait - (now - previous);\n\t\t\t\t\t  context = this;\n\t\t\t\t\t  args = arguments;\n\t\t\t\t\t  if (remaining <= 0 || remaining > wait) {\n\t\t\t\t\t\tif (timeout) {\n\t\t\t\t\t\t  clearTimeout(timeout);\n\t\t\t\t\t\t  timeout = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprevious = now;\n\t\t\t\t\t\tresult = func.apply(context, args);\n\t\t\t\t\t\tif (!timeout) context = args = null;\n\t\t\t\t\t  } else if (!timeout && options.trailing !== false) {\n\t\t\t\t\t\ttimeout = setTimeout(later, remaining);\n\t\t\t\t\t  }\n\t\t\t\t\t  return result;\n\t\t\t\t\t};\n\t\n\t\t\t\t\tthrottled.cancel = function() {\n\t\t\t\t\t  clearTimeout(timeout);\n\t\t\t\t\t  previous = 0;\n\t\t\t\t\t  timeout = context = args = null;\n\t\t\t\t\t};\n\t\n\t\t\t\t\treturn throttled;\n\t\t\t\t  };\n\t\n\t\n\t\t\t\tcomponent.el.addEventListener('componentchanged', onComponentChanged);\n\t\t\t}\n\t\t}\n\t});\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t/**\n\t* Enables the synchronization of properties of entities. All property sync components\n\t* require both a {@link sync.sync-system} on `a-scene`, and a {@link sync.sync}\n\t* on the entity to be synced.\n\t* @name sync\n\t* @namespace sync\n\t* @example\n\t* <a-scene sync-system='app: example sync; author: altspacevr'>\n\t*   <a-entity sync='ownOn: cursordown' sync-color></a-entity>\n\t* </a-scene>\n\t*/\n\t\n\t\n\t\n\t/**\n\t* Enables the synchronization of properties of the entity. Must be used in\n\t* conjuction with the {@link sync.sync-system} component and a component for a\n\t* specific property (e.g. {@link sync.sync-transform}).\n\t* @memberof sync\n\t* @mixin sync\n\t* @prop {string} ownOn - The name of the event, or a list of events, that\n\t* will cause the local client to take ownership of this object. This field\n\t* cannot be updated after initialization.\n\t*/\n\tAFRAME.registerComponent('sync', {\n\t\tschema: {\n\t\t\tmode: { default: 'link' },\n\t\t\townOn: { type: 'string' } //cannot be changed after creation\n\t\t},\n\t\tinit: function () {\n\t\t\tvar scene = document.querySelector('a-scene');\n\t\t\tvar syncSys = scene.systems['sync-system'];\n\t\n\t\t\tvar ref;\n\t\t\tvar dataRef;\n\t\t\tvar ownerRef;\n\t\t\tvar ownerId;\n\t\t\tvar isMine = false;\n\t\n\t\t\tvar component = this;\n\t\n\t\t\tcomponent.isConnected = false;\n\t\n\t\t\tif(syncSys.isConnected) start(); else scene.addEventListener('connected', start);\n\t\n\t\n\t\t\tif(component.data.ownOn)\n\t\t\t{\n\t\t\t\tvar ownershipEvents = component.data.ownOn.split(/[ ,]+/);\n\t\t\t\tfor(var i = 0, max = ownershipEvents.length; i < max; i++){\n\t\t\t\t\tcomponent.el.addEventListener(ownershipEvents[i], function(){\n\t\t\t\t\t\tif(component.isConnected){\n\t\t\t\t\t\t\tcomponent.takeOwnership();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction start(){\n\t\t\t\t//Make sure someone always owns an object. If the owner leaves and we are the master client, we will take it.\n\t\t\t\t//This ensures, for example, that synced animations keep playing\n\t\t\t\tscene.addEventListener('clientleft', function(event){\n\t\t\t\t\tvar shouldTakeOwnership = (!ownerId || ownerId === event.detail.id) && syncSys.isMasterClient;\n\t\n\t\t\t\t\tif(shouldTakeOwnership) component.takeOwnership();\n\t\t\t\t});\n\t\n\t\t\t\tif (component.data.mode === 'link') {\n\t\t\t\t\tvar id = component.el.id;\n\t\t\t\t\tif (!id) {\n\t\t\t\t\t\tconsole.error('Entities cannot be synced using link mode without an id.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlink(syncSys.sceneRef.child(id));\n\t\t\t\t\tsetupReceive();\n\t\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('Unsupported sync mode: ' + component.data.mode);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tcomponent.isConnected = true;\n\t\t\t\tcomponent.el.emit('connected', null, false);\n\t\t\t}\n\t\n\t\t\tfunction link(entityRef) {\n\t\t\t\tref = entityRef;\n\t\t\t\tdataRef = ref.child('data');\n\t\t\t\tcomponent.dataRef = dataRef;\n\t\t\t\townerRef = ref.child('owner');\n\t\t\t}\n\t\n\t\t\tfunction setupReceive() {\n\t\n\t\t\t\t//if nobody has owned the object yet, we will.\n\t\t\t\townerRef.transaction(function (owner) {\n\t\t\t\t\tif (owner) return undefined;\n\t\n\t\t\t\t\townerRef.onDisconnect().set(null);\n\t\t\t\t\treturn syncSys.clientId;\n\t\t\t\t}, function (error, committed) {\n\t\t\t\t\t// Return since transaction will be called again\n\t\t\t\t\tif (!committed) { return; }\n\t\t\t\t\townerRef.on('value', function(snapshot) {\n\t\t\t\t\t\tvar newOwnerId = snapshot.val();\n\t\n\t\t\t\t\t\tvar gained = newOwnerId === syncSys.clientId && !isMine;\n\t\t\t\t\t\tif (gained) component.el.emit('ownershipgained', null, false);\n\t\n\t\n\t\t\t\t\t\t//note this also fires when we start up without ownership\n\t\t\t\t\t\tvar lost = newOwnerId !== syncSys.clientId && isMine;\n\t\t\t\t\t\tif (lost){\n\t\t\t\t\t\t\tcomponent.el.emit('ownershiplost', null, false);\n\t\n\t\t\t\t\t\t\t//we no longer have to clear our ownership when we disconnect\n\t\t\t\t\t\t\townerRef.onDisconnect().cancel();\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\townerId = newOwnerId;\n\t\n\t\t\t\t\t\tisMine = newOwnerId === syncSys.clientId;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t* Tell sync to start pushing local property values instead of updating\n\t\t\t* local from remote values.\n\t\t\t* @method sync.sync#takeOwnership\n\t\t\t*/\n\t\t\tcomponent.takeOwnership = function() {\n\t\t\t\townerRef.set(syncSys.clientId);\n\t\n\t\t\t\t//clear our ownership if we disconnect\n\t\t\t\t//this is needed if we are the last user in the room, but we expect people to join later\n\t\t\t\townerRef.onDisconnect().set(null);\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t* Indicates whether the sync ownership is yours.\n\t\t\t* @member sync.sync#isMine\n\t\t\t* @readonly\n\t\t\t*/\n\t\t\tObject.defineProperty(component, 'isMine', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn isMine;//TODO: Should this be state instead?\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t/**\n\t * The wire component allows you to trigger an event on another entity when an event occurs on an entity\n\t * @mixin wire\n\t * @property {string} on Name of an event to listen to\n\t * @property {string} gained Name of a state to watch for\n\t * @property {string} lost Name of a state to watch for\n\t * @property {string} emit Name of an event to trigger on the targets\n\t * @property {string} gain Name of a state to add on the target\n\t * @property {string} lose Name of a state to remove on the target\n\t * @property {selector} targets A selector to pick which objects to wire to\n\t * @property {selector} target - A selector to pick a single object to wire to\n\t **/\n\tAFRAME.registerComponent('wire',\n\t{\n\t\tmultiple: true,\n\t\tschema: {\n\t\t\ton: {type: 'string'},\n\t\t\temit: {type: 'string'},\n\t\t\tgained: {type: 'string'},\n\t\t\tlost: {type: 'string'},\n\t\t\tgain: {type: 'string'},\n\t\t\tlose: {type: 'string'},\n\t\t\ttargets: {type: 'selectorAll'},\n\t\t\ttarget: {type: 'selector'}\n\t\t},\n\t\tupdate: function (oldData) {\n\t\t\tif (oldData.on) {\n\t\t\t\tthis.el.removeEventListener(oldData.on, this.actOnTargets);\n\t\t\t}\n\t\t\tif (oldData.gained) {\n\t\t\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\n\t\t\t}\n\t\t\tif (oldData.lost) {\n\t\t\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\n\t\t\t}\n\t\n\t\t\tthis.actOnTargets = function () {\n\t\t\t\tfunction act(el) {\n\t\t\t\t\tif (this.data.emit) {\n\t\t\t\t\t\tel.emit(this.data.emit);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.data.gain) {\n\t\t\t\t\t\tel.addState(this.data.gain);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.data.lose) {\n\t\t\t\t\t\tel.removeState(this.data.lose);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(this.data.targets) this.data.targets.forEach(act.bind(this));\n\t\t\t\tif(this.data.target) act.call(this, this.data.target);\n\t\t\t}.bind(this);\n\t\n\t\t\tthis.actOnTargetsIfStateMatches = function (event) {\n\t\t\t\tvar state = event.detail.state;\n\t\t\t\tif (state === this.data.gained || state === this.data.lost) {\n\t\t\t\t\tthis.actOnTargets();\n\t\t\t\t}\n\t\t\t}.bind(this);\n\t\n\t\t\tif (this.data.on) {\n\t\t\t\tthis.el.addEventListener(this.data.on, this.actOnTargets);\n\t\t\t}\n\t\t\tif (this.data.gained) {\n\t\t\t\tthis.el.addEventListener('stateadded', this.actOnTargetsIfStateMatches);\n\t\t\t}\n\t\t\tif (this.data.lost) {\n\t\t\t\tthis.el.addEventListener('stateremoved', this.actOnTargetsIfStateMatches);\n\t\t\t}\n\t\t},\n\t\tremove: function () {\n\t\t\tthis.el.removeEventListener(this.data.on, this.actOnTargets);\n\t\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\n\t\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\n\t\t}\n\t});\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** aframe-altspace-component.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap deb2d37f29db832cfa1b\n **/","if (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nrequire('./altspace');\nrequire('./altspace-cursor-collider');\nrequire('./altspace-tracked-controls');\nrequire('./native-components');\nrequire('./native-resources');\nrequire('./sync');\nrequire('./sync-system');\nrequire('./sync-transform');\nrequire('./sync-color');\nrequire('./sync-n-sound');\nrequire('./sync-n-skeleton-parent');\nrequire('./one-per-user');\nrequire('./instantiator');\nrequire('./wire');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","(function(){\n\n\tfunction setColliderFlag(obj, state) {\n\t\tobj.userData.altspace = {collider: {enabled: state}};\n\t\tobj.traverse(function (obj) {\n\t\t\tif (obj instanceof THREE.Mesh) {\n\t\t\t\tobj.userData.altspace = {collider: {enabled: state}};\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t* Enable or disable cursor collision on the object.\n\t* @mixin altspace-cursor-collider\n\t* @memberof altspace\n\t* @prop {boolean} enabled=true - The state of the cursor collider.\n\t*/\n\tAFRAME.registerComponent('altspace-cursor-collider', {\n\t\tschema: { enabled: { default: true } },\n\t\tinit: function () {\n\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\n\t\t\tthis.el.addEventListener('model-loaded', (function(){\n\t\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\n\t\t\t}).bind(this));\n\t\t},\n\t\tupdate: function () {\n\t\t\tsetColliderFlag(this.el.object3D, this.data.enabled);\n\t\t}\n\t});\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/altspace-cursor-collider.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\n* Enables tracked control support for A-Frame applications that use the built-in\n* `tracked-controls`, `vive-controls` or `hand-controls` components.\n* @mixin altspace-tracked-controls\n* @memberof altspace\n*/\nAFRAME.registerComponent('altspace-tracked-controls', {\n  init: function () {\n\tthis.gamepadIndex = null;\n\tthis.trackedControlsSystem = document.querySelector('a-scene').systems['tracked-controls'];\n\tthis.systemGamepads = 0;\n\taltspace.getGamepads();\n  },\n  tick: function () {\n\t  if (\n\t\tthis.trackedControlsSystem &&\n\t\tthis.systemGamepads !== this.trackedControlsSystem.controllers.length &&\n\t\twindow.altspace && altspace.getGamepads && altspace.getGamepads().length\n\t  ) {\n\t\tvar components = this.el.components;\n\t\tif (components['paint-controls']) {\n\t\t  this.gamepadIndex = components['paint-controls'].data.hand === 'left' ? 2 : 1;\n\t\t}\n\t\tif (this.gamepadIndex === null && components['hand-controls']) {\n\t\t  this.gamepadIndex = components['hand-controls'].data === 'left' ? 2 : 1;\n\t\t}\n\t\tif (this.gamepadIndex === null && components['vive-controls']) {\n\t\t  this.gamepadIndex = components['vive-controls'].data.hand === 'left' ? 2 : 1;\n\t\t}\n\t\tif (this.gamepadIndex === null && components['tracked-controls']) {\n\t\t  this.gamepadIndex = components['tracked-controls'].data.controller;\n\t\t}\n\t\tthis.el.setAttribute('tracked-controls', 'id', altspace.getGamepads()[this.gamepadIndex].id);\n\t\tthis.el.setAttribute('tracked-controls', 'controller', 0);\n\t\tthis.systemGamepads = this.trackedControlsSystem.controllers.length;\n\t  }\n  }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/altspace-tracked-controls.js\n ** module id = 2\n ** module chunks = 0\n **/","/**\n* @namespace altspace\n*/\n\n/**\n* The altspace component makes A-Frame apps compatible with AltspaceVR.\n*\n* **Note**: If you use the `embedded` A-Frame component on your scene, you must include it *before* the `altspace` component, or your app will silently fail.\n* @mixin altspace\n* @memberof altspace\n* @property {boolean} usePixelScale=`false` - Allows you to use A-Frame units as CSS pixels.\n* This is the default behavior for three.js apps, but not for A-Frame apps.\n* @property {string} verticalAlign=`middle` - Puts the origin at the `bottom`, `middle` (default),\n* or `top` of the Altspace enclosure.\n* @property {boolean} enclosuresOnly=`true` - Prevents the scene from being created if\n* enclosure is flat.\n* @property {boolean} fullspace=`false` - Puts the app into fullspace mode.\n*\n* @example\n* <head>\n*   <title>My A-Frame Scene</title>\n*   <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\n*   <script src=\"https://cdn.rawgit.com/AltspaceVR/aframe-altspace-component/v1.3.2/dist/aframe-altspace-component.min.js\"></script>\n* </head>\n* <body>\n*   <a-scene altspace>\n*     <a-entity geometry=\"primitive: box\" material=\"color: #C03546\"></a-entity>\n*   </a-scene>\n* </body>\n*/\nAFRAME.registerComponent('altspace', {\n  version: '1.3.2',\n  schema: {\n\tusePixelScale: { type: 'boolean', default: 'false'},\n\tverticalAlign: { type: 'string',  default: 'middle'},\n\tenclosuresOnly:{ type: 'boolean', default: 'true'},\n\tfullspace:     { type: 'boolean', default: 'false'}\n  },\n\n  /*\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n\tif (!(this.el.object3D instanceof THREE.Scene)) {\n\t  console.warn('aframe-altspace-component can only be attached to a-scene');\n\t  return;\n\t}\n\n\tif (window.altspace && window.altspace.inClient) {\n\t  this.el.setAttribute('vr-mode-ui', {enabled: false});\n\t  this.initRenderer();\n\t  this.initCursorEvents();\n\t  this.initCollisionEvents();\n\t} else {\n\t  console.warn('aframe-altspace-component only works inside of AltspaceVR');\n\t}\n\n  },\n\n  /*\n   * Called on every single tick or render loop of the scene.\n   */\n  tick: function (t, dt) {\n      if(this.el.object3D.updateAllBehaviors)\n        this.el.object3D.updateAllBehaviors();\n  },\n\n  /*\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /*\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /*\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /*\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { },\n\n\n  /********** Helper Methods **********/\n\n  /*\n   * Swap in Altspace renderer when running in AltspaceVR.\n   */\n  initRenderer: function () {\n\n\tvar scene = this.el.object3D;\n\taltspace.getEnclosure().then(function(e)\n\t{\n\t\tif(this.data.fullspace){\n\t\t\te.requestFullspace();\n\t\t\te.addEventListener('fullspacechange', function(){\n\t\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\n\t\t\t});\n\t\t}\n\n\t\tif (!this.data.usePixelScale || this.data.fullspace){\n\t\t\tscene.scale.setScalar(e.pixelsPerMeter);\n\t\t}\n\n\t  switch (this.data.verticalAlign) {\n\t\tcase 'bottom':\n\t\t  scene.position.y -= e.innerHeight / 2;\n\t\t  break;\n\t\tcase 'top':\n\t\t  scene.position.y += e.innerHeight / 2;\n\t\t  break;\n\t\tcase 'middle':\n\t\t  break;\n\t\tdefault:\n\t\t  console.warn('Unexpected value for verticalAlign: ', this.data.verticalAlign);\n\t  }\n\n\t  if(this.data.enclosuresOnly && e.innerDepth === 1){\n\t\tthis.el.renderer.render(new THREE.Scene());\n\t\tthis.el.renderer = this.el.effect = oldRenderer;\n\n\t  }\n\t}.bind(this));\n\n\tvar oldRenderer = this.el.renderer;\n\tvar renderer = this.el.renderer = this.el.effect = altspace.getThreeJSRenderer({\n\t  aframeComponentVersion: this.version\n\t});\n\tvar noop = function() {};\n\trenderer.setSize = noop;\n\trenderer.setPixelRatio = noop;\n\trenderer.setClearColor = noop;\n\trenderer.clear = noop;\n\trenderer.enableScissorTest = noop;\n\trenderer.setScissor = noop;\n\trenderer.setViewport = noop;\n\trenderer.getPixelRatio = noop;\n\trenderer.getMaxAnisotropy = noop;\n\trenderer.setFaceCulling = noop;\n\trenderer.context = {canvas: {}};\n\trenderer.shadowMap = {};\n\n  },\n\n  /*\n   * Emulate A-Frame cursor events when running in altspaceVR.\n   */\n  initCursorEvents: function() {\n\n\tvar scene = this.el.object3D;\n\tvar cursorEl = document.querySelector('a-cursor') || document.querySelector('a-entity[cursor]');\n\tif (cursorEl) {\n\t  // Hide A-Frame cursor mesh.\n\t  cursorEl.setAttribute('material', 'transparent', true);\n\t  cursorEl.setAttribute('material', 'opacity', 0.0);\n\t}\n\n\tvar emit = function (eventName, event) {\n\t\t// Fire events on intersected object and A-Frame cursor.\n\t\tvar targetEl = event.target.el;\n\t\tif (cursorEl) cursorEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\n\t\tif (targetEl) targetEl.emit(eventName, { target: targetEl, ray: event.ray, point: event.point });\n\t} ;\n\n\tvar cursordownObj = null;\n\tscene.addEventListener('cursordown', function(event) {\n\t  cursordownObj = event.target;\n\t  emit('mousedown', event);\n\t});\n\n\tscene.addEventListener('cursorup', function(event) {\n\t  emit('mouseup', event);\n\t  if (event.target.uuid === cursordownObj.uuid) {\n\t\temit('click', event);\n\t  }\n\t  cursordownObj = null;\n\t});\n\n\tscene.addEventListener('cursorenter', function(event) {\n\t  if (!event.target.el) { return; }\n\t  event.target.el.addState('hovered');\n\t  if (cursorEl) cursorEl.addState('hovering');\n\t  emit('mouseenter', event);\n\t});\n\n\tscene.addEventListener('cursorleave', function(event) {\n\t  if (!event.target.el) { return; }\n\t  event.target.el.removeState('hovered');\n\t  if (cursorEl) cursorEl.removeState('hovering');\n\t  emit('mouseleave', event);\n\t});\n\n  },\n\n  initCollisionEvents: function () {\n\n\tvar scene = this.el.object3D;\n\n\tvar emit = function (eventName, event) {\n\t\tvar targetEl = event.target.el;\n\t\tif (!targetEl) return;\n\n\t\t//remap target and other from object3Ds to aframe element\n\t\tevent.target = targetEl;\n\t\tif (event.other && event.other.el) {\n\t\t\tevent.other = event.other.el;\n\t\t}\n\t\ttargetEl.emit(eventName, event);\n\t};\n\n\tscene.addEventListener('collisionenter', function (event) {\n\t\temit('collisionenter', event);\n\t});\n\n\tscene.addEventListener('collisionexit', function (event) {\n\t\temit('collisionexit', event);\n\t});\n\n\tscene.addEventListener('triggerenter', function (event) {\n\t\temit('triggerenter', event);\n\t});\n\n\tscene.addEventListener('triggerexit', function (event) {\n\t\temit('triggerexit', event);\n\t});\n\n  }\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/altspace.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n* Instantiates objects on an event trigger, adds them to the scene and syncs their creation across clients.\n* The instantiated objects are built using the specified mixins.\n* @mixin instantiator\n* @memberof sync\n* @prop {string} on - An event that triggers the instantiation\n* @prop {string} mixin - A space-separated list of mixins that should be used to instantiate the object.\n* @prop {string} parent='a-scene' - A selector that determines which object the instantiated object will be added to.\n* @prop {string} group='main' - An identifier which can be used to group instantiated objects.\n* @prop {boolean} removeLast=true - Whether the last object instantiated in a group should be removed before\n*\tinstantiating a new object.\n*/\nAFRAME.registerComponent('instantiator', {\n\tschema: {\n\t\ton: {type: 'string'},\n\t\tmixin: {type: 'string'},\n\t\tparent: {type: 'selector', default: 'a-scene'},\n\t\tgroup: {type: 'string', default: 'main'},\n\t\tremoveLast: {type: 'boolean', default: 'true'},\n\t},\n\tinit: function () {\n\t\tthis.onHandler = this.instantiateOrToggle.bind(this);\n\t\tthis.el.addEventListener(this.data.on, this.onHandler);\n\t\tthis.syncSys = this.el.sceneEl.systems['sync-system'];\n\t},\n\tinstantiateOrToggle: function () {\n\t\tvar userGroup = this.data.group + '-' + this.syncSys.userInfo.userId;\n\t\tif (this.data.removeLast) {\n\t\t\tthis.syncSys.removeLast(userGroup).then(function (lastInstantiatorId) {\n\t\t\t\tif (lastInstantiatorId !== this.el.id) {\n\t\t\t\t\tthis.syncSys.instantiate(this.data.mixin, this.data.parent, this.el, userGroup, this.el.id)\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t}\n\t\telse {\n\t\t\tthis.syncSys.instantiate(this.el.id, userGroup, this.data.mixin, this.data.parent)\n\t\t}\n\t},\n\tremove: function () {\n\t\tthis.el.removeEventListener(this.data.on, this.onHandler);\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/instantiator.js\n ** module id = 4\n ** module chunks = 0\n **/","\n/**\n* This set of components map to various objects and effects that are provided\n* natively by AltspaceVR. Your management of these objects may be limited to\n* some degree, but they will tend to be more performant than SDK equivalents,\n* or may provide some functionality not otherwise available to the SDK.\n* @namespace native\n*/\n(function () {\n\tif (!window.altspace || !altspace.inClient) {\n\t\tvar noop = function () {};\n\t\twindow.altspace = {\n\t\t\taddNativeComponent: noop,\n\t\t\tupdateNativeComponent: noop,\n\t\t\tremoveNativeComponent: noop\n\t\t};\n\t}\n\n\tvar placeholderGeometry = new THREE.BoxGeometry(0.001, 0.001, 0.001);\n\tvar placeholderMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n\tplaceholderMaterial.visible = false;\n\tvar PlaceholderMesh = function () {\n\t\tTHREE.Mesh.call( this, placeholderGeometry, placeholderMaterial );\n\t};\n\tPlaceholderMesh.prototype = Object.create( THREE.Mesh.prototype );\n\tPlaceholderMesh.prototype.constructor = THREE.PlaceholderMesh;\n\n\tfunction meshInit(mesh) {\n\t\t//If you attach native components to an entity, it will not use a default collider\n\t\tmesh.userData.altspace = mesh.userData.altspace || {};\n\t\tmesh.userData.altspace.collider = mesh.userData.altspace.collider || {};\n\t\tmesh.userData.altspace.collider.enabled = false;\n\n\t\taltspace.addNativeComponent(mesh, this.name);\n\t}\n\n\tfunction nativeComponentInit() {\n\t\tvar mesh = this.el.getOrCreateObject3D('mesh', PlaceholderMesh);\n\t\tthis.currentMesh = mesh;\n\t\tmeshInit.call(this, mesh);\n\t\t//to pass defaults\n\t\tthis.update(this.data);\n\n\t\tthis.el.addEventListener('object3dset', function (event) {\n\t\t\tif (event.detail.type !== 'mesh') { return; }\n\t\t\taltspace.removeNativeComponent(this.currentMesh, this.name);\n\n\t\t\tthis.currentMesh = this.el.object3DMap.mesh;\n\t\t\tmeshInit.call(this, this.currentMesh);\n\t\t\t//to pass defaults\n\t\t\tthis.update(this.data);\n\t\t}.bind(this));\n\t}\n\tfunction nativeComponentRemove() {\n\t\taltspace.removeNativeComponent(this.el.object3DMap.mesh, this.name);\n\t}\n\tfunction nativeComponentUpdate() {\n\t\taltspace.updateNativeComponent(this.el.object3DMap.mesh, this.name, this.data);\n\t}\n\n\tfunction callComponent(functionName, functionArguments) {\n\t\taltspace.callNativeComponent(this.el.object3DMap.mesh, this.name, functionName, functionArguments)\n\t}\n\n\t/**\n\t* Attach a given native object to this entity.\n\t* @mixin n-object\n\t* @memberof native\n\t* @prop {string} res - The identifier for the resource you want. This component\n\t* can accept all resources except for `interactables`.\n\t* @example <a-entity n-object='res:architecture/wall-4w-4h'></a-entity>\n\t*/\n\tAFRAME.registerComponent('n-object', {\n\t\tschema: {\n\t\t\tres: {type: 'string'}\n\t\t},\n\t\tinit: nativeComponentInit,\n\t\tupdate: nativeComponentUpdate,\n\t\tremove: nativeComponentRemove\n\t});\n\n\t/**\n\t* Create an object that spawns additional copies of itself when grabbed by a user (the copies are not spawners themselves).\n\t* These copies will be physically interactive and automatically synchronized\n\t* between users.\n\t* @mixin n-spawner\n\t* @memberof native\n\t* @prop {string} res - The identifier for the resource you want. This component\n\t* can only accept resources of type `interactables`.\n\t* @example <a-entity n-spawner='res: interactables/basketball'></a-entity>\n\t*/\n\tAFRAME.registerComponent('n-spawner', {\n\t\tschema: {\n\t\t\tres: {type: 'string'}\n\t\t},\n\t\tinit: nativeComponentInit,\n\t\tupdate: nativeComponentUpdate,\n\t\tremove: nativeComponentRemove\n\t});\n\n\t/**\n\t* Creates dynamic 2D text on the entity. The text will wrap automatically based on the width and height provided.\n\t* This text will be clearer than texture-based text and more performant than geometry-based test.\n\t* @mixin n-text\n\t* @memberof native\n\t* @prop {string} text - The text to be drawn.\n\t* @prop {number} fontSize=10 - The height of the letters. 10pt ~= 1m\n\t* @prop {number} width=10 - The width of the text area in meters. If the\n\t* text is wider than this value, the overflow will be wrapped to the next line.\n\t* @prop {number} height=1 - The height of the text area in meters. If the\n\t* text is taller than this value, the overflow will be cut off.\n\t* @prop {string} horizontalAlign=middle - The horizontal anchor point for\n\t* the text. Can be `left`, `middle`, or `right`.\n\t* @prop {string} verticalAlign=middle - The vertical anchor point for the\n\t* text. Can be `top`, `middle`, or `bottom`.\n\t*/\n\tAFRAME.registerComponent('n-text', {\n\t\tinit: nativeComponentInit,\n\t\tupdate: nativeComponentUpdate,\n\t\tremove: nativeComponentRemove,\n\t\tschema: {\n\t\t\ttext: { default: '', type: 'string' },\n\t\t\t/*color: { default: 'white',\n\t\t\t\tparse: function(value) {\n\t\t\t\t\treturn parseFloat(value, 10);\n\t\t\t\t},\n\t\t\t\tstringify: function(value) {\n\t\t\t\t\treturn value.toString();\n\t\t\t\t}},*/\n\t\t\tfontSize: { default: '10', type: 'int' },//roughly a meter tall\n\t\t\twidth: { default: '10', type: 'number' },//in meters\n\t\t\theight: { default: '1', type: 'number' },//in meters\n\t\t\thorizontalAlign: { default: 'middle'},\n\t\t\tverticalAlign: { default: 'middle'}\n\t\t}\n\t});\n\n\t//object: collides against: objects / enviroment / cursor\n\t//environment: can be teleported onto, and collides against: objects / environment / cursor\n\t//hologram: collides against: cursor / holograms\n\n\t/**\n\t* Abstract base class for {@link n.n-sphere-collider}, {@link n.n-box-collider},\n\t* {@link n.n-capsule-collider}, and {@link n.n-mesh-collider}. You cannot use\n\t* this class directly, but instead you should add one of those components\n\t* to your objects.\n\t* @name n-collider\n\t* @mixin n-collider\n\t* @memberof native\n\t* @prop {vec3} center=0,0,0 - The offset of the collider in local space.\n\t* @prop {string} type=hologram - The type of collider, one of: `object` | `environment` | `hologram`.\n\t* Object colliders collide with other objects, the environment, and the cursor.\n\t* Environment colliders collide with everything objects do, but you can also\n\t* teleport onto them. Hologram colliders only collide with other holograms and\n\t* the cursor.\n\t*/\n\n\t/**\n\t* Create a spherical collider on this entity.\n\t* @mixin n-sphere-collider\n\t* @memberof native\n\t* @extends native.n-collider\n\t* @prop {number} radius=1 - The size of the collider in meters.\n\t*/\n\tAFRAME.registerComponent('n-sphere-collider', {\n\t\tinit:nativeComponentInit,\n\t\tremove: nativeComponentRemove,\n\t\tupdate: nativeComponentUpdate,\n\t\tschema: {\n\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\tcenter: { type: 'vec3' },\n\t\t\tradius: { default: '0', type: 'number' },\n\t\t\ttype: {default: 'object'}\n\t\t}\n\t});\n\n\n\t/**\n\t* Create a box-shaped collider on this entity.\n\t* @mixin n-box-collider\n\t* @memberof native\n\t* @extends native.n-collider\n\t* @prop {vec3} size=1,1,1 - The dimensions of the collider.\n\t*/\n\tAFRAME.registerComponent('n-box-collider', {\n\t\tinit:nativeComponentInit,\n\t\tremove: nativeComponentRemove,\n\t\tupdate: nativeComponentUpdate,\n\t\tschema: {\n\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\tcenter: { type: 'vec3' },\n\t\t\tsize: { type: 'vec3' },\n\t\t\ttype: {default: 'object'}\n\t\t}\n\t});\n\n\t/**\n\t* Create a capsule-shaped collider on this entity. Capsules\n\t* are a union of a cylinder and two spheres on top and bottom.\n\t* @mixin n-capsule-collider\n\t* @memberof native\n\t* @extends native.n-collider\n\t* @prop {number} radius=1 - The radius of the capsule in meters.\n\t* @prop {number} height=1 - The height of the shaft of the capsule in meters.\n\t* @prop {string} direction=y - The axis with which the capsule is aligned.\n\t* One of `x`, `y`, or `z`.\n\t*/\n\tAFRAME.registerComponent('n-capsule-collider', {\n\t\tinit:nativeComponentInit,\n\t\tremove: nativeComponentRemove,\n\t\tupdate: nativeComponentUpdate,\n\t\tschema: {\n\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\tcenter: { type: 'vec3' },\n\t\t\tradius: { default: '0', type: 'number' },\n\t\t\theight: { default: '0', type: 'number' },\n\t\t\tdirection: { default: 'y' },\n\t\t\ttype: {default: 'object'}\n\t\t}\n\t});\n\n\t/**\n\t* Enable collision for the entire attached mesh. This is expensive to evaluate, so should only be used on\n\t* low-poly meshes.\n\t* @mixin n-mesh-collider\n\t* @memberof native\n\t* @extends native.n-collider\n\t* @example <a-box n-mesh-collider></a-box>\n\t* @prop {bool} convex=true - Whether the collider should be convex or concave. Set this to false if you have holes\n\t* in your mesh. Convex colliders are limited to 255 triangles. Note: concave colliders can be significantly more\n\t* expensive comparet to conves colliders.\n\t*/\n\tAFRAME.registerComponent('n-mesh-collider', {\n\t\t_forEachMesh: function (func) {\n\t\t\tvar obj = this.el.object3DMap.mesh;\n\t\t\tif (!obj) { return; }\n\t\t\tif (obj instanceof THREE.Mesh) {\n\t\t\t\tfunc(obj);\n\t\t\t}\n\t\t\tobj.traverse(function (childObj) {\n\t\t\t\tif (childObj instanceof THREE.Mesh) {\n\t\t\t\t\tfunc(childObj);\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t},\n\t\t_initObj: function () {\n\t\t\tthis._forEachMesh(function (mesh) {\n\t\t\t\tmeshInit.call(this, mesh);\n\n\t\t\t\t//to pass defaults\n\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\n\t\t\t}.bind(this));\n\t\t},\n\t\tinit: function () {\n\t\t\t// Allow a-frame to create a PlaceholderMesh if there isn't already one, so that the native collider is\n\t\t\t// registered.\n\t\t\tthis.el.getOrCreateObject3D('mesh', PlaceholderMesh);\n\n\t\t\t// Initialize the existing mesh\n\t\t\tthis._initObj();\n\n\t\t\tthis.el.addEventListener('model-loaded', function () {\n\t\t\t\t// Re-initialize the collider if a new model is loaded\n\t\t\t\tthis._initObj();\n\t\t\t}.bind(this));\n\t\t},\n\t\tremove: function () {\n\t\t\tthis._forEachMesh(function (mesh) {\n\t\t\t\taltspace.removeNativeComponent(mesh, this.name);\n\t\t\t}.bind(this));\n\t\t},\n\t\tupdate: function () {\n\t\t\tthis._forEachMesh(function (mesh) {\n\t\t\t\taltspace.updateNativeComponent(mesh, this.name, this.data);\n\t\t\t}.bind(this));\n\t\t},\n\t\tschema: {\n\t\t\tisTrigger: { default: false, type: 'boolean' },\n\t\t\tconvex: { default: true, type: 'boolean' },\n\t\t\ttype: {default: 'object'}\n\t\t}\n\t});\n\n\t/**\n\t* Make the object's +Z always face the viewer. Currently will only directly apply to main mesh or native component on the attached entity, not any children or submeshes.\n\t* @mixin n-billboard\n\t* @memberof native\n\t* @example <a-plane n-billboard></a-plane>\n\t*/\n\tAFRAME.registerComponent('n-billboard', {\n\t\tinit:nativeComponentInit,\n\t\tremove: nativeComponentRemove,\n\t});\n\n\t/**\n\t* A container keeps a running tally of how many objects are within\n\t* its bounds, and adds and removes the states `container-full` and\n\t* `container-empty` based on the current count of objects. Can fire three\n\t* special events: `container-full`, `container-empty`, and `container-count-changed`.\n\t* @mixin n-container\n\t* @memberof native\n\t* @prop {number} capacity=4 - The value at which the container will fire the\n\t* `container-full` event.\n\t*/\n\tAFRAME.registerComponent('n-container', {\n\t\tinit: function(){\n\t\t\tnativeComponentInit.call(this);\n\n\t\t\tvar el = this.el;\n\t\t\tvar component = this;\n\n\t\t\tel.addEventListener('stateadded', function(event){\n\t\t\t\tif(event.detail.state === 'container-full'){\n\t\t\t\t\tel.emit('container-full');\n\t\t\t\t}\n\t\t\t\tif(event.detail.state === 'container-empty'){\n\t\t\t\t\tel.emit('container-empty');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tel.addEventListener('container-count-changed', function(event){\n\t\t\t\tcomponent.count = event.detail.count;\n\t\t\t});\n\t\t},\n\t\tremove: nativeComponentRemove,\n\t\tupdate: nativeComponentUpdate,\n\t\tschema: {\n\t\t\tcapacity: { default: 4, type: 'number' },\n\t\t}\n\t});\n\n\t/**\n\t* Play the sound given by the `src` or `res` property from the location\n\t* of the entity.\n\t* @mixin n-sound\n\t* @memberof native\n\t* @prop {string} res - The resource identifier for a built-in sound clip.\n\t* @prop {string} src - A URL to an external sound clip. The sound can be in WAV, OGG or MP3 format. However. only\n\t* WAV is supported on all platforms. MP3 is supported on Gear VR and OGG is supported on desktop.\n\t* @prop {string} on - The name of the event that will play this sound clip.\n\t* @prop {boolean} loop=false - Tells the clip to loop back to the beginning of the clip\n\t* once it's finished.\n\t* @prop {boolean} autoplay=false - Tells the clip to start automatically when\n\t* the scene loads, instead of waiting for `playSound()`.\n\t* @prop {boolean} oneshot=false - Tells the clip to clean itself up when it\n\t* finishes playing. Allows for overlapping instances of the sound.\n\t* @prop {number} volume=1 - The volume of the clip, from [0,1].\n\t* @prop {number} spatialBlend=1 - How spatialized a sound is, from [0,1].\n\t* A value of 1 will be fully localized, and the sound will pan left and\n\t* right as you turn your head. A value of 0 makes it non-spatialized, and\n\t* it will always be heard in both ears.\n\t* @prop {number} pitch=1 - The speed multiplier for the sound. 0.5 is one\n\t* octave down, and 2 is one octave up.\n\t* @prop {number} minDistance=1 - Inside this distance in meters,\n\t* the sound volume is at full volume.\n\t* @prop {number} maxDistance=12 - If rolloff is 'logarithmic', the sound will stop attenuating at this distance.\n\t* If rolloff is 'linear' or 'cosine', the sound will be silent at this distance.\n\t* @prop {string} rolloff='logarithmic' - Set this to 'linear' or 'cosine' if you want to cut sounds off at a\n\t* maxDistance.\n\t*/\n\t/**\n\t* Fired when a sound has loaded and is ready to be played\n\t* @event native.n-sound#n-sound-loaded\n\t*/\n\tAFRAME.registerComponent('n-sound', {\n\t\tinit: function () {\n\t\t\tvar src = this.data.src;\n\t\t\tif (src && !src.startsWith('http')) {\n\t\t\t\tif (src.startsWith('/')) {\n\t\t\t\t\tthis.data.src = location.origin + src;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar currPath = location.pathname;\n\t\t\t\t\tif (!currPath.endsWith('/')) {\n\t\t\t\t\t\tcurrPath = location.pathname.split('/').slice(0, -1).join('/') + '/';\n\t\t\t\t\t}\n\t\t\t\t\tthis.data.src = location.origin + currPath + src;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnativeComponentInit.call(this);\n\t\t},\n\n\t\t/**\n\t\t* Stop the playing sound, and preserve position in clip.\n\t\t* @method native.n-sound#pauseSound\n\t\t*/\n\t\tpauseSound: function () {\n\t\t\tcallComponent.call(this, 'pause');\n\t\t\tthis.el.emit('sound-paused');\n\t\t},\n\n\t\t/**\n\t\t* Start the sound playing.\n\t\t* @method native.n-sound#playSound\n\t\t*/\n\t\tplaySound: function () {\n\t\t\tcallComponent.call(this, 'play');\n\t\t\tthis.el.emit('sound-played');\n\t\t},\n\n\t\t/**\n\t\t* Jump to a position in the clip.\n\t\t* @method native.n-sound#seek\n\t\t* @param {number} time - The time in milliseconds to jump to.\n\t\t*/\n\t\tseek: function (time) {\n\t\t\tcallComponent.call(this, 'seek', {time: time});\n\t\t},\n\t\tremove: function () {\n\t\t\tnativeComponentRemove.call(this);\n\t\t\tif (this.playHandler) {\n\t\t\t\tthis.el.removeEventListener(this.data.on, this.playHandler);\n\t\t\t}\n\t\t},\n\t\tupdate: function (oldData) {\n\t\t\tnativeComponentUpdate.call(this, oldData);\n\t\t\tif (this.playHandler) {\n\t\t\t\tthis.el.removeEventListener(oldData.on, this.playHandler);\n\t\t\t}\n\t\t\tif (this.data.on) {\n\t\t\t\tthis.playHandler = this.playSound.bind(this);\n\t\t\t\tthis.el.addEventListener(this.data.on, this.playHandler);\n\t\t\t}\n\t\t},\n\t\tschema: {\n\t\t\ton: { type: 'string' },\n\t\t\tres: { type: 'string' },\n\t\t\tsrc: { type: 'string' },\n\t\t\tloop: { type: 'boolean' },\n\t\t\tvolume: { type: 'number', default: 1 },\n\t\t\tautoplay: { type: 'boolean' },\n\t\t\toneshot: { type: 'boolean' },\n\t\t\tspatialBlend: { type: 'float', default: 1 },\n\t\t\tpitch: { type: 'float', default: 1 },\n\t\t\tminDistance: { type: 'float', default: 1 },\n\t\t\tmaxDistance: { type: 'float', default: 12 },\n\t\t\trolloff: { type: 'string', default: 'logarithmic' },\n\t\t}\n\t});\n\n\t/**\n\t* Parents an entity to a joint on the avatar skeleton.\n\t* @mixin n-skeleton-parent\n\t* @memberof native\n\t* @prop {string} part - One of 'eye, 'head', 'neck', 'spine', 'hips', 'upper-leg', 'lower-leg', 'foot', 'toes', \n\t*\t'shoulder', 'upper-arm', 'lower-arm', 'hand', 'thumb', 'index', 'middle', 'ring' or 'pinky'.\n\t* @prop {string} [side='center'] - Side of the body. Either 'left', 'center' or 'right'\n\t* @prop {int} [index=0] - Bone index. e.g. Which knuckle joint to attach to.\n\t* @prop {string} [userId] - Id of the user to which the entity should be attached. Defaults to the local user.\n\t*/\n\tAFRAME.registerComponent('n-skeleton-parent', {\n\t\tschema: {\n\t\t\tpart: {type: 'string'},\n\t\t\tside: {type: 'string', default: 'center'},\n\t\t\tindex: {type: 'int', default: 0},\n\t\t\tuserId: {type: 'string'}\n\t\t},\n\t\tinit: nativeComponentInit,\n\t\tupdate: nativeComponentUpdate,\n\t\tremove: nativeComponentRemove\n\t});\n\n\t/**\n\t* Parents an entity to the cockpit.\n\t* @mixin n-cockpit-parent\n\t* @memberof native\n\t*/\n\tAFRAME.registerComponent('n-cockpit-parent', {\n\t\tinit: nativeComponentInit,\n\t\tremove: nativeComponentRemove\n\t});\n\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/native-components.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * Instantiates an entity for each user using [sync-system]{@link sync.sync-system}.\n * @mixin one-per-user\n * @memberof sync\n * @prop {string} mixin - A comma-separated list of mixin ids that are used to instantiate the object.\n * @prop {string} [parent] - A selector specifying which element should be the parent of the instantiated entity.\n *\tDefaults to the parent node.\n */\nAFRAME.registerComponent('one-per-user', {\n\tschema: {\n\t\tmixin: {type: 'string'},\n\t\tparent: {type: 'selector'}\n\t},\n\tinit: function () {\n\t\tvar scene = document.querySelector('a-scene');\n\t\tthis.syncSys = scene.systems['sync-system'];\n\t\tthis.syncSys.instantiate(this.data.mixin, this.data.parent || this.el.parentNode, this.el)\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/one-per-user.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n* Sync the color property of the object between clients.\n* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\n* {@link sync.sync} component on the target entity.\n* @mixin sync-color\n* @memberof sync\n*/\nAFRAME.registerComponent('sync-color',\n{\n\tdependencies: ['sync'],\n\tschema: {\n\t},\n\tinit: function () {\n\t\tvar component = this;\n\t\tvar sync = component.el.components.sync;\n\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\n\n\t\tfunction start(){\n\t\t\tvar colorRef = sync.dataRef.child('material/color');\n\n\t\t\tvar refChangedLocked = false;\n\n\t\t\tvar firstValue = true;\n\n\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\n\t\t\t\tvar name = event.detail.name;\n\t\t\t\tvar oldData = event.detail.oldData;\n\t\t\t\tvar newData = event.detail.newData;\n\n\t\t\t\tif (name !== 'material') return;\n\t\t\t\tif (refChangedLocked) return;\n\n\t\t\t\tif (oldData.color !== newData.color) {\n\t\t\t\t\tif(sync.isMine){\n\t\t\t\t\t\tsetTimeout(function() {//For some reason A-Frame has a misconfigured material reference if we do this too early\n\t\t\t\t\t\t\tcolorRef.set(newData.color);\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcolorRef.on('value', function (snapshot) {\n\t\t\t\tif (sync.isMine && !firstValue) return;\n\t\t\t\tvar color = snapshot.val();\n\n\t\t\t\trefChangedLocked = true;\n\t\t\t\tcomponent.el.setAttribute('material', 'color', color);\n\t\t\t\trefChangedLocked = false;\n\n\t\t\t\tfirstValue = false;\n\t\t\t});\n\t\t}\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-color.js\n ** module id = 8\n ** module chunks = 0\n **/","/**\n * Syncs the attributes of an n-skeleton-parent component across clients\n * @mixin sync-n-skeleton-parent\n * @memberof sync\n */\nAFRAME.registerComponent('sync-n-skeleton-parent', {\n\tdependencies: ['sync'],\n\tinit: function () {\n\t\tvar scene = document.querySelector('a-scene');\n\t\tthis.syncSys = scene.systems['sync-system'];\n\t\tthis.sync = this.el.components.sync;\n\t\tif(this.syncSys.isConnected) { this._start(); }\n\t\telse { scene.addEventListener('connected', this._start.bind(this)); }\n\t},\n\tgetDataRef: function (propertyName) {\n\t\treturn this.sync.dataRef.child('n-skeleton-parent/' + propertyName);\n\t},\n\t_start: function () {\n\t\tthis.attributeRef = this.sync.dataRef.child('n-skeleton-parent');\n\t\tthis.attributeRef.on('value', function (snapshot) {\n\t\t\tvar val = snapshot.val();\n\t\t\tif (!val) { return; }\n\t\t\tthis.el.setAttribute('n-skeleton-parent', val);\n\t\t}.bind(this));\n\n\t\t// dataset.creatorUserId is defined when the entity is instantiated via the sync system.\n\t\tif (this.el.dataset.creatorUserId) {\n\t\t\tthis.attributeRef.set(Object.assign(\n\t\t\t\t{}, this.el.components['n-skeleton-parent'].data, {userId: this.el.dataset.creatorUserId}));\n\t\t}\n\n\t\tthis.el.addEventListener('componentchanged', function (event) {\n\t\t\tif (!this.sync.isMine) return;\n\t\t\tvar name = event.detail.name;\n\t\t\tif (name === 'n-skeleton-parent') {\n\t\t\t\tthis.attributeRef.set(event.detail.newData);\n\t\t\t}\n\t\t}.bind(this));\n\t}\n});\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-n-skeleton-parent.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n* Synchronize the playback state of an {@link n.n-sound} component between clients.\n* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\n* {@link sync.sync} component on the target entity.\n* @mixin sync-n-sound\n* @memberof sync\n*/\nAFRAME.registerComponent('sync-n-sound',\n{\n\tdependencies: ['sync'],\n\tschema: { },\n\tinit: function () {\n\t\tvar component = this;\n\t\tvar sync = component.el.components.sync;\n\t\tvar scene = document.querySelector('a-scene');\n\t\tvar syncSys = scene.systems['sync-system'];\n\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\n\n\t\tfunction start(){\n\t\t\tcomponent.soundStateRef = sync.dataRef.child('sound/state');\n\t\t\tcomponent.soundEventRef = sync.dataRef.child('sound/event');\n\n\t\t\tfunction sendEvent(event) {\n\t\t\t\tif (!sync.isMine) return;\n\t\t\t\tvar event = {\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tsender: syncSys.clientId,\n\t\t\t\t\tel: component.el.id,\n\t\t\t\t\ttime: Date.now()\n\t\t\t\t};\n\t\t\t\tcomponent.soundEventRef.set(event);\n\t\t\t}\n\n\t\t\tcomponent.el.addEventListener('sound-played', sendEvent);\n\t\t\tcomponent.el.addEventListener('sound-paused', sendEvent);\n\n\t\t\tcomponent.soundEventRef.on('value', function (snapshot) {\n\t\t\t\tif (sync.isMine) return;\n\t\t\t\tvar event = snapshot.val();\n\t\t\t\tif (!event) return;\n\t\t\t\tif (event.el === component.el.id) {\n\t\t\t\t\tvar sound = component.el.components['n-sound'];\n\t\t\t\t\tif (event.type === 'sound-played') {\n\t\t\t\t\t\tsound.playSound();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsound.pauseSound();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcomponent.el.addEventListener('componentchanged', function (event) {\n\t\t\t\tif (!sync.isMine) return;\n\t\t\t\tvar name = event.detail.name;\n\t\t\t\tif (name !== 'n-sound') return;\n\t\t\t\tcomponent.soundStateRef.set(event.detail.newData);\n\t\t\t});\n\n\t\t\tcomponent.soundStateRef.on('value', function (snapshot) {\n\t\t\t\tif (sync.isMine) return;\n\t\t\t\tvar state = snapshot.val();\n\t\t\t\tif (!state) return;\n\t\t\t\tcomponent.el.setAttribute('n-sound', state);\n\t\t\t});\n\t\t}\n\t},\n\tremove: function () {\n\t\tthis.soundStateRef.off('value');\n\t\tthis.soundEventRef.off('value');\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-n-sound.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n* Connect to a remote Firebase server, and facilitate synchronization. These\n* options correspond exactly with the configuration options for\n* [altspace.utilities.sync.connect]{@link http://altspacevr.github.io/AltspaceSDK/doc/module-altspace_utilities_sync.html#.connect}.\n* This component must be present on `a-scene` for any other sync components to work.\n* @memberof sync\n* @mixin sync-system\n* @prop {string} author - A unique identifier for you or your organization.\n* @prop {string} app - The name of the app.\n* @prop {string} refUrl - Override the base reference. Set this to use your own Firebase.\n* @prop {string} instance - Override the instance ID. Can also be overridden with\n* a URL parameter.\n*/\n\n/**\n* True if the sync system is connected and ready for syncing.\n* @member sync.sync-system#isConnected\n* @readonly\n*/\n\n/**\n* True if this client is currently the master client.\n* @member sync.sync-system#isMasterClient\n* @readonly\n*/\n\n/**\n* Fired when a connection is established and the sync system is fully initialized.\n* @event sync.sync-system#connected\n* @property {boolean} shouldInitialize - True if this is the first client to establish a connection.\n*/\n\n/**\n* Fired when a client joins.\n* @event sync.sync-system#clientjoined\n* @property {string} id - Guid identifying the client.\n*/\n\n/**\n* Fired when a client leaves.\n* @event sync.sync-system#clientleft\n* @property {string} id - Guid identifying the client.\n*/\nAFRAME.registerSystem('sync-system', {\n\tschema: {\n\t\tauthor: { type: 'string', default: null },\n\t\tapp: { type: 'string', default: null },\n\t\tinstance: { type: 'string', default: null },\n\t\trefUrl: { type: 'string', default: null }\n\t},\n\tinit: function() {\n\t\tvar system = this;\n\n\t\tif(!this.data || !this.data.app){\n\t\t\tconsole.warn('The sync-system must be present on the scene and configured with required data.');\n\t\t\treturn;\n\t\t}\n\n\t\tsystem.isConnected = false;\n\t\tsystem.queuedInstantiations = [];\n\t\tPromise.all([\n\t\t\taltspace.utilities.sync.connect({\n\t\t\t\tauthorId: this.data.author,\n\t\t\t\tappId: this.data.app,\n\t\t\t\tinstanceId: this.data.instance,\n\t\t\t\tbaseRefUrl: this.data.refUrl\n\t\t\t}),\n\t\t\taltspace.getUser()\n\t\t]).then(function(results) {\n\t\t\tthis.connection = results.shift();\n\t\t\tthis.userInfo = results.shift();\n\n\t\t\tthis.sceneRef = this.connection.instance.child('scene');\n\t\t\tthis.clientsRef = this.connection.instance.child('clients');\n\t\t\tthis.instantiatedElementsRef = this.connection.instance.child('instantiatedElements')\n\n\t\t\tthis.instantiatedElementsRef.on('child_added', this.listenToInstantiationGroup.bind(this));\n\t\t\tthis.instantiatedElementsRef.on('child_removed', this.stopListeningToInstantiationGroup.bind(this));\n\n\t\t\t// temporary way of having unique identifiers for each client\n\t\t\tthis.clientId = this.sceneEl.object3D.uuid;\n\t\t\tvar masterClientId;\n\t\t\tthis.clientsRef.on(\"value\", function (snapshot) {\n\t\t\t\tvar clientIds = snapshot.val();\n\n\t\t\t\tvar masterClientKey = Object.keys(clientIds)[0];\n\t\t\t\tmasterClientId = clientIds[masterClientKey];\n\t\t\t});\n\n\t\t\tthis.clientsRef.on('child_added', function(childSnapshot) {\n\t\t\t\tvar joinedClientId = childSnapshot.val();\n\t\t\t\t//let the master client flag get set first\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tsystem.sceneEl.emit('clientjoined', {id: joinedClientId}, false);\n\t\t\t\t}, 0);\n\t\t\t});\n\n\t\t\tthis.clientsRef.on('child_removed', function(childSnapshot) {\n\t\t\t\tvar leftClientId = childSnapshot.val();\n\t\t\t\t//let the master client flag get set first\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tsystem.sceneEl.emit('clientleft', {id: leftClientId}, false);\n\t\t\t\t}, 0);\n\t\t\t});\n\n\t\t\t// add our client ID to the list of connected clients,\n\t\t\t// but have it be automatically removed by firebase if we disconnect for any reason\n\t\t\tthis.clientsRef.push(this.clientId).onDisconnect().remove();\n\n\t\t\tthis.connection.instance.child('initialized').once('value', function (snapshot) {\n\t\t\t\tvar shouldInitialize = !snapshot.val();\n\t\t\t\tsnapshot.ref().set(true);\n\n\t\t\t\tthis.processQueuedInstantiations();\n\n\t\t\t\tsystem.sceneEl.emit('connected', { shouldInitialize: shouldInitialize }, false);\n\t\t\t\tsystem.isConnected = true;\n\t\t\t}.bind(this));\n\n\n\t\t\tObject.defineProperty(this, 'isMasterClient', {\n\t\t\t\tget: function () { return masterClientId === this.clientId; }.bind(this)\n\t\t\t});\n\t\t}.bind(this));\n\t},\n\tlistenToInstantiationGroup: function (snapshot) {\n\t\tsnapshot.ref().on('child_added', this.createElement.bind(this));\n\t\tsnapshot.ref().on('child_removed', this.removeElement.bind(this));\n\t},\n\tstopListeningToInstantiationGroup: function (snapshot) {\n\t\tsnapshot.ref().off('child_added');\n\t\tsnapshot.ref().off('child_removed');\n\t},\n\tprocessQueuedInstantiations: function () {\n\t\tthis.queuedInstantiations.forEach(function (instantiationProps) {\n\t\t\tinstantiationProps.creatorUserId = this.userInfo.userId;\n\t\t\tinstantiationProps.clientId = this.clientId;\n\t\t\tthis.instantiatedElementsRef.child(instantiationProps.groupName).\n\t\t\t\tpush(instantiationProps).\n\t\t\t\tonDisconnect().remove();\n\t\t}.bind(this));\n\t\t// Clear queue.\n\t\tthis.queuedInstantiations.length = 0;\n\t},\n\t/**\n\t* Instantiate an entity with the given mixins.\n\t* @method sync.sync-system#instantiate\n\t* @param {string} mixin - A comma-separated list of mixin ids which should be used to instantiate the entity.\n\t* @param {Element} [parent] - An element to which the entity should be added. Defaults to the scene.\n\t* @param {Element} [el] - The element responsible for instantiating this entity.\n\t* @param {string} [groupName] - A group that the entity should belong to. Used in conjunction with \n\t*\t[removeLast]{@link sync.sync-system#removeLast}.\n\t* @param {string} [instantiatorId] - Used by [removeLast]{@link sync.sync-system#removeLast} to indicate who was \n\t*\tresponsible for the removed entity.\n\t*/\n\tinstantiate: function (mixin, parent, el, groupName, instantiatorId) {\n\t\t// TODO Validation should throw an error instead of a console.error, but A-Frame 0.3.0 doesn't propagate those \n\t\t// correctly.\n\t\tif (!mixin) {\n\t\t\tconsole.error('AltspaceVR: Instantiation requires a mixin value.', el);\n\t\t\treturn;\n\t\t}\n\t\tvar parentWithId = parent && parent.id;\n\t\tvar parentIsScene = parent.nodeName === 'A-SCENE';\n\t\tif (!parentWithId && !parentIsScene) {\n\t\t\tconsole.error('AltspaceVR: Instantiation requires a parent with an id.', el);\n\t\t\treturn;\n\t\t}\n\n\t\tvar parentSelector = parentWithId ? '#' + parent.id : 'a-scene';\n\t\tvar instantiationProps = {\n\t\t\tinstantiatorId: instantiatorId || '',\n\t\t\tgroupName: groupName || 'main',\n\t\t\tmixin: mixin,\n\t\t\tparent: parentSelector\n\t\t};\n\t\tthis.queuedInstantiations.push(instantiationProps);\n\t\tif (this.isConnected) {\n\t\t\tthis.processQueuedInstantiations();\n\t\t}\n\t},\n\t/**\n\t* Remove the last entity instantiated in the given group.\n\t* Returns a Promise which resolves with the instantiatorId associated with the removed entity.\n\t* @method sync.sync-system#removeLast\n\t* @param {string} groupName - Name of the group from which to remove the entity.\n\t* @returns {Promise} \n\t*/\n\tremoveLast: function (groupName) {\n\t\treturn new Promise(function (resolve) {\n\t\t\tthis.instantiatedElementsRef.child(groupName).orderByKey().limitToLast(1).once(\n\t\t\t\t'value',\n\t\t\t\tfunction (snapshot) {\n\t\t\t\t\tif (!snapshot.hasChildren()) { resolve(); return; }\n\t\t\t\t\tvar val = snapshot.val();\n\t\t\t\t\tvar key = Object.keys(val)[0];\n\t\t\t\t\tresolve(val[key].instantiatorId);\n\t\t\t\t\tsnapshot.ref().child(key).remove();\n\t\t\t\t});\n\t\t}.bind(this));\n\t},\n\tcreateElement: function (snapshot) {\n\t\tvar val = snapshot.val();\n\t\tvar key = snapshot.key();\n\t\tvar entityEl = document.createElement('a-entity');\n\t\tentityEl.id = val.groupName + '-instance-' + key;\n\t\tdocument.querySelector(val.parent).appendChild(entityEl);\n\t\tentityEl.setAttribute('mixin', val.mixin);\n\t\tentityEl.dataset.creatorUserId = val.creatorUserId;\n\t},\n\tremoveElement: function (snapshot) {\n\t\tvar val = snapshot.val();\n\t\tvar key = snapshot.key();\n\t\tvar id = val.groupName + '-instance-' + key;\n\t\tvar el = document.querySelector('#' + id);\n\t\tel.parentNode.removeChild(el);\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-system.js\n ** module id = 11\n ** module chunks = 0\n **/","//TODO: We need to figure out a way to recieve our first update without caring about ownership.\n// firstValue is probably not the right way to go, probably something about having sent yet. Need to change for both\n\n/**\n* Synchronize the position, rotation, and scale of this object with all clients.\n* Requires both a {@link sync.sync-system} component on the `a-scene`, and a\n* {@link sync.sync} component on the target entity.\n* @mixin sync-transform\n* @memberof sync\n*/\nAFRAME.registerComponent('sync-transform',\n{\n\tdependencies: ['sync'],\n\tschema: {\n\t},\n\tinit: function () {\n\t\tvar component = this;\n\t\tvar sync = component.el.components.sync;\n\t\tif(sync.isConnected) start(); else component.el.addEventListener('connected', start);\n\n\t\tfunction start(){\n\n\t\t\tvar positionRef = sync.dataRef.child('position');\n\t\t\tvar rotationRef = sync.dataRef.child('rotation');\n\t\t\tvar scaleRef = sync.dataRef.child('scale');\n\n\t\t\tcomponent.updateRate = 100;\n\n\t\t\tvar stoppedAnimations = [];\n\t\t\t//pause all animations on ownership loss\n\t\t\tcomponent.el.addEventListener('ownershiplost', function() {\n\t\t\t\tvar children = component.el.children;\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar tagName = children[i].tagName.toLowerCase();\n\t\t\t\t\tif (tagName === \"a-animation\") {\n\t\t\t\t\t\tstoppedAnimations.push(children[i]);\n\t\t\t\t\t\tchildren[i].stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcomponent.el.addEventListener('ownershipgained', function () {\n\t\t\t\tfor (var i = 0; i < stoppedAnimations.length; i++) {\n\t\t\t\t\tvar animation = stoppedAnimations[i];\n\t\t\t\t\tanimation.start();\n\t\t\t\t}\n\t\t\t\tstoppedAnimations = [];\n\t\t\t});\n\n\t\t\tfunction onTransform(snapshot, componentName) {\n\t\t\t\tif (sync.isMine) return;\n\n\t\t\t\tvar value = snapshot.val();\n\t\t\t\tif (!value) return;\n\n\t\t\t\tcomponent.el.setAttribute(componentName, value);\n\t\t\t}\n\n\t\t\tpositionRef.on('value', function (snapshot) {\n\t\t\t\tonTransform(snapshot, 'position');\n\t\t\t});\n\n\t\t\trotationRef.on('value', function (snapshot) {\n\t\t\t\tonTransform(snapshot, 'rotation');\n\t\t\t});\n\n\t\t\tscaleRef.on('value', function (snapshot) {\n\t\t\t\tonTransform(snapshot, 'scale');\n\t\t\t});\n\n\t\t\tvar sendPosition = throttle(function(value){\n\t\t\t\tpositionRef.set(value);\n\t\t\t}, component.updateRate);\n\n\t\t\tvar sendRotation = throttle(function(value){\n\t\t\t\trotationRef.set(value);\n\t\t\t}, component.updateRate);\n\n\t\t\tvar sendScale = throttle(function(value){\n\t\t\t\tscaleRef.set(value);\n\t\t\t}, component.updateRate);\n\n\t\t\tfunction onComponentChanged(event){\n\t\t\t\tif (!sync.isMine) return;\n\n\t\t\t\tvar name = event.detail.name;\n\t\t\t\tvar newData = event.detail.newData;\n\n\t\t\t\tif (name === 'position') {\n\t\t\t\t\tsendPosition(newData);\n\t\t\t\t} else if (name === 'rotation') {\n\t\t\t\t\tsendRotation(newData);\n\t\t\t\t} else if (name === 'scale') {\n\t\t\t\t\tsendScale(newData);\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//from underscore.js\n\t\t\tfunction throttle(func, wait, options) {\n\t\t\t\tvar timeout, context, args, result;\n\t\t\t\tvar previous = 0;\n\t\t\t\tif (!options) options = {};\n\n\t\t\t\tvar later = function() {\n\t\t\t\t  previous = options.leading === false ? 0 : Date.now();\n\t\t\t\t  timeout = null;\n\t\t\t\t  result = func.apply(context, args);\n\t\t\t\t  if (!timeout) context = args = null;\n\t\t\t\t};\n\n\t\t\t\tvar throttled = function() {\n\t\t\t\t  var now = Date.now();\n\t\t\t\t  if (!previous && options.leading === false) previous = now;\n\t\t\t\t  var remaining = wait - (now - previous);\n\t\t\t\t  context = this;\n\t\t\t\t  args = arguments;\n\t\t\t\t  if (remaining <= 0 || remaining > wait) {\n\t\t\t\t\tif (timeout) {\n\t\t\t\t\t  clearTimeout(timeout);\n\t\t\t\t\t  timeout = null;\n\t\t\t\t\t}\n\t\t\t\t\tprevious = now;\n\t\t\t\t\tresult = func.apply(context, args);\n\t\t\t\t\tif (!timeout) context = args = null;\n\t\t\t\t  } else if (!timeout && options.trailing !== false) {\n\t\t\t\t\ttimeout = setTimeout(later, remaining);\n\t\t\t\t  }\n\t\t\t\t  return result;\n\t\t\t\t};\n\n\t\t\t\tthrottled.cancel = function() {\n\t\t\t\t  clearTimeout(timeout);\n\t\t\t\t  previous = 0;\n\t\t\t\t  timeout = context = args = null;\n\t\t\t\t};\n\n\t\t\t\treturn throttled;\n\t\t\t  };\n\n\n\t\t\tcomponent.el.addEventListener('componentchanged', onComponentChanged);\n\t\t}\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync-transform.js\n ** module id = 12\n ** module chunks = 0\n **/","/**\n* Enables the synchronization of properties of entities. All property sync components\n* require both a {@link sync.sync-system} on `a-scene`, and a {@link sync.sync}\n* on the entity to be synced.\n* @name sync\n* @namespace sync\n* @example\n* <a-scene sync-system='app: example sync; author: altspacevr'>\n*   <a-entity sync='ownOn: cursordown' sync-color></a-entity>\n* </a-scene>\n*/\n\n\n\n/**\n* Enables the synchronization of properties of the entity. Must be used in\n* conjuction with the {@link sync.sync-system} component and a component for a\n* specific property (e.g. {@link sync.sync-transform}).\n* @memberof sync\n* @mixin sync\n* @prop {string} ownOn - The name of the event, or a list of events, that\n* will cause the local client to take ownership of this object. This field\n* cannot be updated after initialization.\n*/\nAFRAME.registerComponent('sync', {\n\tschema: {\n\t\tmode: { default: 'link' },\n\t\townOn: { type: 'string' } //cannot be changed after creation\n\t},\n\tinit: function () {\n\t\tvar scene = document.querySelector('a-scene');\n\t\tvar syncSys = scene.systems['sync-system'];\n\n\t\tvar ref;\n\t\tvar dataRef;\n\t\tvar ownerRef;\n\t\tvar ownerId;\n\t\tvar isMine = false;\n\n\t\tvar component = this;\n\n\t\tcomponent.isConnected = false;\n\n\t\tif(syncSys.isConnected) start(); else scene.addEventListener('connected', start);\n\n\n\t\tif(component.data.ownOn)\n\t\t{\n\t\t\tvar ownershipEvents = component.data.ownOn.split(/[ ,]+/);\n\t\t\tfor(var i = 0, max = ownershipEvents.length; i < max; i++){\n\t\t\t\tcomponent.el.addEventListener(ownershipEvents[i], function(){\n\t\t\t\t\tif(component.isConnected){\n\t\t\t\t\t\tcomponent.takeOwnership();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction start(){\n\t\t\t//Make sure someone always owns an object. If the owner leaves and we are the master client, we will take it.\n\t\t\t//This ensures, for example, that synced animations keep playing\n\t\t\tscene.addEventListener('clientleft', function(event){\n\t\t\t\tvar shouldTakeOwnership = (!ownerId || ownerId === event.detail.id) && syncSys.isMasterClient;\n\n\t\t\t\tif(shouldTakeOwnership) component.takeOwnership();\n\t\t\t});\n\n\t\t\tif (component.data.mode === 'link') {\n\t\t\t\tvar id = component.el.id;\n\t\t\t\tif (!id) {\n\t\t\t\t\tconsole.error('Entities cannot be synced using link mode without an id.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlink(syncSys.sceneRef.child(id));\n\t\t\t\tsetupReceive();\n\n\t\t\t} else {\n\t\t\t\tconsole.error('Unsupported sync mode: ' + component.data.mode);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcomponent.isConnected = true;\n\t\t\tcomponent.el.emit('connected', null, false);\n\t\t}\n\n\t\tfunction link(entityRef) {\n\t\t\tref = entityRef;\n\t\t\tdataRef = ref.child('data');\n\t\t\tcomponent.dataRef = dataRef;\n\t\t\townerRef = ref.child('owner');\n\t\t}\n\n\t\tfunction setupReceive() {\n\n\t\t\t//if nobody has owned the object yet, we will.\n\t\t\townerRef.transaction(function (owner) {\n\t\t\t\tif (owner) return undefined;\n\n\t\t\t\townerRef.onDisconnect().set(null);\n\t\t\t\treturn syncSys.clientId;\n\t\t\t}, function (error, committed) {\n\t\t\t\t// Return since transaction will be called again\n\t\t\t\tif (!committed) { return; }\n\t\t\t\townerRef.on('value', function(snapshot) {\n\t\t\t\t\tvar newOwnerId = snapshot.val();\n\n\t\t\t\t\tvar gained = newOwnerId === syncSys.clientId && !isMine;\n\t\t\t\t\tif (gained) component.el.emit('ownershipgained', null, false);\n\n\n\t\t\t\t\t//note this also fires when we start up without ownership\n\t\t\t\t\tvar lost = newOwnerId !== syncSys.clientId && isMine;\n\t\t\t\t\tif (lost){\n\t\t\t\t\t\tcomponent.el.emit('ownershiplost', null, false);\n\n\t\t\t\t\t\t//we no longer have to clear our ownership when we disconnect\n\t\t\t\t\t\townerRef.onDisconnect().cancel();\n\t\t\t\t\t}\n\n\t\t\t\t\townerId = newOwnerId;\n\n\t\t\t\t\tisMine = newOwnerId === syncSys.clientId;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t* Tell sync to start pushing local property values instead of updating\n\t\t* local from remote values.\n\t\t* @method sync.sync#takeOwnership\n\t\t*/\n\t\tcomponent.takeOwnership = function() {\n\t\t\townerRef.set(syncSys.clientId);\n\n\t\t\t//clear our ownership if we disconnect\n\t\t\t//this is needed if we are the last user in the room, but we expect people to join later\n\t\t\townerRef.onDisconnect().set(null);\n\t\t}\n\n\t\t/**\n\t\t* Indicates whether the sync ownership is yours.\n\t\t* @member sync.sync#isMine\n\t\t* @readonly\n\t\t*/\n\t\tObject.defineProperty(component, 'isMine', {\n\t\t\tget: function () {\n\t\t\t\treturn isMine;//TODO: Should this be state instead?\n\t\t\t}\n\t\t});\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/sync.js\n ** module id = 13\n ** module chunks = 0\n **/","/**\n * The wire component allows you to trigger an event on another entity when an event occurs on an entity\n * @mixin wire\n * @property {string} on Name of an event to listen to\n * @property {string} gained Name of a state to watch for\n * @property {string} lost Name of a state to watch for\n * @property {string} emit Name of an event to trigger on the targets\n * @property {string} gain Name of a state to add on the target\n * @property {string} lose Name of a state to remove on the target\n * @property {selector} targets A selector to pick which objects to wire to\n * @property {selector} target - A selector to pick a single object to wire to\n **/\nAFRAME.registerComponent('wire',\n{\n\tmultiple: true,\n\tschema: {\n\t\ton: {type: 'string'},\n\t\temit: {type: 'string'},\n\t\tgained: {type: 'string'},\n\t\tlost: {type: 'string'},\n\t\tgain: {type: 'string'},\n\t\tlose: {type: 'string'},\n\t\ttargets: {type: 'selectorAll'},\n\t\ttarget: {type: 'selector'}\n\t},\n\tupdate: function (oldData) {\n\t\tif (oldData.on) {\n\t\t\tthis.el.removeEventListener(oldData.on, this.actOnTargets);\n\t\t}\n\t\tif (oldData.gained) {\n\t\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\n\t\t}\n\t\tif (oldData.lost) {\n\t\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\n\t\t}\n\n\t\tthis.actOnTargets = function () {\n\t\t\tfunction act(el) {\n\t\t\t\tif (this.data.emit) {\n\t\t\t\t\tel.emit(this.data.emit);\n\t\t\t\t}\n\t\t\t\tif (this.data.gain) {\n\t\t\t\t\tel.addState(this.data.gain);\n\t\t\t\t}\n\t\t\t\tif (this.data.lose) {\n\t\t\t\t\tel.removeState(this.data.lose);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(this.data.targets) this.data.targets.forEach(act.bind(this));\n\t\t\tif(this.data.target) act.call(this, this.data.target);\n\t\t}.bind(this);\n\n\t\tthis.actOnTargetsIfStateMatches = function (event) {\n\t\t\tvar state = event.detail.state;\n\t\t\tif (state === this.data.gained || state === this.data.lost) {\n\t\t\t\tthis.actOnTargets();\n\t\t\t}\n\t\t}.bind(this);\n\n\t\tif (this.data.on) {\n\t\t\tthis.el.addEventListener(this.data.on, this.actOnTargets);\n\t\t}\n\t\tif (this.data.gained) {\n\t\t\tthis.el.addEventListener('stateadded', this.actOnTargetsIfStateMatches);\n\t\t}\n\t\tif (this.data.lost) {\n\t\t\tthis.el.addEventListener('stateremoved', this.actOnTargetsIfStateMatches);\n\t\t}\n\t},\n\tremove: function () {\n\t\tthis.el.removeEventListener(this.data.on, this.actOnTargets);\n\t\tthis.el.removeEventListener('stateadded', this.actOnTargetsIfStateMatches);\n\t\tthis.el.removeEventListener('stateremoved', this.actOnTargetsIfStateMatches);\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/wire.js\n ** module id = 14\n ** module chunks = 0\n **/"],"sourceRoot":""}