{"version":3,"file":"aframe-altspace-component.min.js","sources":["../src/AFrameComponent.js","../src/utilities.js","../src/AltspaceCursorCollider.js","../src/index.js"],"sourcesContent":["'use strict';\r\n\r\nfunction flatten(obj)\r\n{\r\n\tif(!obj.__proto__){\r\n\t\treturn Object.assign( {}, obj );\r\n\t}\r\n\telse {\r\n\t\treturn Object.assign( flatten(obj.__proto__), obj );\r\n\t}\r\n}\r\n\r\nexport default class AFrameComponent\r\n{\r\n\tconstructor(){\r\n\t\tthis.schema = null;\r\n\t}\r\n\r\n\tinit(){ }\r\n\tupdate(oldData){ }\r\n\tremove(){ }\r\n\ttick(time, timeDelta){ }\r\n\tpause(){ }\r\n\tplay(){ }\r\n\tupdateSchema(data){ }\r\n\r\n\tregister(name)\r\n\t{\r\n\t\tAFRAME.registerComponent(name, flatten(this));\r\n\t}\r\n}\r\n","'use strict';\r\n\r\nfunction safeDeepSet(obj, keys, value)\r\n{\r\n\tif(keys.length === 0)\r\n\t\treturn value;\r\n\telse {\r\n\t\tobj[keys[0]] = safeDeepSet(obj[keys[0]] || {}, keys.slice(1), value);\r\n\t\treturn obj;\r\n\t}\r\n}\r\n\r\nexport { safeDeepSet };\r\n","/**\r\n* Enable or disable cursor collision on the object.\r\n* @mixin altspace-cursor-collider\r\n* @memberof altspace\r\n* @prop {boolean} enabled=true - The state of the cursor collider.\r\n*/\r\n\r\n'use strict';\r\n\r\nimport AFrameComponent from './AFrameComponent';\r\nimport {safeDeepSet} from './utilities';\r\n\r\n\r\nexport default class AltspaceCursorCollider extends AFrameComponent\r\n{\r\n\tconstructor(){\r\n\t\tthis.schema = {enabled: {type: 'boolean', default: 'true'}};\r\n\t}\r\n\r\n\tinit()\r\n\t{\r\n\t\tthis.setColliderFlag(this.data.enabled);\r\n\t\tthis.el.addEventListener('model-loaded', (() => {\r\n\t\t\tthis.setColliderFlag(this.data.enabled);\r\n\t\t}).bind(this));\r\n\t}\r\n\r\n\tupdate()\r\n\t{\r\n\t\tthis.setColliderFlag(this.data.enabled);\r\n\t}\r\n\r\n\tsetColliderFlag(state)\r\n\t{\r\n\t\tlet obj = this.el.object3D;\r\n\t\tif(obj){\r\n\t\t\tconsole.log('Setting collider flag to', state);\r\n\t\t\tsafeDeepSet(obj.userData, ['altspace','collider','enabled'], state);\r\n\t\t\tobj.traverse(subobj => {\r\n\t\t\t\tif( subobj instanceof THREE.Mesh ){\r\n\t\t\t\t\tsafeDeepSet(subobj.userData, ['altspace','collider','enabled'], state);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n};\r\n","'use strict';\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\nimport AltspaceCursorCollider from './AltspaceCursorCollider';\r\n(new AltspaceCursorCollider()).register('altspace-cursor-collider');\r\n\r\nexport {AltspaceCursorCollider};\r\n"],"names":["flatten","obj","__proto__","Object","assign","safeDeepSet","keys","value","length","slice","AFrameComponent","this","schema","init","update","oldData","remove","tick","time","timeDelta","pause","play","updateSchema","data","register","name","AFRAME","registerComponent","AltspaceCursorCollider","enabled","type","default","setColliderFlag","el","addEventListener","bind","state","let","object3D","console","log","userData","traverse","subobj","THREE","Mesh","Error"],"mappings":"yBAEA,SAASA,GAAQC,GAEhB,MAAIA,GAAIC,UAIAC,OAAOC,OAAQJ,EAAQC,EAAIC,WAAYD,GAHvCE,OAAOC,UAAYH,GCH5B,QAASI,GAAYJ,EAAKK,EAAMC,GAE/B,MAAmB,KAAhBD,EAAKE,OACAD,GAEPN,EAAIK,EAAK,IAAMD,EAAYJ,EAAIK,EAAK,QAAWA,EAAKG,MAAM,GAAIF,GACvDN,GDIT,GAAqBS,GACrB,WAECC,KAAMC,OAAS,KAGhBF,aAACG,kBACDH,YAACI,gBAAOC,KACRL,YAACM,oBACDN,YAACO,cAAKC,EAAMC,KACZT,YAACU,mBACDV,YAACW,kBACDX,YAACY,sBAAaC,KAEdb,YAACc,kBAASC,GAETC,OAAQC,kBAAkBF,EAAMzB,EAAQW,OErBzC,IAMqBiB,eACrB,aAEEjB,KAAKC,QAAUiB,SAAUC,KAAM,UAAWC,QAAS,uGAGpDH,YAAAf,0BAECF,MAAKqB,gBAAgBrB,KAAKY,KAAKM,SAC/BlB,KAAKsB,GAAGC,iBAAiB,eAAgB,WACxCvB,EAAKqB,gBAAgBrB,EAAKY,KAAKM,UAC7BM,KAAKxB,QAGTiB,YAAAd,kBAECH,KAAKqB,gBAAgBrB,KAAKY,KAAKM,UAGhCD,YAAAI,yBAAgBI,GAEfC,GAAIpC,GAAMU,KAAKsB,GAAGK,QACfrC,KACFsC,QAAQC,IAAI,2BAA4BJ,GACxC/B,EAAYJ,EAAIwC,UAAW,WAAW,WAAW,WAAYL,GAC7DnC,EAAIyC,SAAS,SAAAC,GACRA,YAAkBC,OAAMC,MAC3BxC,EAAYsC,EAAOF,UAAW,WAAW,WAAW,WAAYL,UA3BjB1B,ECXpD,IAAsB,mBAAXgB,QACT,KAAM,IAAIoB,OAAM,iEAGlB,GACKlB,IAA0BJ,SAAS"}